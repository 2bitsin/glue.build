#ifndef LVL1_GL_ES_VERSION_3_0_BASE_HPP
#define LVL1_GL_ES_VERSION_3_0_BASE_HPP
#include "../../function.hpp"
#include "../../types.hpp"
#include <functional>

namespace glue::lvl1
{
	inline namespace base_3_0 
	{
		struct api
		{
			/* 	=============
					constants
					============= */
		public:
			static constexpr auto GL_DEPTH_BUFFER_BIT = 0x00000100;
			static constexpr auto GL_STENCIL_BUFFER_BIT = 0x00000400;
			static constexpr auto GL_COLOR_BUFFER_BIT = 0x00004000;
			static constexpr auto GL_FALSE = 0;
			static constexpr auto GL_TRUE = 1;
			static constexpr auto GL_POINTS = 0x0000;
			static constexpr auto GL_LINES = 0x0001;
			static constexpr auto GL_LINE_LOOP = 0x0002;
			static constexpr auto GL_LINE_STRIP = 0x0003;
			static constexpr auto GL_TRIANGLES = 0x0004;
			static constexpr auto GL_TRIANGLE_STRIP = 0x0005;
			static constexpr auto GL_TRIANGLE_FAN = 0x0006;
			static constexpr auto GL_ZERO = 0;
			static constexpr auto GL_ONE = 1;
			static constexpr auto GL_SRC_COLOR = 0x0300;
			static constexpr auto GL_ONE_MINUS_SRC_COLOR = 0x0301;
			static constexpr auto GL_SRC_ALPHA = 0x0302;
			static constexpr auto GL_ONE_MINUS_SRC_ALPHA = 0x0303;
			static constexpr auto GL_DST_ALPHA = 0x0304;
			static constexpr auto GL_ONE_MINUS_DST_ALPHA = 0x0305;
			static constexpr auto GL_DST_COLOR = 0x0306;
			static constexpr auto GL_ONE_MINUS_DST_COLOR = 0x0307;
			static constexpr auto GL_SRC_ALPHA_SATURATE = 0x0308;
			static constexpr auto GL_FUNC_ADD = 0x8006;
			static constexpr auto GL_BLEND_EQUATION = 0x8009;
			static constexpr auto GL_BLEND_EQUATION_RGB = 0x8009;
			static constexpr auto GL_BLEND_EQUATION_ALPHA = 0x883D;
			static constexpr auto GL_FUNC_SUBTRACT = 0x800A;
			static constexpr auto GL_FUNC_REVERSE_SUBTRACT = 0x800B;
			static constexpr auto GL_BLEND_DST_RGB = 0x80C8;
			static constexpr auto GL_BLEND_SRC_RGB = 0x80C9;
			static constexpr auto GL_BLEND_DST_ALPHA = 0x80CA;
			static constexpr auto GL_BLEND_SRC_ALPHA = 0x80CB;
			static constexpr auto GL_CONSTANT_COLOR = 0x8001;
			static constexpr auto GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
			static constexpr auto GL_CONSTANT_ALPHA = 0x8003;
			static constexpr auto GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
			static constexpr auto GL_BLEND_COLOR = 0x8005;
			static constexpr auto GL_ARRAY_BUFFER = 0x8892;
			static constexpr auto GL_ELEMENT_ARRAY_BUFFER = 0x8893;
			static constexpr auto GL_ARRAY_BUFFER_BINDING = 0x8894;
			static constexpr auto GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
			static constexpr auto GL_STREAM_DRAW = 0x88E0;
			static constexpr auto GL_STATIC_DRAW = 0x88E4;
			static constexpr auto GL_DYNAMIC_DRAW = 0x88E8;
			static constexpr auto GL_BUFFER_SIZE = 0x8764;
			static constexpr auto GL_BUFFER_USAGE = 0x8765;
			static constexpr auto GL_CURRENT_VERTEX_ATTRIB = 0x8626;
			static constexpr auto GL_FRONT = 0x0404;
			static constexpr auto GL_BACK = 0x0405;
			static constexpr auto GL_FRONT_AND_BACK = 0x0408;
			static constexpr auto GL_TEXTURE_2D = 0x0DE1;
			static constexpr auto GL_CULL_FACE = 0x0B44;
			static constexpr auto GL_BLEND = 0x0BE2;
			static constexpr auto GL_DITHER = 0x0BD0;
			static constexpr auto GL_STENCIL_TEST = 0x0B90;
			static constexpr auto GL_DEPTH_TEST = 0x0B71;
			static constexpr auto GL_SCISSOR_TEST = 0x0C11;
			static constexpr auto GL_POLYGON_OFFSET_FILL = 0x8037;
			static constexpr auto GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
			static constexpr auto GL_SAMPLE_COVERAGE = 0x80A0;
			static constexpr auto GL_NO_ERROR = 0;
			static constexpr auto GL_INVALID_ENUM = 0x0500;
			static constexpr auto GL_INVALID_VALUE = 0x0501;
			static constexpr auto GL_INVALID_OPERATION = 0x0502;
			static constexpr auto GL_OUT_OF_MEMORY = 0x0505;
			static constexpr auto GL_CW = 0x0900;
			static constexpr auto GL_CCW = 0x0901;
			static constexpr auto GL_LINE_WIDTH = 0x0B21;
			static constexpr auto GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
			static constexpr auto GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
			static constexpr auto GL_CULL_FACE_MODE = 0x0B45;
			static constexpr auto GL_FRONT_FACE = 0x0B46;
			static constexpr auto GL_DEPTH_RANGE = 0x0B70;
			static constexpr auto GL_DEPTH_WRITEMASK = 0x0B72;
			static constexpr auto GL_DEPTH_CLEAR_VALUE = 0x0B73;
			static constexpr auto GL_DEPTH_FUNC = 0x0B74;
			static constexpr auto GL_STENCIL_CLEAR_VALUE = 0x0B91;
			static constexpr auto GL_STENCIL_FUNC = 0x0B92;
			static constexpr auto GL_STENCIL_FAIL = 0x0B94;
			static constexpr auto GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
			static constexpr auto GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
			static constexpr auto GL_STENCIL_REF = 0x0B97;
			static constexpr auto GL_STENCIL_VALUE_MASK = 0x0B93;
			static constexpr auto GL_STENCIL_WRITEMASK = 0x0B98;
			static constexpr auto GL_STENCIL_BACK_FUNC = 0x8800;
			static constexpr auto GL_STENCIL_BACK_FAIL = 0x8801;
			static constexpr auto GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
			static constexpr auto GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
			static constexpr auto GL_STENCIL_BACK_REF = 0x8CA3;
			static constexpr auto GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
			static constexpr auto GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
			static constexpr auto GL_VIEWPORT = 0x0BA2;
			static constexpr auto GL_SCISSOR_BOX = 0x0C10;
			static constexpr auto GL_COLOR_CLEAR_VALUE = 0x0C22;
			static constexpr auto GL_COLOR_WRITEMASK = 0x0C23;
			static constexpr auto GL_UNPACK_ALIGNMENT = 0x0CF5;
			static constexpr auto GL_PACK_ALIGNMENT = 0x0D05;
			static constexpr auto GL_MAX_TEXTURE_SIZE = 0x0D33;
			static constexpr auto GL_MAX_VIEWPORT_DIMS = 0x0D3A;
			static constexpr auto GL_SUBPIXEL_BITS = 0x0D50;
			static constexpr auto GL_RED_BITS = 0x0D52;
			static constexpr auto GL_GREEN_BITS = 0x0D53;
			static constexpr auto GL_BLUE_BITS = 0x0D54;
			static constexpr auto GL_ALPHA_BITS = 0x0D55;
			static constexpr auto GL_DEPTH_BITS = 0x0D56;
			static constexpr auto GL_STENCIL_BITS = 0x0D57;
			static constexpr auto GL_POLYGON_OFFSET_UNITS = 0x2A00;
			static constexpr auto GL_POLYGON_OFFSET_FACTOR = 0x8038;
			static constexpr auto GL_TEXTURE_BINDING_2D = 0x8069;
			static constexpr auto GL_SAMPLE_BUFFERS = 0x80A8;
			static constexpr auto GL_SAMPLES = 0x80A9;
			static constexpr auto GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
			static constexpr auto GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
			static constexpr auto GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
			static constexpr auto GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
			static constexpr auto GL_DONT_CARE = 0x1100;
			static constexpr auto GL_FASTEST = 0x1101;
			static constexpr auto GL_NICEST = 0x1102;
			static constexpr auto GL_GENERATE_MIPMAP_HINT = 0x8192;
			static constexpr auto GL_BYTE = 0x1400;
			static constexpr auto GL_UNSIGNED_BYTE = 0x1401;
			static constexpr auto GL_SHORT = 0x1402;
			static constexpr auto GL_UNSIGNED_SHORT = 0x1403;
			static constexpr auto GL_INT = 0x1404;
			static constexpr auto GL_UNSIGNED_INT = 0x1405;
			static constexpr auto GL_FLOAT = 0x1406;
			static constexpr auto GL_FIXED = 0x140C;
			static constexpr auto GL_DEPTH_COMPONENT = 0x1902;
			static constexpr auto GL_ALPHA = 0x1906;
			static constexpr auto GL_RGB = 0x1907;
			static constexpr auto GL_RGBA = 0x1908;
			static constexpr auto GL_LUMINANCE = 0x1909;
			static constexpr auto GL_LUMINANCE_ALPHA = 0x190A;
			static constexpr auto GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
			static constexpr auto GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
			static constexpr auto GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
			static constexpr auto GL_FRAGMENT_SHADER = 0x8B30;
			static constexpr auto GL_VERTEX_SHADER = 0x8B31;
			static constexpr auto GL_MAX_VERTEX_ATTRIBS = 0x8869;
			static constexpr auto GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
			static constexpr auto GL_MAX_VARYING_VECTORS = 0x8DFC;
			static constexpr auto GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
			static constexpr auto GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
			static constexpr auto GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
			static constexpr auto GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
			static constexpr auto GL_SHADER_TYPE = 0x8B4F;
			static constexpr auto GL_DELETE_STATUS = 0x8B80;
			static constexpr auto GL_LINK_STATUS = 0x8B82;
			static constexpr auto GL_VALIDATE_STATUS = 0x8B83;
			static constexpr auto GL_ATTACHED_SHADERS = 0x8B85;
			static constexpr auto GL_ACTIVE_UNIFORMS = 0x8B86;
			static constexpr auto GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
			static constexpr auto GL_ACTIVE_ATTRIBUTES = 0x8B89;
			static constexpr auto GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
			static constexpr auto GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
			static constexpr auto GL_CURRENT_PROGRAM = 0x8B8D;
			static constexpr auto GL_NEVER = 0x0200;
			static constexpr auto GL_LESS = 0x0201;
			static constexpr auto GL_EQUAL = 0x0202;
			static constexpr auto GL_LEQUAL = 0x0203;
			static constexpr auto GL_GREATER = 0x0204;
			static constexpr auto GL_NOTEQUAL = 0x0205;
			static constexpr auto GL_GEQUAL = 0x0206;
			static constexpr auto GL_ALWAYS = 0x0207;
			static constexpr auto GL_KEEP = 0x1E00;
			static constexpr auto GL_REPLACE = 0x1E01;
			static constexpr auto GL_INCR = 0x1E02;
			static constexpr auto GL_DECR = 0x1E03;
			static constexpr auto GL_INVERT = 0x150A;
			static constexpr auto GL_INCR_WRAP = 0x8507;
			static constexpr auto GL_DECR_WRAP = 0x8508;
			static constexpr auto GL_VENDOR = 0x1F00;
			static constexpr auto GL_RENDERER = 0x1F01;
			static constexpr auto GL_VERSION = 0x1F02;
			static constexpr auto GL_EXTENSIONS = 0x1F03;
			static constexpr auto GL_NEAREST = 0x2600;
			static constexpr auto GL_LINEAR = 0x2601;
			static constexpr auto GL_NEAREST_MIPMAP_NEAREST = 0x2700;
			static constexpr auto GL_LINEAR_MIPMAP_NEAREST = 0x2701;
			static constexpr auto GL_NEAREST_MIPMAP_LINEAR = 0x2702;
			static constexpr auto GL_LINEAR_MIPMAP_LINEAR = 0x2703;
			static constexpr auto GL_TEXTURE_MAG_FILTER = 0x2800;
			static constexpr auto GL_TEXTURE_MIN_FILTER = 0x2801;
			static constexpr auto GL_TEXTURE_WRAP_S = 0x2802;
			static constexpr auto GL_TEXTURE_WRAP_T = 0x2803;
			static constexpr auto GL_TEXTURE = 0x1702;
			static constexpr auto GL_TEXTURE_CUBE_MAP = 0x8513;
			static constexpr auto GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
			static constexpr auto GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
			static constexpr auto GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
			static constexpr auto GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
			static constexpr auto GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
			static constexpr auto GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
			static constexpr auto GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
			static constexpr auto GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
			static constexpr auto GL_TEXTURE0 = 0x84C0;
			static constexpr auto GL_TEXTURE1 = 0x84C1;
			static constexpr auto GL_TEXTURE2 = 0x84C2;
			static constexpr auto GL_TEXTURE3 = 0x84C3;
			static constexpr auto GL_TEXTURE4 = 0x84C4;
			static constexpr auto GL_TEXTURE5 = 0x84C5;
			static constexpr auto GL_TEXTURE6 = 0x84C6;
			static constexpr auto GL_TEXTURE7 = 0x84C7;
			static constexpr auto GL_TEXTURE8 = 0x84C8;
			static constexpr auto GL_TEXTURE9 = 0x84C9;
			static constexpr auto GL_TEXTURE10 = 0x84CA;
			static constexpr auto GL_TEXTURE11 = 0x84CB;
			static constexpr auto GL_TEXTURE12 = 0x84CC;
			static constexpr auto GL_TEXTURE13 = 0x84CD;
			static constexpr auto GL_TEXTURE14 = 0x84CE;
			static constexpr auto GL_TEXTURE15 = 0x84CF;
			static constexpr auto GL_TEXTURE16 = 0x84D0;
			static constexpr auto GL_TEXTURE17 = 0x84D1;
			static constexpr auto GL_TEXTURE18 = 0x84D2;
			static constexpr auto GL_TEXTURE19 = 0x84D3;
			static constexpr auto GL_TEXTURE20 = 0x84D4;
			static constexpr auto GL_TEXTURE21 = 0x84D5;
			static constexpr auto GL_TEXTURE22 = 0x84D6;
			static constexpr auto GL_TEXTURE23 = 0x84D7;
			static constexpr auto GL_TEXTURE24 = 0x84D8;
			static constexpr auto GL_TEXTURE25 = 0x84D9;
			static constexpr auto GL_TEXTURE26 = 0x84DA;
			static constexpr auto GL_TEXTURE27 = 0x84DB;
			static constexpr auto GL_TEXTURE28 = 0x84DC;
			static constexpr auto GL_TEXTURE29 = 0x84DD;
			static constexpr auto GL_TEXTURE30 = 0x84DE;
			static constexpr auto GL_TEXTURE31 = 0x84DF;
			static constexpr auto GL_ACTIVE_TEXTURE = 0x84E0;
			static constexpr auto GL_REPEAT = 0x2901;
			static constexpr auto GL_CLAMP_TO_EDGE = 0x812F;
			static constexpr auto GL_MIRRORED_REPEAT = 0x8370;
			static constexpr auto GL_FLOAT_VEC2 = 0x8B50;
			static constexpr auto GL_FLOAT_VEC3 = 0x8B51;
			static constexpr auto GL_FLOAT_VEC4 = 0x8B52;
			static constexpr auto GL_INT_VEC2 = 0x8B53;
			static constexpr auto GL_INT_VEC3 = 0x8B54;
			static constexpr auto GL_INT_VEC4 = 0x8B55;
			static constexpr auto GL_BOOL = 0x8B56;
			static constexpr auto GL_BOOL_VEC2 = 0x8B57;
			static constexpr auto GL_BOOL_VEC3 = 0x8B58;
			static constexpr auto GL_BOOL_VEC4 = 0x8B59;
			static constexpr auto GL_FLOAT_MAT2 = 0x8B5A;
			static constexpr auto GL_FLOAT_MAT3 = 0x8B5B;
			static constexpr auto GL_FLOAT_MAT4 = 0x8B5C;
			static constexpr auto GL_SAMPLER_2D = 0x8B5E;
			static constexpr auto GL_SAMPLER_CUBE = 0x8B60;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
			static constexpr auto GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
			static constexpr auto GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
			static constexpr auto GL_COMPILE_STATUS = 0x8B81;
			static constexpr auto GL_INFO_LOG_LENGTH = 0x8B84;
			static constexpr auto GL_SHADER_SOURCE_LENGTH = 0x8B88;
			static constexpr auto GL_SHADER_COMPILER = 0x8DFA;
			static constexpr auto GL_SHADER_BINARY_FORMATS = 0x8DF8;
			static constexpr auto GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
			static constexpr auto GL_LOW_FLOAT = 0x8DF0;
			static constexpr auto GL_MEDIUM_FLOAT = 0x8DF1;
			static constexpr auto GL_HIGH_FLOAT = 0x8DF2;
			static constexpr auto GL_LOW_INT = 0x8DF3;
			static constexpr auto GL_MEDIUM_INT = 0x8DF4;
			static constexpr auto GL_HIGH_INT = 0x8DF5;
			static constexpr auto GL_FRAMEBUFFER = 0x8D40;
			static constexpr auto GL_RENDERBUFFER = 0x8D41;
			static constexpr auto GL_RGBA4 = 0x8056;
			static constexpr auto GL_RGB5_A1 = 0x8057;
			static constexpr auto GL_RGB565 = 0x8D62;
			static constexpr auto GL_DEPTH_COMPONENT16 = 0x81A5;
			static constexpr auto GL_STENCIL_INDEX8 = 0x8D48;
			static constexpr auto GL_RENDERBUFFER_WIDTH = 0x8D42;
			static constexpr auto GL_RENDERBUFFER_HEIGHT = 0x8D43;
			static constexpr auto GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
			static constexpr auto GL_RENDERBUFFER_RED_SIZE = 0x8D50;
			static constexpr auto GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
			static constexpr auto GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
			static constexpr auto GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
			static constexpr auto GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
			static constexpr auto GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
			static constexpr auto GL_COLOR_ATTACHMENT0 = 0x8CE0;
			static constexpr auto GL_DEPTH_ATTACHMENT = 0x8D00;
			static constexpr auto GL_STENCIL_ATTACHMENT = 0x8D20;
			static constexpr auto GL_NONE = 0;
			static constexpr auto GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
			static constexpr auto GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
			static constexpr auto GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
			static constexpr auto GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
			static constexpr auto GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
			static constexpr auto GL_FRAMEBUFFER_BINDING = 0x8CA6;
			static constexpr auto GL_RENDERBUFFER_BINDING = 0x8CA7;
			static constexpr auto GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
			static constexpr auto GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
			static constexpr auto GL_READ_BUFFER = 0x0C02;
			static constexpr auto GL_UNPACK_ROW_LENGTH = 0x0CF2;
			static constexpr auto GL_UNPACK_SKIP_ROWS = 0x0CF3;
			static constexpr auto GL_UNPACK_SKIP_PIXELS = 0x0CF4;
			static constexpr auto GL_PACK_ROW_LENGTH = 0x0D02;
			static constexpr auto GL_PACK_SKIP_ROWS = 0x0D03;
			static constexpr auto GL_PACK_SKIP_PIXELS = 0x0D04;
			static constexpr auto GL_COLOR = 0x1800;
			static constexpr auto GL_DEPTH = 0x1801;
			static constexpr auto GL_STENCIL = 0x1802;
			static constexpr auto GL_RED = 0x1903;
			static constexpr auto GL_RGB8 = 0x8051;
			static constexpr auto GL_RGBA8 = 0x8058;
			static constexpr auto GL_RGB10_A2 = 0x8059;
			static constexpr auto GL_TEXTURE_BINDING_3D = 0x806A;
			static constexpr auto GL_UNPACK_SKIP_IMAGES = 0x806D;
			static constexpr auto GL_UNPACK_IMAGE_HEIGHT = 0x806E;
			static constexpr auto GL_TEXTURE_3D = 0x806F;
			static constexpr auto GL_TEXTURE_WRAP_R = 0x8072;
			static constexpr auto GL_MAX_3D_TEXTURE_SIZE = 0x8073;
			static constexpr auto GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
			static constexpr auto GL_MAX_ELEMENTS_VERTICES = 0x80E8;
			static constexpr auto GL_MAX_ELEMENTS_INDICES = 0x80E9;
			static constexpr auto GL_TEXTURE_MIN_LOD = 0x813A;
			static constexpr auto GL_TEXTURE_MAX_LOD = 0x813B;
			static constexpr auto GL_TEXTURE_BASE_LEVEL = 0x813C;
			static constexpr auto GL_TEXTURE_MAX_LEVEL = 0x813D;
			static constexpr auto GL_MIN = 0x8007;
			static constexpr auto GL_MAX = 0x8008;
			static constexpr auto GL_DEPTH_COMPONENT24 = 0x81A6;
			static constexpr auto GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
			static constexpr auto GL_TEXTURE_COMPARE_MODE = 0x884C;
			static constexpr auto GL_TEXTURE_COMPARE_FUNC = 0x884D;
			static constexpr auto GL_CURRENT_QUERY = 0x8865;
			static constexpr auto GL_QUERY_RESULT = 0x8866;
			static constexpr auto GL_QUERY_RESULT_AVAILABLE = 0x8867;
			static constexpr auto GL_BUFFER_MAPPED = 0x88BC;
			static constexpr auto GL_BUFFER_MAP_POINTER = 0x88BD;
			static constexpr auto GL_STREAM_READ = 0x88E1;
			static constexpr auto GL_STREAM_COPY = 0x88E2;
			static constexpr auto GL_STATIC_READ = 0x88E5;
			static constexpr auto GL_STATIC_COPY = 0x88E6;
			static constexpr auto GL_DYNAMIC_READ = 0x88E9;
			static constexpr auto GL_DYNAMIC_COPY = 0x88EA;
			static constexpr auto GL_MAX_DRAW_BUFFERS = 0x8824;
			static constexpr auto GL_DRAW_BUFFER0 = 0x8825;
			static constexpr auto GL_DRAW_BUFFER1 = 0x8826;
			static constexpr auto GL_DRAW_BUFFER2 = 0x8827;
			static constexpr auto GL_DRAW_BUFFER3 = 0x8828;
			static constexpr auto GL_DRAW_BUFFER4 = 0x8829;
			static constexpr auto GL_DRAW_BUFFER5 = 0x882A;
			static constexpr auto GL_DRAW_BUFFER6 = 0x882B;
			static constexpr auto GL_DRAW_BUFFER7 = 0x882C;
			static constexpr auto GL_DRAW_BUFFER8 = 0x882D;
			static constexpr auto GL_DRAW_BUFFER9 = 0x882E;
			static constexpr auto GL_DRAW_BUFFER10 = 0x882F;
			static constexpr auto GL_DRAW_BUFFER11 = 0x8830;
			static constexpr auto GL_DRAW_BUFFER12 = 0x8831;
			static constexpr auto GL_DRAW_BUFFER13 = 0x8832;
			static constexpr auto GL_DRAW_BUFFER14 = 0x8833;
			static constexpr auto GL_DRAW_BUFFER15 = 0x8834;
			static constexpr auto GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
			static constexpr auto GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
			static constexpr auto GL_SAMPLER_3D = 0x8B5F;
			static constexpr auto GL_SAMPLER_2D_SHADOW = 0x8B62;
			static constexpr auto GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
			static constexpr auto GL_PIXEL_PACK_BUFFER = 0x88EB;
			static constexpr auto GL_PIXEL_UNPACK_BUFFER = 0x88EC;
			static constexpr auto GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
			static constexpr auto GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
			static constexpr auto GL_FLOAT_MAT2x3 = 0x8B65;
			static constexpr auto GL_FLOAT_MAT2x4 = 0x8B66;
			static constexpr auto GL_FLOAT_MAT3x2 = 0x8B67;
			static constexpr auto GL_FLOAT_MAT3x4 = 0x8B68;
			static constexpr auto GL_FLOAT_MAT4x2 = 0x8B69;
			static constexpr auto GL_FLOAT_MAT4x3 = 0x8B6A;
			static constexpr auto GL_SRGB = 0x8C40;
			static constexpr auto GL_SRGB8 = 0x8C41;
			static constexpr auto GL_SRGB8_ALPHA8 = 0x8C43;
			static constexpr auto GL_COMPARE_REF_TO_TEXTURE = 0x884E;
			static constexpr auto GL_MAJOR_VERSION = 0x821B;
			static constexpr auto GL_MINOR_VERSION = 0x821C;
			static constexpr auto GL_NUM_EXTENSIONS = 0x821D;
			static constexpr auto GL_RGBA32F = 0x8814;
			static constexpr auto GL_RGB32F = 0x8815;
			static constexpr auto GL_RGBA16F = 0x881A;
			static constexpr auto GL_RGB16F = 0x881B;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
			static constexpr auto GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
			static constexpr auto GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
			static constexpr auto GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
			static constexpr auto GL_MAX_VARYING_COMPONENTS = 0x8B4B;
			static constexpr auto GL_TEXTURE_2D_ARRAY = 0x8C1A;
			static constexpr auto GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
			static constexpr auto GL_R11F_G11F_B10F = 0x8C3A;
			static constexpr auto GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
			static constexpr auto GL_RGB9_E5 = 0x8C3D;
			static constexpr auto GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
			static constexpr auto GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
			static constexpr auto GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
			static constexpr auto GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
			static constexpr auto GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
			static constexpr auto GL_RASTERIZER_DISCARD = 0x8C89;
			static constexpr auto GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
			static constexpr auto GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
			static constexpr auto GL_INTERLEAVED_ATTRIBS = 0x8C8C;
			static constexpr auto GL_SEPARATE_ATTRIBS = 0x8C8D;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
			static constexpr auto GL_RGBA32UI = 0x8D70;
			static constexpr auto GL_RGB32UI = 0x8D71;
			static constexpr auto GL_RGBA16UI = 0x8D76;
			static constexpr auto GL_RGB16UI = 0x8D77;
			static constexpr auto GL_RGBA8UI = 0x8D7C;
			static constexpr auto GL_RGB8UI = 0x8D7D;
			static constexpr auto GL_RGBA32I = 0x8D82;
			static constexpr auto GL_RGB32I = 0x8D83;
			static constexpr auto GL_RGBA16I = 0x8D88;
			static constexpr auto GL_RGB16I = 0x8D89;
			static constexpr auto GL_RGBA8I = 0x8D8E;
			static constexpr auto GL_RGB8I = 0x8D8F;
			static constexpr auto GL_RED_INTEGER = 0x8D94;
			static constexpr auto GL_RGB_INTEGER = 0x8D98;
			static constexpr auto GL_RGBA_INTEGER = 0x8D99;
			static constexpr auto GL_SAMPLER_2D_ARRAY = 0x8DC1;
			static constexpr auto GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
			static constexpr auto GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
			static constexpr auto GL_UNSIGNED_INT_VEC2 = 0x8DC6;
			static constexpr auto GL_UNSIGNED_INT_VEC3 = 0x8DC7;
			static constexpr auto GL_UNSIGNED_INT_VEC4 = 0x8DC8;
			static constexpr auto GL_INT_SAMPLER_2D = 0x8DCA;
			static constexpr auto GL_INT_SAMPLER_3D = 0x8DCB;
			static constexpr auto GL_INT_SAMPLER_CUBE = 0x8DCC;
			static constexpr auto GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
			static constexpr auto GL_BUFFER_ACCESS_FLAGS = 0x911F;
			static constexpr auto GL_BUFFER_MAP_LENGTH = 0x9120;
			static constexpr auto GL_BUFFER_MAP_OFFSET = 0x9121;
			static constexpr auto GL_DEPTH_COMPONENT32F = 0x8CAC;
			static constexpr auto GL_DEPTH32F_STENCIL8 = 0x8CAD;
			static constexpr auto GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
			static constexpr auto GL_FRAMEBUFFER_DEFAULT = 0x8218;
			static constexpr auto GL_FRAMEBUFFER_UNDEFINED = 0x8219;
			static constexpr auto GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
			static constexpr auto GL_DEPTH_STENCIL = 0x84F9;
			static constexpr auto GL_UNSIGNED_INT_24_8 = 0x84FA;
			static constexpr auto GL_DEPTH24_STENCIL8 = 0x88F0;
			static constexpr auto GL_UNSIGNED_NORMALIZED = 0x8C17;
			static constexpr auto GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
			static constexpr auto GL_READ_FRAMEBUFFER = 0x8CA8;
			static constexpr auto GL_DRAW_FRAMEBUFFER = 0x8CA9;
			static constexpr auto GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
			static constexpr auto GL_RENDERBUFFER_SAMPLES = 0x8CAB;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
			static constexpr auto GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
			static constexpr auto GL_COLOR_ATTACHMENT1 = 0x8CE1;
			static constexpr auto GL_COLOR_ATTACHMENT2 = 0x8CE2;
			static constexpr auto GL_COLOR_ATTACHMENT3 = 0x8CE3;
			static constexpr auto GL_COLOR_ATTACHMENT4 = 0x8CE4;
			static constexpr auto GL_COLOR_ATTACHMENT5 = 0x8CE5;
			static constexpr auto GL_COLOR_ATTACHMENT6 = 0x8CE6;
			static constexpr auto GL_COLOR_ATTACHMENT7 = 0x8CE7;
			static constexpr auto GL_COLOR_ATTACHMENT8 = 0x8CE8;
			static constexpr auto GL_COLOR_ATTACHMENT9 = 0x8CE9;
			static constexpr auto GL_COLOR_ATTACHMENT10 = 0x8CEA;
			static constexpr auto GL_COLOR_ATTACHMENT11 = 0x8CEB;
			static constexpr auto GL_COLOR_ATTACHMENT12 = 0x8CEC;
			static constexpr auto GL_COLOR_ATTACHMENT13 = 0x8CED;
			static constexpr auto GL_COLOR_ATTACHMENT14 = 0x8CEE;
			static constexpr auto GL_COLOR_ATTACHMENT15 = 0x8CEF;
			static constexpr auto GL_COLOR_ATTACHMENT16 = 0x8CF0;
			static constexpr auto GL_COLOR_ATTACHMENT17 = 0x8CF1;
			static constexpr auto GL_COLOR_ATTACHMENT18 = 0x8CF2;
			static constexpr auto GL_COLOR_ATTACHMENT19 = 0x8CF3;
			static constexpr auto GL_COLOR_ATTACHMENT20 = 0x8CF4;
			static constexpr auto GL_COLOR_ATTACHMENT21 = 0x8CF5;
			static constexpr auto GL_COLOR_ATTACHMENT22 = 0x8CF6;
			static constexpr auto GL_COLOR_ATTACHMENT23 = 0x8CF7;
			static constexpr auto GL_COLOR_ATTACHMENT24 = 0x8CF8;
			static constexpr auto GL_COLOR_ATTACHMENT25 = 0x8CF9;
			static constexpr auto GL_COLOR_ATTACHMENT26 = 0x8CFA;
			static constexpr auto GL_COLOR_ATTACHMENT27 = 0x8CFB;
			static constexpr auto GL_COLOR_ATTACHMENT28 = 0x8CFC;
			static constexpr auto GL_COLOR_ATTACHMENT29 = 0x8CFD;
			static constexpr auto GL_COLOR_ATTACHMENT30 = 0x8CFE;
			static constexpr auto GL_COLOR_ATTACHMENT31 = 0x8CFF;
			static constexpr auto GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
			static constexpr auto GL_MAX_SAMPLES = 0x8D57;
			static constexpr auto GL_HALF_FLOAT = 0x140B;
			static constexpr auto GL_MAP_READ_BIT = 0x0001;
			static constexpr auto GL_MAP_WRITE_BIT = 0x0002;
			static constexpr auto GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
			static constexpr auto GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
			static constexpr auto GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
			static constexpr auto GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
			static constexpr auto GL_RG = 0x8227;
			static constexpr auto GL_RG_INTEGER = 0x8228;
			static constexpr auto GL_R8 = 0x8229;
			static constexpr auto GL_RG8 = 0x822B;
			static constexpr auto GL_R16F = 0x822D;
			static constexpr auto GL_R32F = 0x822E;
			static constexpr auto GL_RG16F = 0x822F;
			static constexpr auto GL_RG32F = 0x8230;
			static constexpr auto GL_R8I = 0x8231;
			static constexpr auto GL_R8UI = 0x8232;
			static constexpr auto GL_R16I = 0x8233;
			static constexpr auto GL_R16UI = 0x8234;
			static constexpr auto GL_R32I = 0x8235;
			static constexpr auto GL_R32UI = 0x8236;
			static constexpr auto GL_RG8I = 0x8237;
			static constexpr auto GL_RG8UI = 0x8238;
			static constexpr auto GL_RG16I = 0x8239;
			static constexpr auto GL_RG16UI = 0x823A;
			static constexpr auto GL_RG32I = 0x823B;
			static constexpr auto GL_RG32UI = 0x823C;
			static constexpr auto GL_VERTEX_ARRAY_BINDING = 0x85B5;
			static constexpr auto GL_R8_SNORM = 0x8F94;
			static constexpr auto GL_RG8_SNORM = 0x8F95;
			static constexpr auto GL_RGB8_SNORM = 0x8F96;
			static constexpr auto GL_RGBA8_SNORM = 0x8F97;
			static constexpr auto GL_SIGNED_NORMALIZED = 0x8F9C;
			static constexpr auto GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
			static constexpr auto GL_COPY_READ_BUFFER = 0x8F36;
			static constexpr auto GL_COPY_WRITE_BUFFER = 0x8F37;
			static constexpr auto GL_COPY_READ_BUFFER_BINDING = 0x8F36;
			static constexpr auto GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
			static constexpr auto GL_UNIFORM_BUFFER = 0x8A11;
			static constexpr auto GL_UNIFORM_BUFFER_BINDING = 0x8A28;
			static constexpr auto GL_UNIFORM_BUFFER_START = 0x8A29;
			static constexpr auto GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
			static constexpr auto GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
			static constexpr auto GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
			static constexpr auto GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
			static constexpr auto GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
			static constexpr auto GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
			static constexpr auto GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
			static constexpr auto GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
			static constexpr auto GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
			static constexpr auto GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
			static constexpr auto GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
			static constexpr auto GL_UNIFORM_TYPE = 0x8A37;
			static constexpr auto GL_UNIFORM_SIZE = 0x8A38;
			static constexpr auto GL_UNIFORM_NAME_LENGTH = 0x8A39;
			static constexpr auto GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
			static constexpr auto GL_UNIFORM_OFFSET = 0x8A3B;
			static constexpr auto GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
			static constexpr auto GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
			static constexpr auto GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
			static constexpr auto GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
			static constexpr auto GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
			static constexpr auto GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
			static constexpr auto GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
			static constexpr auto GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
			static constexpr auto GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
			static constexpr auto GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
			static constexpr auto GL_INVALID_INDEX = 0xFFFFFFFFu;
			static constexpr auto GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
			static constexpr auto GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
			static constexpr auto GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
			static constexpr auto GL_OBJECT_TYPE = 0x9112;
			static constexpr auto GL_SYNC_CONDITION = 0x9113;
			static constexpr auto GL_SYNC_STATUS = 0x9114;
			static constexpr auto GL_SYNC_FLAGS = 0x9115;
			static constexpr auto GL_SYNC_FENCE = 0x9116;
			static constexpr auto GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
			static constexpr auto GL_UNSIGNALED = 0x9118;
			static constexpr auto GL_SIGNALED = 0x9119;
			static constexpr auto GL_ALREADY_SIGNALED = 0x911A;
			static constexpr auto GL_TIMEOUT_EXPIRED = 0x911B;
			static constexpr auto GL_CONDITION_SATISFIED = 0x911C;
			static constexpr auto GL_WAIT_FAILED = 0x911D;
			static constexpr auto GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
			static constexpr auto GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFull;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
			static constexpr auto GL_ANY_SAMPLES_PASSED = 0x8C2F;
			static constexpr auto GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
			static constexpr auto GL_SAMPLER_BINDING = 0x8919;
			static constexpr auto GL_RGB10_A2UI = 0x906F;
			static constexpr auto GL_TEXTURE_SWIZZLE_R = 0x8E42;
			static constexpr auto GL_TEXTURE_SWIZZLE_G = 0x8E43;
			static constexpr auto GL_TEXTURE_SWIZZLE_B = 0x8E44;
			static constexpr auto GL_TEXTURE_SWIZZLE_A = 0x8E45;
			static constexpr auto GL_GREEN = 0x1904;
			static constexpr auto GL_BLUE = 0x1905;
			static constexpr auto GL_INT_2_10_10_10_REV = 0x8D9F;
			static constexpr auto GL_TRANSFORM_FEEDBACK = 0x8E22;
			static constexpr auto GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
			static constexpr auto GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
			static constexpr auto GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
			static constexpr auto GL_PROGRAM_BINARY_LENGTH = 0x8741;
			static constexpr auto GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
			static constexpr auto GL_PROGRAM_BINARY_FORMATS = 0x87FF;
			static constexpr auto GL_COMPRESSED_R11_EAC = 0x9270;
			static constexpr auto GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
			static constexpr auto GL_COMPRESSED_RG11_EAC = 0x9272;
			static constexpr auto GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
			static constexpr auto GL_COMPRESSED_RGB8_ETC2 = 0x9274;
			static constexpr auto GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
			static constexpr auto GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
			static constexpr auto GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
			static constexpr auto GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
			static constexpr auto GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
			static constexpr auto GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
			static constexpr auto GL_MAX_ELEMENT_INDEX = 0x8D6B;
			static constexpr auto GL_NUM_SAMPLE_COUNTS = 0x9380;
			static constexpr auto GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
			/*	=============
					functions
					============= */
		public:
			function<void(enum_t)> ActiveTexture = nullptr;
			function<void(std::uint32_t, std::uint32_t)> AttachShader = nullptr;
			function<void(std::uint32_t, std::uint32_t, const char *)> BindAttribLocation = nullptr;
			function<void(enum_t, std::uint32_t)> BindBuffer = nullptr;
			function<void(enum_t, std::uint32_t)> BindFramebuffer = nullptr;
			function<void(enum_t, std::uint32_t)> BindRenderbuffer = nullptr;
			function<void(enum_t, std::uint32_t)> BindTexture = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> BlendColor = nullptr;
			function<void(enum_t)> BlendEquation = nullptr;
			function<void(enum_t, enum_t)> BlendEquationSeparate = nullptr;
			function<void(enum_t, enum_t)> BlendFunc = nullptr;
			function<void(enum_t, enum_t, enum_t, enum_t)> BlendFuncSeparate = nullptr;
			function<void(enum_t, std::ptrdiff_t, const void *, enum_t)> BufferData = nullptr;
			function<void(enum_t, std::ptrdiff_t, std::ptrdiff_t, const void *)> BufferSubData = nullptr;
			function<enum_t(enum_t)> CheckFramebufferStatus = nullptr;
			function<void(bitfield_t)> Clear = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> ClearColor = nullptr;
			function<void(float32_t)> ClearDepthf = nullptr;
			function<void(std::int32_t)> ClearStencil = nullptr;
			function<void(boolean_t, boolean_t, boolean_t, boolean_t)> ColorMask = nullptr;
			function<void(std::uint32_t)> CompileShader = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, const void *)> CompressedTexImage2D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, std::int32_t, const void *)> CompressedTexSubImage2D = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> CopyTexImage2D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> CopyTexSubImage2D = nullptr;
			function<std::uint32_t()> CreateProgram = nullptr;
			function<std::uint32_t(enum_t)> CreateShader = nullptr;
			function<void(enum_t)> CullFace = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteBuffers = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteFramebuffers = nullptr;
			function<void(std::uint32_t)> DeleteProgram = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteRenderbuffers = nullptr;
			function<void(std::uint32_t)> DeleteShader = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteTextures = nullptr;
			function<void(enum_t)> DepthFunc = nullptr;
			function<void(boolean_t)> DepthMask = nullptr;
			function<void(float32_t, float32_t)> DepthRangef = nullptr;
			function<void(std::uint32_t, std::uint32_t)> DetachShader = nullptr;
			function<void(enum_t)> Disable = nullptr;
			function<void(std::uint32_t)> DisableVertexAttribArray = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t)> DrawArrays = nullptr;
			function<void(enum_t, std::int32_t, enum_t, const void *)> DrawElements = nullptr;
			function<void(enum_t)> Enable = nullptr;
			function<void(std::uint32_t)> EnableVertexAttribArray = nullptr;
			function<void()> Finish = nullptr;
			function<void()> Flush = nullptr;
			function<void(enum_t, enum_t, enum_t, std::uint32_t)> FramebufferRenderbuffer = nullptr;
			function<void(enum_t, enum_t, enum_t, std::uint32_t, std::int32_t)> FramebufferTexture2D = nullptr;
			function<void(enum_t)> FrontFace = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenBuffers = nullptr;
			function<void(enum_t)> GenerateMipmap = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenFramebuffers = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenRenderbuffers = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenTextures = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t *, std::int32_t *, enum_t *, char *)> GetActiveAttrib = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t *, std::int32_t *, enum_t *, char *)> GetActiveUniform = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, std::uint32_t *)> GetAttachedShaders = nullptr;
			function<std::int32_t(std::uint32_t, const char *)> GetAttribLocation = nullptr;
			function<void(enum_t, boolean_t *)> GetBooleanv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetBufferParameteriv = nullptr;
			function<enum_t()> GetError = nullptr;
			function<void(enum_t, float32_t *)> GetFloatv = nullptr;
			function<void(enum_t, enum_t, enum_t, std::int32_t *)> GetFramebufferAttachmentParameteriv = nullptr;
			function<void(enum_t, std::int32_t *)> GetIntegerv = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetProgramiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, char *)> GetProgramInfoLog = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetRenderbufferParameteriv = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetShaderiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, char *)> GetShaderInfoLog = nullptr;
			function<void(enum_t, enum_t, std::int32_t *, std::int32_t *)> GetShaderPrecisionFormat = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, char *)> GetShaderSource = nullptr;
			function<const std::uint8_t *(enum_t)> GetString = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetTexParameterfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetTexParameteriv = nullptr;
			function<void(std::uint32_t, std::int32_t, float32_t *)> GetUniformfv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *)> GetUniformiv = nullptr;
			function<std::int32_t(std::uint32_t, const char *)> GetUniformLocation = nullptr;
			function<void(std::uint32_t, enum_t, float32_t *)> GetVertexAttribfv = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetVertexAttribiv = nullptr;
			function<void(std::uint32_t, enum_t, void **)> GetVertexAttribPointerv = nullptr;
			function<void(enum_t, enum_t)> Hint = nullptr;
			function<boolean_t(std::uint32_t)> IsBuffer = nullptr;
			function<boolean_t(enum_t)> IsEnabled = nullptr;
			function<boolean_t(std::uint32_t)> IsFramebuffer = nullptr;
			function<boolean_t(std::uint32_t)> IsProgram = nullptr;
			function<boolean_t(std::uint32_t)> IsRenderbuffer = nullptr;
			function<boolean_t(std::uint32_t)> IsShader = nullptr;
			function<boolean_t(std::uint32_t)> IsTexture = nullptr;
			function<void(float32_t)> LineWidth = nullptr;
			function<void(std::uint32_t)> LinkProgram = nullptr;
			function<void(enum_t, std::int32_t)> PixelStorei = nullptr;
			function<void(float32_t, float32_t)> PolygonOffset = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, void *)> ReadPixels = nullptr;
			function<void()> ReleaseShaderCompiler = nullptr;
			function<void(enum_t, enum_t, std::int32_t, std::int32_t)> RenderbufferStorage = nullptr;
			function<void(float32_t, boolean_t)> SampleCoverage = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Scissor = nullptr;
			function<void(std::int32_t, const std::uint32_t *, enum_t, const void *, std::int32_t)> ShaderBinary = nullptr;
			function<void(std::uint32_t, std::int32_t, const char *const*, const std::int32_t *)> ShaderSource = nullptr;
			function<void(enum_t, std::int32_t, std::uint32_t)> StencilFunc = nullptr;
			function<void(enum_t, enum_t, std::int32_t, std::uint32_t)> StencilFuncSeparate = nullptr;
			function<void(std::uint32_t)> StencilMask = nullptr;
			function<void(enum_t, std::uint32_t)> StencilMaskSeparate = nullptr;
			function<void(enum_t, enum_t, enum_t)> StencilOp = nullptr;
			function<void(enum_t, enum_t, enum_t, enum_t)> StencilOpSeparate = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexImage2D = nullptr;
			function<void(enum_t, enum_t, float32_t)> TexParameterf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> TexParameterfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> TexParameteri = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> TexParameteriv = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexSubImage2D = nullptr;
			function<void(std::int32_t, float32_t)> Uniform1f = nullptr;
			function<void(std::int32_t, std::int32_t, const float32_t *)> Uniform1fv = nullptr;
			function<void(std::int32_t, std::int32_t)> Uniform1i = nullptr;
			function<void(std::int32_t, std::int32_t, const std::int32_t *)> Uniform1iv = nullptr;
			function<void(std::int32_t, float32_t, float32_t)> Uniform2f = nullptr;
			function<void(std::int32_t, std::int32_t, const float32_t *)> Uniform2fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> Uniform2i = nullptr;
			function<void(std::int32_t, std::int32_t, const std::int32_t *)> Uniform2iv = nullptr;
			function<void(std::int32_t, float32_t, float32_t, float32_t)> Uniform3f = nullptr;
			function<void(std::int32_t, std::int32_t, const float32_t *)> Uniform3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Uniform3i = nullptr;
			function<void(std::int32_t, std::int32_t, const std::int32_t *)> Uniform3iv = nullptr;
			function<void(std::int32_t, float32_t, float32_t, float32_t, float32_t)> Uniform4f = nullptr;
			function<void(std::int32_t, std::int32_t, const float32_t *)> Uniform4fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Uniform4i = nullptr;
			function<void(std::int32_t, std::int32_t, const std::int32_t *)> Uniform4iv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix2fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix3fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix4fv = nullptr;
			function<void(std::uint32_t)> UseProgram = nullptr;
			function<void(std::uint32_t)> ValidateProgram = nullptr;
			function<void(std::uint32_t, float32_t)> VertexAttrib1f = nullptr;
			function<void(std::uint32_t, const float32_t *)> VertexAttrib1fv = nullptr;
			function<void(std::uint32_t, float32_t, float32_t)> VertexAttrib2f = nullptr;
			function<void(std::uint32_t, const float32_t *)> VertexAttrib2fv = nullptr;
			function<void(std::uint32_t, float32_t, float32_t, float32_t)> VertexAttrib3f = nullptr;
			function<void(std::uint32_t, const float32_t *)> VertexAttrib3fv = nullptr;
			function<void(std::uint32_t, float32_t, float32_t, float32_t, float32_t)> VertexAttrib4f = nullptr;
			function<void(std::uint32_t, const float32_t *)> VertexAttrib4fv = nullptr;
			function<void(std::uint32_t, std::int32_t, enum_t, boolean_t, std::int32_t, const void *)> VertexAttribPointer = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Viewport = nullptr;
			function<void(enum_t)> ReadBuffer = nullptr;
			function<void(enum_t, std::uint32_t, std::uint32_t, std::int32_t, enum_t, const void *)> DrawRangeElements = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexImage3D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexSubImage3D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> CopyTexSubImage3D = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, const void *)> CompressedTexImage3D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, std::int32_t, const void *)> CompressedTexSubImage3D = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenQueries = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteQueries = nullptr;
			function<boolean_t(std::uint32_t)> IsQuery = nullptr;
			function<void(enum_t, std::uint32_t)> BeginQuery = nullptr;
			function<void(enum_t)> EndQuery = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetQueryiv = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t *)> GetQueryObjectuiv = nullptr;
			function<boolean_t(enum_t)> UnmapBuffer = nullptr;
			function<void(enum_t, enum_t, void **)> GetBufferPointerv = nullptr;
			function<void(std::int32_t, const enum_t *)> DrawBuffers = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix2x3fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix3x2fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix2x4fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix4x2fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix3x4fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix4x3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, bitfield_t, enum_t)> BlitFramebuffer = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t)> RenderbufferStorageMultisample = nullptr;
			function<void(enum_t, enum_t, std::uint32_t, std::int32_t, std::int32_t)> FramebufferTextureLayer = nullptr;
			function<void *(enum_t, std::ptrdiff_t, std::ptrdiff_t, bitfield_t)> MapBufferRange = nullptr;
			function<void(enum_t, std::ptrdiff_t, std::ptrdiff_t)> FlushMappedBufferRange = nullptr;
			function<void(std::uint32_t)> BindVertexArray = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteVertexArrays = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenVertexArrays = nullptr;
			function<boolean_t(std::uint32_t)> IsVertexArray = nullptr;
			function<void(enum_t, std::uint32_t, std::int32_t *)> GetIntegeri_v = nullptr;
			function<void(enum_t)> BeginTransformFeedback = nullptr;
			function<void()> EndTransformFeedback = nullptr;
			function<void(enum_t, std::uint32_t, std::uint32_t, std::ptrdiff_t, std::ptrdiff_t)> BindBufferRange = nullptr;
			function<void(enum_t, std::uint32_t, std::uint32_t)> BindBufferBase = nullptr;
			function<void(std::uint32_t, std::int32_t, const char *const*, enum_t)> TransformFeedbackVaryings = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t *, std::int32_t *, enum_t *, char *)> GetTransformFeedbackVarying = nullptr;
			function<void(std::uint32_t, std::int32_t, enum_t, std::int32_t, const void *)> VertexAttribIPointer = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetVertexAttribIiv = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t *)> GetVertexAttribIuiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> VertexAttribI4i = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t)> VertexAttribI4ui = nullptr;
			function<void(std::uint32_t, const std::int32_t *)> VertexAttribI4iv = nullptr;
			function<void(std::uint32_t, const std::uint32_t *)> VertexAttribI4uiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::uint32_t *)> GetUniformuiv = nullptr;
			function<std::int32_t(std::uint32_t, const char *)> GetFragDataLocation = nullptr;
			function<void(std::int32_t, std::uint32_t)> Uniform1ui = nullptr;
			function<void(std::int32_t, std::uint32_t, std::uint32_t)> Uniform2ui = nullptr;
			function<void(std::int32_t, std::uint32_t, std::uint32_t, std::uint32_t)> Uniform3ui = nullptr;
			function<void(std::int32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t)> Uniform4ui = nullptr;
			function<void(std::int32_t, std::int32_t, const std::uint32_t *)> Uniform1uiv = nullptr;
			function<void(std::int32_t, std::int32_t, const std::uint32_t *)> Uniform2uiv = nullptr;
			function<void(std::int32_t, std::int32_t, const std::uint32_t *)> Uniform3uiv = nullptr;
			function<void(std::int32_t, std::int32_t, const std::uint32_t *)> Uniform4uiv = nullptr;
			function<void(enum_t, std::int32_t, const std::int32_t *)> ClearBufferiv = nullptr;
			function<void(enum_t, std::int32_t, const std::uint32_t *)> ClearBufferuiv = nullptr;
			function<void(enum_t, std::int32_t, const float32_t *)> ClearBufferfv = nullptr;
			function<void(enum_t, std::int32_t, float32_t, std::int32_t)> ClearBufferfi = nullptr;
			function<const std::uint8_t *(enum_t, std::uint32_t)> GetStringi = nullptr;
			function<void(enum_t, enum_t, std::ptrdiff_t, std::ptrdiff_t, std::ptrdiff_t)> CopyBufferSubData = nullptr;
			function<void(std::uint32_t, std::int32_t, const char *const*, std::uint32_t *)> GetUniformIndices = nullptr;
			function<void(std::uint32_t, std::int32_t, const std::uint32_t *, enum_t, std::int32_t *)> GetActiveUniformsiv = nullptr;
			function<std::uint32_t(std::uint32_t, const char *)> GetUniformBlockIndex = nullptr;
			function<void(std::uint32_t, std::uint32_t, enum_t, std::int32_t *)> GetActiveUniformBlockiv = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t *, char *)> GetActiveUniformBlockName = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t)> UniformBlockBinding = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t)> DrawArraysInstanced = nullptr;
			function<void(enum_t, std::int32_t, enum_t, const void *, std::int32_t)> DrawElementsInstanced = nullptr;
			function<GLsync(enum_t, bitfield_t)> FenceSync = nullptr;
			function<boolean_t(GLsync)> IsSync = nullptr;
			function<void(GLsync)> DeleteSync = nullptr;
			function<enum_t(GLsync, bitfield_t, std::uint64_t)> ClientWaitSync = nullptr;
			function<void(GLsync, bitfield_t, std::uint64_t)> WaitSync = nullptr;
			function<void(enum_t, std::int64_t *)> GetInteger64v = nullptr;
			function<void(GLsync, enum_t, std::int32_t, std::int32_t *, std::int32_t *)> GetSynciv = nullptr;
			function<void(enum_t, std::uint32_t, std::int64_t *)> GetInteger64i_v = nullptr;
			function<void(enum_t, enum_t, std::int64_t *)> GetBufferParameteri64v = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenSamplers = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteSamplers = nullptr;
			function<boolean_t(std::uint32_t)> IsSampler = nullptr;
			function<void(std::uint32_t, std::uint32_t)> BindSampler = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t)> SamplerParameteri = nullptr;
			function<void(std::uint32_t, enum_t, const std::int32_t *)> SamplerParameteriv = nullptr;
			function<void(std::uint32_t, enum_t, float32_t)> SamplerParameterf = nullptr;
			function<void(std::uint32_t, enum_t, const float32_t *)> SamplerParameterfv = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetSamplerParameteriv = nullptr;
			function<void(std::uint32_t, enum_t, float32_t *)> GetSamplerParameterfv = nullptr;
			function<void(std::uint32_t, std::uint32_t)> VertexAttribDivisor = nullptr;
			function<void(enum_t, std::uint32_t)> BindTransformFeedback = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteTransformFeedbacks = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenTransformFeedbacks = nullptr;
			function<boolean_t(std::uint32_t)> IsTransformFeedback = nullptr;
			function<void()> PauseTransformFeedback = nullptr;
			function<void()> ResumeTransformFeedback = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, enum_t *, void *)> GetProgramBinary = nullptr;
			function<void(std::uint32_t, enum_t, const void *, std::int32_t)> ProgramBinary = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t)> ProgramParameteri = nullptr;
			function<void(enum_t, std::int32_t, const enum_t *)> InvalidateFramebuffer = nullptr;
			function<void(enum_t, std::int32_t, const enum_t *, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> InvalidateSubFramebuffer = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t)> TexStorage2D = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t)> TexStorage3D = nullptr;
			function<void(enum_t, enum_t, enum_t, std::int32_t, std::int32_t *)> GetInternalformativ = nullptr;
		public:
			api(const api&) = default;
			api& operator = (const api&) = default;
			api() = default;
		public:
		};
		void load(api&, std::function<void*(const char*)>);
	}
}

#endif