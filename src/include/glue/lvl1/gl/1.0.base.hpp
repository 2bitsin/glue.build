#ifndef LVL1_GL_VERSION_1_0_BASE_HPP
#define LVL1_GL_VERSION_1_0_BASE_HPP
#include "../../function.hpp"
#include "../../types.hpp"
#include <functional>

namespace glue::lvl1
{
	inline namespace base_1_0 
	{
		struct api
		{
			/* 	=============
					constants
					============= */
		public:
			static constexpr auto GL_DEPTH_BUFFER_BIT = 0x00000100;
			static constexpr auto GL_STENCIL_BUFFER_BIT = 0x00000400;
			static constexpr auto GL_COLOR_BUFFER_BIT = 0x00004000;
			static constexpr auto GL_FALSE = 0;
			static constexpr auto GL_TRUE = 1;
			static constexpr auto GL_POINTS = 0x0000;
			static constexpr auto GL_LINES = 0x0001;
			static constexpr auto GL_LINE_LOOP = 0x0002;
			static constexpr auto GL_LINE_STRIP = 0x0003;
			static constexpr auto GL_TRIANGLES = 0x0004;
			static constexpr auto GL_TRIANGLE_STRIP = 0x0005;
			static constexpr auto GL_TRIANGLE_FAN = 0x0006;
			static constexpr auto GL_QUADS = 0x0007;
			static constexpr auto GL_NEVER = 0x0200;
			static constexpr auto GL_LESS = 0x0201;
			static constexpr auto GL_EQUAL = 0x0202;
			static constexpr auto GL_LEQUAL = 0x0203;
			static constexpr auto GL_GREATER = 0x0204;
			static constexpr auto GL_NOTEQUAL = 0x0205;
			static constexpr auto GL_GEQUAL = 0x0206;
			static constexpr auto GL_ALWAYS = 0x0207;
			static constexpr auto GL_ZERO = 0;
			static constexpr auto GL_ONE = 1;
			static constexpr auto GL_SRC_COLOR = 0x0300;
			static constexpr auto GL_ONE_MINUS_SRC_COLOR = 0x0301;
			static constexpr auto GL_SRC_ALPHA = 0x0302;
			static constexpr auto GL_ONE_MINUS_SRC_ALPHA = 0x0303;
			static constexpr auto GL_DST_ALPHA = 0x0304;
			static constexpr auto GL_ONE_MINUS_DST_ALPHA = 0x0305;
			static constexpr auto GL_DST_COLOR = 0x0306;
			static constexpr auto GL_ONE_MINUS_DST_COLOR = 0x0307;
			static constexpr auto GL_SRC_ALPHA_SATURATE = 0x0308;
			static constexpr auto GL_NONE = 0;
			static constexpr auto GL_FRONT_LEFT = 0x0400;
			static constexpr auto GL_FRONT_RIGHT = 0x0401;
			static constexpr auto GL_BACK_LEFT = 0x0402;
			static constexpr auto GL_BACK_RIGHT = 0x0403;
			static constexpr auto GL_FRONT = 0x0404;
			static constexpr auto GL_BACK = 0x0405;
			static constexpr auto GL_LEFT = 0x0406;
			static constexpr auto GL_RIGHT = 0x0407;
			static constexpr auto GL_FRONT_AND_BACK = 0x0408;
			static constexpr auto GL_NO_ERROR = 0;
			static constexpr auto GL_INVALID_ENUM = 0x0500;
			static constexpr auto GL_INVALID_VALUE = 0x0501;
			static constexpr auto GL_INVALID_OPERATION = 0x0502;
			static constexpr auto GL_OUT_OF_MEMORY = 0x0505;
			static constexpr auto GL_CW = 0x0900;
			static constexpr auto GL_CCW = 0x0901;
			static constexpr auto GL_POINT_SIZE = 0x0B11;
			static constexpr auto GL_POINT_SIZE_RANGE = 0x0B12;
			static constexpr auto GL_POINT_SIZE_GRANULARITY = 0x0B13;
			static constexpr auto GL_LINE_SMOOTH = 0x0B20;
			static constexpr auto GL_LINE_WIDTH = 0x0B21;
			static constexpr auto GL_LINE_WIDTH_RANGE = 0x0B22;
			static constexpr auto GL_LINE_WIDTH_GRANULARITY = 0x0B23;
			static constexpr auto GL_POLYGON_MODE = 0x0B40;
			static constexpr auto GL_POLYGON_SMOOTH = 0x0B41;
			static constexpr auto GL_CULL_FACE = 0x0B44;
			static constexpr auto GL_CULL_FACE_MODE = 0x0B45;
			static constexpr auto GL_FRONT_FACE = 0x0B46;
			static constexpr auto GL_DEPTH_RANGE = 0x0B70;
			static constexpr auto GL_DEPTH_TEST = 0x0B71;
			static constexpr auto GL_DEPTH_WRITEMASK = 0x0B72;
			static constexpr auto GL_DEPTH_CLEAR_VALUE = 0x0B73;
			static constexpr auto GL_DEPTH_FUNC = 0x0B74;
			static constexpr auto GL_STENCIL_TEST = 0x0B90;
			static constexpr auto GL_STENCIL_CLEAR_VALUE = 0x0B91;
			static constexpr auto GL_STENCIL_FUNC = 0x0B92;
			static constexpr auto GL_STENCIL_VALUE_MASK = 0x0B93;
			static constexpr auto GL_STENCIL_FAIL = 0x0B94;
			static constexpr auto GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
			static constexpr auto GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
			static constexpr auto GL_STENCIL_REF = 0x0B97;
			static constexpr auto GL_STENCIL_WRITEMASK = 0x0B98;
			static constexpr auto GL_VIEWPORT = 0x0BA2;
			static constexpr auto GL_DITHER = 0x0BD0;
			static constexpr auto GL_BLEND_DST = 0x0BE0;
			static constexpr auto GL_BLEND_SRC = 0x0BE1;
			static constexpr auto GL_BLEND = 0x0BE2;
			static constexpr auto GL_LOGIC_OP_MODE = 0x0BF0;
			static constexpr auto GL_DRAW_BUFFER = 0x0C01;
			static constexpr auto GL_READ_BUFFER = 0x0C02;
			static constexpr auto GL_SCISSOR_BOX = 0x0C10;
			static constexpr auto GL_SCISSOR_TEST = 0x0C11;
			static constexpr auto GL_COLOR_CLEAR_VALUE = 0x0C22;
			static constexpr auto GL_COLOR_WRITEMASK = 0x0C23;
			static constexpr auto GL_DOUBLEBUFFER = 0x0C32;
			static constexpr auto GL_STEREO = 0x0C33;
			static constexpr auto GL_LINE_SMOOTH_HINT = 0x0C52;
			static constexpr auto GL_POLYGON_SMOOTH_HINT = 0x0C53;
			static constexpr auto GL_UNPACK_SWAP_BYTES = 0x0CF0;
			static constexpr auto GL_UNPACK_LSB_FIRST = 0x0CF1;
			static constexpr auto GL_UNPACK_ROW_LENGTH = 0x0CF2;
			static constexpr auto GL_UNPACK_SKIP_ROWS = 0x0CF3;
			static constexpr auto GL_UNPACK_SKIP_PIXELS = 0x0CF4;
			static constexpr auto GL_UNPACK_ALIGNMENT = 0x0CF5;
			static constexpr auto GL_PACK_SWAP_BYTES = 0x0D00;
			static constexpr auto GL_PACK_LSB_FIRST = 0x0D01;
			static constexpr auto GL_PACK_ROW_LENGTH = 0x0D02;
			static constexpr auto GL_PACK_SKIP_ROWS = 0x0D03;
			static constexpr auto GL_PACK_SKIP_PIXELS = 0x0D04;
			static constexpr auto GL_PACK_ALIGNMENT = 0x0D05;
			static constexpr auto GL_MAX_TEXTURE_SIZE = 0x0D33;
			static constexpr auto GL_MAX_VIEWPORT_DIMS = 0x0D3A;
			static constexpr auto GL_SUBPIXEL_BITS = 0x0D50;
			static constexpr auto GL_TEXTURE_1D = 0x0DE0;
			static constexpr auto GL_TEXTURE_2D = 0x0DE1;
			static constexpr auto GL_TEXTURE_WIDTH = 0x1000;
			static constexpr auto GL_TEXTURE_HEIGHT = 0x1001;
			static constexpr auto GL_TEXTURE_BORDER_COLOR = 0x1004;
			static constexpr auto GL_DONT_CARE = 0x1100;
			static constexpr auto GL_FASTEST = 0x1101;
			static constexpr auto GL_NICEST = 0x1102;
			static constexpr auto GL_BYTE = 0x1400;
			static constexpr auto GL_UNSIGNED_BYTE = 0x1401;
			static constexpr auto GL_SHORT = 0x1402;
			static constexpr auto GL_UNSIGNED_SHORT = 0x1403;
			static constexpr auto GL_INT = 0x1404;
			static constexpr auto GL_UNSIGNED_INT = 0x1405;
			static constexpr auto GL_FLOAT = 0x1406;
			static constexpr auto GL_STACK_OVERFLOW = 0x0503;
			static constexpr auto GL_STACK_UNDERFLOW = 0x0504;
			static constexpr auto GL_CLEAR = 0x1500;
			static constexpr auto GL_AND = 0x1501;
			static constexpr auto GL_AND_REVERSE = 0x1502;
			static constexpr auto GL_COPY = 0x1503;
			static constexpr auto GL_AND_INVERTED = 0x1504;
			static constexpr auto GL_NOOP = 0x1505;
			static constexpr auto GL_XOR = 0x1506;
			static constexpr auto GL_OR = 0x1507;
			static constexpr auto GL_NOR = 0x1508;
			static constexpr auto GL_EQUIV = 0x1509;
			static constexpr auto GL_INVERT = 0x150A;
			static constexpr auto GL_OR_REVERSE = 0x150B;
			static constexpr auto GL_COPY_INVERTED = 0x150C;
			static constexpr auto GL_OR_INVERTED = 0x150D;
			static constexpr auto GL_NAND = 0x150E;
			static constexpr auto GL_SET = 0x150F;
			static constexpr auto GL_TEXTURE = 0x1702;
			static constexpr auto GL_COLOR = 0x1800;
			static constexpr auto GL_DEPTH = 0x1801;
			static constexpr auto GL_STENCIL = 0x1802;
			static constexpr auto GL_STENCIL_INDEX = 0x1901;
			static constexpr auto GL_DEPTH_COMPONENT = 0x1902;
			static constexpr auto GL_RED = 0x1903;
			static constexpr auto GL_GREEN = 0x1904;
			static constexpr auto GL_BLUE = 0x1905;
			static constexpr auto GL_ALPHA = 0x1906;
			static constexpr auto GL_RGB = 0x1907;
			static constexpr auto GL_RGBA = 0x1908;
			static constexpr auto GL_POINT = 0x1B00;
			static constexpr auto GL_LINE = 0x1B01;
			static constexpr auto GL_FILL = 0x1B02;
			static constexpr auto GL_KEEP = 0x1E00;
			static constexpr auto GL_REPLACE = 0x1E01;
			static constexpr auto GL_INCR = 0x1E02;
			static constexpr auto GL_DECR = 0x1E03;
			static constexpr auto GL_VENDOR = 0x1F00;
			static constexpr auto GL_RENDERER = 0x1F01;
			static constexpr auto GL_VERSION = 0x1F02;
			static constexpr auto GL_EXTENSIONS = 0x1F03;
			static constexpr auto GL_NEAREST = 0x2600;
			static constexpr auto GL_LINEAR = 0x2601;
			static constexpr auto GL_NEAREST_MIPMAP_NEAREST = 0x2700;
			static constexpr auto GL_LINEAR_MIPMAP_NEAREST = 0x2701;
			static constexpr auto GL_NEAREST_MIPMAP_LINEAR = 0x2702;
			static constexpr auto GL_LINEAR_MIPMAP_LINEAR = 0x2703;
			static constexpr auto GL_TEXTURE_MAG_FILTER = 0x2800;
			static constexpr auto GL_TEXTURE_MIN_FILTER = 0x2801;
			static constexpr auto GL_TEXTURE_WRAP_S = 0x2802;
			static constexpr auto GL_TEXTURE_WRAP_T = 0x2803;
			static constexpr auto GL_REPEAT = 0x2901;
			static constexpr auto GL_CURRENT_BIT = 0x00000001;
			static constexpr auto GL_POINT_BIT = 0x00000002;
			static constexpr auto GL_LINE_BIT = 0x00000004;
			static constexpr auto GL_POLYGON_BIT = 0x00000008;
			static constexpr auto GL_POLYGON_STIPPLE_BIT = 0x00000010;
			static constexpr auto GL_PIXEL_MODE_BIT = 0x00000020;
			static constexpr auto GL_LIGHTING_BIT = 0x00000040;
			static constexpr auto GL_FOG_BIT = 0x00000080;
			static constexpr auto GL_ACCUM_BUFFER_BIT = 0x00000200;
			static constexpr auto GL_VIEWPORT_BIT = 0x00000800;
			static constexpr auto GL_TRANSFORM_BIT = 0x00001000;
			static constexpr auto GL_ENABLE_BIT = 0x00002000;
			static constexpr auto GL_HINT_BIT = 0x00008000;
			static constexpr auto GL_EVAL_BIT = 0x00010000;
			static constexpr auto GL_LIST_BIT = 0x00020000;
			static constexpr auto GL_TEXTURE_BIT = 0x00040000;
			static constexpr auto GL_SCISSOR_BIT = 0x00080000;
			static constexpr auto GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
			static constexpr auto GL_QUAD_STRIP = 0x0008;
			static constexpr auto GL_POLYGON = 0x0009;
			static constexpr auto GL_ACCUM = 0x0100;
			static constexpr auto GL_LOAD = 0x0101;
			static constexpr auto GL_RETURN = 0x0102;
			static constexpr auto GL_MULT = 0x0103;
			static constexpr auto GL_ADD = 0x0104;
			static constexpr auto GL_AUX0 = 0x0409;
			static constexpr auto GL_AUX1 = 0x040A;
			static constexpr auto GL_AUX2 = 0x040B;
			static constexpr auto GL_AUX3 = 0x040C;
			static constexpr auto GL_2D = 0x0600;
			static constexpr auto GL_3D = 0x0601;
			static constexpr auto GL_3D_COLOR = 0x0602;
			static constexpr auto GL_3D_COLOR_TEXTURE = 0x0603;
			static constexpr auto GL_4D_COLOR_TEXTURE = 0x0604;
			static constexpr auto GL_PASS_THROUGH_TOKEN = 0x0700;
			static constexpr auto GL_POINT_TOKEN = 0x0701;
			static constexpr auto GL_LINE_TOKEN = 0x0702;
			static constexpr auto GL_POLYGON_TOKEN = 0x0703;
			static constexpr auto GL_BITMAP_TOKEN = 0x0704;
			static constexpr auto GL_DRAW_PIXEL_TOKEN = 0x0705;
			static constexpr auto GL_COPY_PIXEL_TOKEN = 0x0706;
			static constexpr auto GL_LINE_RESET_TOKEN = 0x0707;
			static constexpr auto GL_EXP = 0x0800;
			static constexpr auto GL_EXP2 = 0x0801;
			static constexpr auto GL_COEFF = 0x0A00;
			static constexpr auto GL_ORDER = 0x0A01;
			static constexpr auto GL_DOMAIN = 0x0A02;
			static constexpr auto GL_PIXEL_MAP_I_TO_I = 0x0C70;
			static constexpr auto GL_PIXEL_MAP_S_TO_S = 0x0C71;
			static constexpr auto GL_PIXEL_MAP_I_TO_R = 0x0C72;
			static constexpr auto GL_PIXEL_MAP_I_TO_G = 0x0C73;
			static constexpr auto GL_PIXEL_MAP_I_TO_B = 0x0C74;
			static constexpr auto GL_PIXEL_MAP_I_TO_A = 0x0C75;
			static constexpr auto GL_PIXEL_MAP_R_TO_R = 0x0C76;
			static constexpr auto GL_PIXEL_MAP_G_TO_G = 0x0C77;
			static constexpr auto GL_PIXEL_MAP_B_TO_B = 0x0C78;
			static constexpr auto GL_PIXEL_MAP_A_TO_A = 0x0C79;
			static constexpr auto GL_CURRENT_COLOR = 0x0B00;
			static constexpr auto GL_CURRENT_INDEX = 0x0B01;
			static constexpr auto GL_CURRENT_NORMAL = 0x0B02;
			static constexpr auto GL_CURRENT_TEXTURE_COORDS = 0x0B03;
			static constexpr auto GL_CURRENT_RASTER_COLOR = 0x0B04;
			static constexpr auto GL_CURRENT_RASTER_INDEX = 0x0B05;
			static constexpr auto GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
			static constexpr auto GL_CURRENT_RASTER_POSITION = 0x0B07;
			static constexpr auto GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
			static constexpr auto GL_CURRENT_RASTER_DISTANCE = 0x0B09;
			static constexpr auto GL_POINT_SMOOTH = 0x0B10;
			static constexpr auto GL_LINE_STIPPLE = 0x0B24;
			static constexpr auto GL_LINE_STIPPLE_PATTERN = 0x0B25;
			static constexpr auto GL_LINE_STIPPLE_REPEAT = 0x0B26;
			static constexpr auto GL_LIST_MODE = 0x0B30;
			static constexpr auto GL_MAX_LIST_NESTING = 0x0B31;
			static constexpr auto GL_LIST_BASE = 0x0B32;
			static constexpr auto GL_LIST_INDEX = 0x0B33;
			static constexpr auto GL_POLYGON_STIPPLE = 0x0B42;
			static constexpr auto GL_EDGE_FLAG = 0x0B43;
			static constexpr auto GL_LIGHTING = 0x0B50;
			static constexpr auto GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
			static constexpr auto GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
			static constexpr auto GL_LIGHT_MODEL_AMBIENT = 0x0B53;
			static constexpr auto GL_SHADE_MODEL = 0x0B54;
			static constexpr auto GL_COLOR_MATERIAL_FACE = 0x0B55;
			static constexpr auto GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
			static constexpr auto GL_COLOR_MATERIAL = 0x0B57;
			static constexpr auto GL_FOG = 0x0B60;
			static constexpr auto GL_FOG_INDEX = 0x0B61;
			static constexpr auto GL_FOG_DENSITY = 0x0B62;
			static constexpr auto GL_FOG_START = 0x0B63;
			static constexpr auto GL_FOG_END = 0x0B64;
			static constexpr auto GL_FOG_MODE = 0x0B65;
			static constexpr auto GL_FOG_COLOR = 0x0B66;
			static constexpr auto GL_ACCUM_CLEAR_VALUE = 0x0B80;
			static constexpr auto GL_MATRIX_MODE = 0x0BA0;
			static constexpr auto GL_NORMALIZE = 0x0BA1;
			static constexpr auto GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
			static constexpr auto GL_PROJECTION_STACK_DEPTH = 0x0BA4;
			static constexpr auto GL_TEXTURE_STACK_DEPTH = 0x0BA5;
			static constexpr auto GL_MODELVIEW_MATRIX = 0x0BA6;
			static constexpr auto GL_PROJECTION_MATRIX = 0x0BA7;
			static constexpr auto GL_TEXTURE_MATRIX = 0x0BA8;
			static constexpr auto GL_ATTRIB_STACK_DEPTH = 0x0BB0;
			static constexpr auto GL_ALPHA_TEST = 0x0BC0;
			static constexpr auto GL_ALPHA_TEST_FUNC = 0x0BC1;
			static constexpr auto GL_ALPHA_TEST_REF = 0x0BC2;
			static constexpr auto GL_LOGIC_OP = 0x0BF1;
			static constexpr auto GL_AUX_BUFFERS = 0x0C00;
			static constexpr auto GL_INDEX_CLEAR_VALUE = 0x0C20;
			static constexpr auto GL_INDEX_WRITEMASK = 0x0C21;
			static constexpr auto GL_INDEX_MODE = 0x0C30;
			static constexpr auto GL_RGBA_MODE = 0x0C31;
			static constexpr auto GL_RENDER_MODE = 0x0C40;
			static constexpr auto GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
			static constexpr auto GL_POINT_SMOOTH_HINT = 0x0C51;
			static constexpr auto GL_FOG_HINT = 0x0C54;
			static constexpr auto GL_TEXTURE_GEN_S = 0x0C60;
			static constexpr auto GL_TEXTURE_GEN_T = 0x0C61;
			static constexpr auto GL_TEXTURE_GEN_R = 0x0C62;
			static constexpr auto GL_TEXTURE_GEN_Q = 0x0C63;
			static constexpr auto GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
			static constexpr auto GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
			static constexpr auto GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
			static constexpr auto GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
			static constexpr auto GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
			static constexpr auto GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
			static constexpr auto GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
			static constexpr auto GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
			static constexpr auto GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
			static constexpr auto GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
			static constexpr auto GL_MAP_COLOR = 0x0D10;
			static constexpr auto GL_MAP_STENCIL = 0x0D11;
			static constexpr auto GL_INDEX_SHIFT = 0x0D12;
			static constexpr auto GL_INDEX_OFFSET = 0x0D13;
			static constexpr auto GL_RED_SCALE = 0x0D14;
			static constexpr auto GL_RED_BIAS = 0x0D15;
			static constexpr auto GL_ZOOM_X = 0x0D16;
			static constexpr auto GL_ZOOM_Y = 0x0D17;
			static constexpr auto GL_GREEN_SCALE = 0x0D18;
			static constexpr auto GL_GREEN_BIAS = 0x0D19;
			static constexpr auto GL_BLUE_SCALE = 0x0D1A;
			static constexpr auto GL_BLUE_BIAS = 0x0D1B;
			static constexpr auto GL_ALPHA_SCALE = 0x0D1C;
			static constexpr auto GL_ALPHA_BIAS = 0x0D1D;
			static constexpr auto GL_DEPTH_SCALE = 0x0D1E;
			static constexpr auto GL_DEPTH_BIAS = 0x0D1F;
			static constexpr auto GL_MAX_EVAL_ORDER = 0x0D30;
			static constexpr auto GL_MAX_LIGHTS = 0x0D31;
			static constexpr auto GL_MAX_CLIP_PLANES = 0x0D32;
			static constexpr auto GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
			static constexpr auto GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
			static constexpr auto GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
			static constexpr auto GL_MAX_NAME_STACK_DEPTH = 0x0D37;
			static constexpr auto GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
			static constexpr auto GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
			static constexpr auto GL_INDEX_BITS = 0x0D51;
			static constexpr auto GL_RED_BITS = 0x0D52;
			static constexpr auto GL_GREEN_BITS = 0x0D53;
			static constexpr auto GL_BLUE_BITS = 0x0D54;
			static constexpr auto GL_ALPHA_BITS = 0x0D55;
			static constexpr auto GL_DEPTH_BITS = 0x0D56;
			static constexpr auto GL_STENCIL_BITS = 0x0D57;
			static constexpr auto GL_ACCUM_RED_BITS = 0x0D58;
			static constexpr auto GL_ACCUM_GREEN_BITS = 0x0D59;
			static constexpr auto GL_ACCUM_BLUE_BITS = 0x0D5A;
			static constexpr auto GL_ACCUM_ALPHA_BITS = 0x0D5B;
			static constexpr auto GL_NAME_STACK_DEPTH = 0x0D70;
			static constexpr auto GL_AUTO_NORMAL = 0x0D80;
			static constexpr auto GL_MAP1_COLOR_4 = 0x0D90;
			static constexpr auto GL_MAP1_INDEX = 0x0D91;
			static constexpr auto GL_MAP1_NORMAL = 0x0D92;
			static constexpr auto GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
			static constexpr auto GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
			static constexpr auto GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
			static constexpr auto GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
			static constexpr auto GL_MAP1_VERTEX_3 = 0x0D97;
			static constexpr auto GL_MAP1_VERTEX_4 = 0x0D98;
			static constexpr auto GL_MAP2_COLOR_4 = 0x0DB0;
			static constexpr auto GL_MAP2_INDEX = 0x0DB1;
			static constexpr auto GL_MAP2_NORMAL = 0x0DB2;
			static constexpr auto GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
			static constexpr auto GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
			static constexpr auto GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
			static constexpr auto GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
			static constexpr auto GL_MAP2_VERTEX_3 = 0x0DB7;
			static constexpr auto GL_MAP2_VERTEX_4 = 0x0DB8;
			static constexpr auto GL_MAP1_GRID_DOMAIN = 0x0DD0;
			static constexpr auto GL_MAP1_GRID_SEGMENTS = 0x0DD1;
			static constexpr auto GL_MAP2_GRID_DOMAIN = 0x0DD2;
			static constexpr auto GL_MAP2_GRID_SEGMENTS = 0x0DD3;
			static constexpr auto GL_TEXTURE_COMPONENTS = 0x1003;
			static constexpr auto GL_TEXTURE_BORDER = 0x1005;
			static constexpr auto GL_AMBIENT = 0x1200;
			static constexpr auto GL_DIFFUSE = 0x1201;
			static constexpr auto GL_SPECULAR = 0x1202;
			static constexpr auto GL_POSITION = 0x1203;
			static constexpr auto GL_SPOT_DIRECTION = 0x1204;
			static constexpr auto GL_SPOT_EXPONENT = 0x1205;
			static constexpr auto GL_SPOT_CUTOFF = 0x1206;
			static constexpr auto GL_CONSTANT_ATTENUATION = 0x1207;
			static constexpr auto GL_LINEAR_ATTENUATION = 0x1208;
			static constexpr auto GL_QUADRATIC_ATTENUATION = 0x1209;
			static constexpr auto GL_COMPILE = 0x1300;
			static constexpr auto GL_COMPILE_AND_EXECUTE = 0x1301;
			static constexpr auto GL_2_BYTES = 0x1407;
			static constexpr auto GL_3_BYTES = 0x1408;
			static constexpr auto GL_4_BYTES = 0x1409;
			static constexpr auto GL_EMISSION = 0x1600;
			static constexpr auto GL_SHININESS = 0x1601;
			static constexpr auto GL_AMBIENT_AND_DIFFUSE = 0x1602;
			static constexpr auto GL_COLOR_INDEXES = 0x1603;
			static constexpr auto GL_MODELVIEW = 0x1700;
			static constexpr auto GL_PROJECTION = 0x1701;
			static constexpr auto GL_COLOR_INDEX = 0x1900;
			static constexpr auto GL_LUMINANCE = 0x1909;
			static constexpr auto GL_LUMINANCE_ALPHA = 0x190A;
			static constexpr auto GL_BITMAP = 0x1A00;
			static constexpr auto GL_RENDER = 0x1C00;
			static constexpr auto GL_FEEDBACK = 0x1C01;
			static constexpr auto GL_SELECT = 0x1C02;
			static constexpr auto GL_FLAT = 0x1D00;
			static constexpr auto GL_SMOOTH = 0x1D01;
			static constexpr auto GL_S = 0x2000;
			static constexpr auto GL_T = 0x2001;
			static constexpr auto GL_R = 0x2002;
			static constexpr auto GL_Q = 0x2003;
			static constexpr auto GL_MODULATE = 0x2100;
			static constexpr auto GL_DECAL = 0x2101;
			static constexpr auto GL_TEXTURE_ENV_MODE = 0x2200;
			static constexpr auto GL_TEXTURE_ENV_COLOR = 0x2201;
			static constexpr auto GL_TEXTURE_ENV = 0x2300;
			static constexpr auto GL_EYE_LINEAR = 0x2400;
			static constexpr auto GL_OBJECT_LINEAR = 0x2401;
			static constexpr auto GL_SPHERE_MAP = 0x2402;
			static constexpr auto GL_TEXTURE_GEN_MODE = 0x2500;
			static constexpr auto GL_OBJECT_PLANE = 0x2501;
			static constexpr auto GL_EYE_PLANE = 0x2502;
			static constexpr auto GL_CLAMP = 0x2900;
			static constexpr auto GL_CLIP_PLANE0 = 0x3000;
			static constexpr auto GL_CLIP_PLANE1 = 0x3001;
			static constexpr auto GL_CLIP_PLANE2 = 0x3002;
			static constexpr auto GL_CLIP_PLANE3 = 0x3003;
			static constexpr auto GL_CLIP_PLANE4 = 0x3004;
			static constexpr auto GL_CLIP_PLANE5 = 0x3005;
			static constexpr auto GL_LIGHT0 = 0x4000;
			static constexpr auto GL_LIGHT1 = 0x4001;
			static constexpr auto GL_LIGHT2 = 0x4002;
			static constexpr auto GL_LIGHT3 = 0x4003;
			static constexpr auto GL_LIGHT4 = 0x4004;
			static constexpr auto GL_LIGHT5 = 0x4005;
			static constexpr auto GL_LIGHT6 = 0x4006;
			static constexpr auto GL_LIGHT7 = 0x4007;
			/*	=============
					functions
					============= */
		public:
			function<void(enum_t)> CullFace = nullptr;
			function<void(enum_t)> FrontFace = nullptr;
			function<void(enum_t, enum_t)> Hint = nullptr;
			function<void(float32_t)> LineWidth = nullptr;
			function<void(float32_t)> PointSize = nullptr;
			function<void(enum_t, enum_t)> PolygonMode = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Scissor = nullptr;
			function<void(enum_t, enum_t, float32_t)> TexParameterf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> TexParameterfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> TexParameteri = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> TexParameteriv = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexImage1D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexImage2D = nullptr;
			function<void(enum_t)> DrawBuffer = nullptr;
			function<void(bitfield_t)> Clear = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> ClearColor = nullptr;
			function<void(std::int32_t)> ClearStencil = nullptr;
			function<void(float64_t)> ClearDepth = nullptr;
			function<void(std::uint32_t)> StencilMask = nullptr;
			function<void(boolean_t, boolean_t, boolean_t, boolean_t)> ColorMask = nullptr;
			function<void(boolean_t)> DepthMask = nullptr;
			function<void(enum_t)> Disable = nullptr;
			function<void(enum_t)> Enable = nullptr;
			function<void()> Finish = nullptr;
			function<void()> Flush = nullptr;
			function<void(enum_t, enum_t)> BlendFunc = nullptr;
			function<void(enum_t)> LogicOp = nullptr;
			function<void(enum_t, std::int32_t, std::uint32_t)> StencilFunc = nullptr;
			function<void(enum_t, enum_t, enum_t)> StencilOp = nullptr;
			function<void(enum_t)> DepthFunc = nullptr;
			function<void(enum_t, float32_t)> PixelStoref = nullptr;
			function<void(enum_t, std::int32_t)> PixelStorei = nullptr;
			function<void(enum_t)> ReadBuffer = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, void *)> ReadPixels = nullptr;
			function<void(enum_t, boolean_t *)> GetBooleanv = nullptr;
			function<void(enum_t, float64_t *)> GetDoublev = nullptr;
			function<enum_t()> GetError = nullptr;
			function<void(enum_t, float32_t *)> GetFloatv = nullptr;
			function<void(enum_t, std::int32_t *)> GetIntegerv = nullptr;
			function<const std::uint8_t *(enum_t)> GetString = nullptr;
			function<void(enum_t, std::int32_t, enum_t, enum_t, void *)> GetTexImage = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetTexParameterfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetTexParameteriv = nullptr;
			function<void(enum_t, std::int32_t, enum_t, float32_t *)> GetTexLevelParameterfv = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t *)> GetTexLevelParameteriv = nullptr;
			function<boolean_t(enum_t)> IsEnabled = nullptr;
			function<void(float64_t, float64_t)> DepthRange = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Viewport = nullptr;
			function<void(std::uint32_t, enum_t)> NewList = nullptr;
			function<void()> EndList = nullptr;
			function<void(std::uint32_t)> CallList = nullptr;
			function<void(std::int32_t, enum_t, const void *)> CallLists = nullptr;
			function<void(std::uint32_t, std::int32_t)> DeleteLists = nullptr;
			function<std::uint32_t(std::int32_t)> GenLists = nullptr;
			function<void(std::uint32_t)> ListBase = nullptr;
			function<void(enum_t)> Begin = nullptr;
			function<void(std::int32_t, std::int32_t, float32_t, float32_t, float32_t, float32_t, const std::uint8_t *)> Bitmap = nullptr;
			function<void(std::int8_t, std::int8_t, std::int8_t)> Color3b = nullptr;
			function<void(const std::int8_t *)> Color3bv = nullptr;
			function<void(float64_t, float64_t, float64_t)> Color3d = nullptr;
			function<void(const float64_t *)> Color3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> Color3f = nullptr;
			function<void(const float32_t *)> Color3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> Color3i = nullptr;
			function<void(const std::int32_t *)> Color3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> Color3s = nullptr;
			function<void(const std::int16_t *)> Color3sv = nullptr;
			function<void(std::uint8_t, std::uint8_t, std::uint8_t)> Color3ub = nullptr;
			function<void(const std::uint8_t *)> Color3ubv = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t)> Color3ui = nullptr;
			function<void(const std::uint32_t *)> Color3uiv = nullptr;
			function<void(std::uint16_t, std::uint16_t, std::uint16_t)> Color3us = nullptr;
			function<void(const std::uint16_t *)> Color3usv = nullptr;
			function<void(std::int8_t, std::int8_t, std::int8_t, std::int8_t)> Color4b = nullptr;
			function<void(const std::int8_t *)> Color4bv = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> Color4d = nullptr;
			function<void(const float64_t *)> Color4dv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> Color4f = nullptr;
			function<void(const float32_t *)> Color4fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Color4i = nullptr;
			function<void(const std::int32_t *)> Color4iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t, std::int16_t)> Color4s = nullptr;
			function<void(const std::int16_t *)> Color4sv = nullptr;
			function<void(std::uint8_t, std::uint8_t, std::uint8_t, std::uint8_t)> Color4ub = nullptr;
			function<void(const std::uint8_t *)> Color4ubv = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t)> Color4ui = nullptr;
			function<void(const std::uint32_t *)> Color4uiv = nullptr;
			function<void(std::uint16_t, std::uint16_t, std::uint16_t, std::uint16_t)> Color4us = nullptr;
			function<void(const std::uint16_t *)> Color4usv = nullptr;
			function<void(boolean_t)> EdgeFlag = nullptr;
			function<void(const boolean_t *)> EdgeFlagv = nullptr;
			function<void()> End = nullptr;
			function<void(float64_t)> Indexd = nullptr;
			function<void(const float64_t *)> Indexdv = nullptr;
			function<void(float32_t)> Indexf = nullptr;
			function<void(const float32_t *)> Indexfv = nullptr;
			function<void(std::int32_t)> Indexi = nullptr;
			function<void(const std::int32_t *)> Indexiv = nullptr;
			function<void(std::int16_t)> Indexs = nullptr;
			function<void(const std::int16_t *)> Indexsv = nullptr;
			function<void(std::int8_t, std::int8_t, std::int8_t)> Normal3b = nullptr;
			function<void(const std::int8_t *)> Normal3bv = nullptr;
			function<void(float64_t, float64_t, float64_t)> Normal3d = nullptr;
			function<void(const float64_t *)> Normal3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> Normal3f = nullptr;
			function<void(const float32_t *)> Normal3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> Normal3i = nullptr;
			function<void(const std::int32_t *)> Normal3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> Normal3s = nullptr;
			function<void(const std::int16_t *)> Normal3sv = nullptr;
			function<void(float64_t, float64_t)> RasterPos2d = nullptr;
			function<void(const float64_t *)> RasterPos2dv = nullptr;
			function<void(float32_t, float32_t)> RasterPos2f = nullptr;
			function<void(const float32_t *)> RasterPos2fv = nullptr;
			function<void(std::int32_t, std::int32_t)> RasterPos2i = nullptr;
			function<void(const std::int32_t *)> RasterPos2iv = nullptr;
			function<void(std::int16_t, std::int16_t)> RasterPos2s = nullptr;
			function<void(const std::int16_t *)> RasterPos2sv = nullptr;
			function<void(float64_t, float64_t, float64_t)> RasterPos3d = nullptr;
			function<void(const float64_t *)> RasterPos3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> RasterPos3f = nullptr;
			function<void(const float32_t *)> RasterPos3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> RasterPos3i = nullptr;
			function<void(const std::int32_t *)> RasterPos3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> RasterPos3s = nullptr;
			function<void(const std::int16_t *)> RasterPos3sv = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> RasterPos4d = nullptr;
			function<void(const float64_t *)> RasterPos4dv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> RasterPos4f = nullptr;
			function<void(const float32_t *)> RasterPos4fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> RasterPos4i = nullptr;
			function<void(const std::int32_t *)> RasterPos4iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t, std::int16_t)> RasterPos4s = nullptr;
			function<void(const std::int16_t *)> RasterPos4sv = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> Rectd = nullptr;
			function<void(const float64_t *, const float64_t *)> Rectdv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> Rectf = nullptr;
			function<void(const float32_t *, const float32_t *)> Rectfv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Recti = nullptr;
			function<void(const std::int32_t *, const std::int32_t *)> Rectiv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t, std::int16_t)> Rects = nullptr;
			function<void(const std::int16_t *, const std::int16_t *)> Rectsv = nullptr;
			function<void(float64_t)> TexCoord1d = nullptr;
			function<void(const float64_t *)> TexCoord1dv = nullptr;
			function<void(float32_t)> TexCoord1f = nullptr;
			function<void(const float32_t *)> TexCoord1fv = nullptr;
			function<void(std::int32_t)> TexCoord1i = nullptr;
			function<void(const std::int32_t *)> TexCoord1iv = nullptr;
			function<void(std::int16_t)> TexCoord1s = nullptr;
			function<void(const std::int16_t *)> TexCoord1sv = nullptr;
			function<void(float64_t, float64_t)> TexCoord2d = nullptr;
			function<void(const float64_t *)> TexCoord2dv = nullptr;
			function<void(float32_t, float32_t)> TexCoord2f = nullptr;
			function<void(const float32_t *)> TexCoord2fv = nullptr;
			function<void(std::int32_t, std::int32_t)> TexCoord2i = nullptr;
			function<void(const std::int32_t *)> TexCoord2iv = nullptr;
			function<void(std::int16_t, std::int16_t)> TexCoord2s = nullptr;
			function<void(const std::int16_t *)> TexCoord2sv = nullptr;
			function<void(float64_t, float64_t, float64_t)> TexCoord3d = nullptr;
			function<void(const float64_t *)> TexCoord3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> TexCoord3f = nullptr;
			function<void(const float32_t *)> TexCoord3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> TexCoord3i = nullptr;
			function<void(const std::int32_t *)> TexCoord3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> TexCoord3s = nullptr;
			function<void(const std::int16_t *)> TexCoord3sv = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> TexCoord4d = nullptr;
			function<void(const float64_t *)> TexCoord4dv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> TexCoord4f = nullptr;
			function<void(const float32_t *)> TexCoord4fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> TexCoord4i = nullptr;
			function<void(const std::int32_t *)> TexCoord4iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t, std::int16_t)> TexCoord4s = nullptr;
			function<void(const std::int16_t *)> TexCoord4sv = nullptr;
			function<void(float64_t, float64_t)> Vertex2d = nullptr;
			function<void(const float64_t *)> Vertex2dv = nullptr;
			function<void(float32_t, float32_t)> Vertex2f = nullptr;
			function<void(const float32_t *)> Vertex2fv = nullptr;
			function<void(std::int32_t, std::int32_t)> Vertex2i = nullptr;
			function<void(const std::int32_t *)> Vertex2iv = nullptr;
			function<void(std::int16_t, std::int16_t)> Vertex2s = nullptr;
			function<void(const std::int16_t *)> Vertex2sv = nullptr;
			function<void(float64_t, float64_t, float64_t)> Vertex3d = nullptr;
			function<void(const float64_t *)> Vertex3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> Vertex3f = nullptr;
			function<void(const float32_t *)> Vertex3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> Vertex3i = nullptr;
			function<void(const std::int32_t *)> Vertex3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> Vertex3s = nullptr;
			function<void(const std::int16_t *)> Vertex3sv = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> Vertex4d = nullptr;
			function<void(const float64_t *)> Vertex4dv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> Vertex4f = nullptr;
			function<void(const float32_t *)> Vertex4fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Vertex4i = nullptr;
			function<void(const std::int32_t *)> Vertex4iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t, std::int16_t)> Vertex4s = nullptr;
			function<void(const std::int16_t *)> Vertex4sv = nullptr;
			function<void(enum_t, const float64_t *)> ClipPlane = nullptr;
			function<void(enum_t, enum_t)> ColorMaterial = nullptr;
			function<void(enum_t, float32_t)> Fogf = nullptr;
			function<void(enum_t, const float32_t *)> Fogfv = nullptr;
			function<void(enum_t, std::int32_t)> Fogi = nullptr;
			function<void(enum_t, const std::int32_t *)> Fogiv = nullptr;
			function<void(enum_t, enum_t, float32_t)> Lightf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> Lightfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> Lighti = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> Lightiv = nullptr;
			function<void(enum_t, float32_t)> LightModelf = nullptr;
			function<void(enum_t, const float32_t *)> LightModelfv = nullptr;
			function<void(enum_t, std::int32_t)> LightModeli = nullptr;
			function<void(enum_t, const std::int32_t *)> LightModeliv = nullptr;
			function<void(std::int32_t, std::uint16_t)> LineStipple = nullptr;
			function<void(enum_t, enum_t, float32_t)> Materialf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> Materialfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> Materiali = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> Materialiv = nullptr;
			function<void(const std::uint8_t *)> PolygonStipple = nullptr;
			function<void(enum_t)> ShadeModel = nullptr;
			function<void(enum_t, enum_t, float32_t)> TexEnvf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> TexEnvfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> TexEnvi = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> TexEnviv = nullptr;
			function<void(enum_t, enum_t, float64_t)> TexGend = nullptr;
			function<void(enum_t, enum_t, const float64_t *)> TexGendv = nullptr;
			function<void(enum_t, enum_t, float32_t)> TexGenf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> TexGenfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> TexGeni = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> TexGeniv = nullptr;
			function<void(std::int32_t, enum_t, float32_t *)> FeedbackBuffer = nullptr;
			function<void(std::int32_t, std::uint32_t *)> SelectBuffer = nullptr;
			function<std::int32_t(enum_t)> RenderMode = nullptr;
			function<void()> InitNames = nullptr;
			function<void(std::uint32_t)> LoadName = nullptr;
			function<void(float32_t)> PassThrough = nullptr;
			function<void()> PopName = nullptr;
			function<void(std::uint32_t)> PushName = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> ClearAccum = nullptr;
			function<void(float32_t)> ClearIndex = nullptr;
			function<void(std::uint32_t)> IndexMask = nullptr;
			function<void(enum_t, float32_t)> Accum = nullptr;
			function<void()> PopAttrib = nullptr;
			function<void(bitfield_t)> PushAttrib = nullptr;
			function<void(enum_t, float64_t, float64_t, std::int32_t, std::int32_t, const float64_t *)> Map1d = nullptr;
			function<void(enum_t, float32_t, float32_t, std::int32_t, std::int32_t, const float32_t *)> Map1f = nullptr;
			function<void(enum_t, float64_t, float64_t, std::int32_t, std::int32_t, float64_t, float64_t, std::int32_t, std::int32_t, const float64_t *)> Map2d = nullptr;
			function<void(enum_t, float32_t, float32_t, std::int32_t, std::int32_t, float32_t, float32_t, std::int32_t, std::int32_t, const float32_t *)> Map2f = nullptr;
			function<void(std::int32_t, float64_t, float64_t)> MapGrid1d = nullptr;
			function<void(std::int32_t, float32_t, float32_t)> MapGrid1f = nullptr;
			function<void(std::int32_t, float64_t, float64_t, std::int32_t, float64_t, float64_t)> MapGrid2d = nullptr;
			function<void(std::int32_t, float32_t, float32_t, std::int32_t, float32_t, float32_t)> MapGrid2f = nullptr;
			function<void(float64_t)> EvalCoord1d = nullptr;
			function<void(const float64_t *)> EvalCoord1dv = nullptr;
			function<void(float32_t)> EvalCoord1f = nullptr;
			function<void(const float32_t *)> EvalCoord1fv = nullptr;
			function<void(float64_t, float64_t)> EvalCoord2d = nullptr;
			function<void(const float64_t *)> EvalCoord2dv = nullptr;
			function<void(float32_t, float32_t)> EvalCoord2f = nullptr;
			function<void(const float32_t *)> EvalCoord2fv = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t)> EvalMesh1 = nullptr;
			function<void(std::int32_t)> EvalPoint1 = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> EvalMesh2 = nullptr;
			function<void(std::int32_t, std::int32_t)> EvalPoint2 = nullptr;
			function<void(enum_t, float32_t)> AlphaFunc = nullptr;
			function<void(float32_t, float32_t)> PixelZoom = nullptr;
			function<void(enum_t, float32_t)> PixelTransferf = nullptr;
			function<void(enum_t, std::int32_t)> PixelTransferi = nullptr;
			function<void(enum_t, std::int32_t, const float32_t *)> PixelMapfv = nullptr;
			function<void(enum_t, std::int32_t, const std::uint32_t *)> PixelMapuiv = nullptr;
			function<void(enum_t, std::int32_t, const std::uint16_t *)> PixelMapusv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t)> CopyPixels = nullptr;
			function<void(std::int32_t, std::int32_t, enum_t, enum_t, const void *)> DrawPixels = nullptr;
			function<void(enum_t, float64_t *)> GetClipPlane = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetLightfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetLightiv = nullptr;
			function<void(enum_t, enum_t, float64_t *)> GetMapdv = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetMapfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetMapiv = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetMaterialfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetMaterialiv = nullptr;
			function<void(enum_t, float32_t *)> GetPixelMapfv = nullptr;
			function<void(enum_t, std::uint32_t *)> GetPixelMapuiv = nullptr;
			function<void(enum_t, std::uint16_t *)> GetPixelMapusv = nullptr;
			function<void(std::uint8_t *)> GetPolygonStipple = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetTexEnvfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetTexEnviv = nullptr;
			function<void(enum_t, enum_t, float64_t *)> GetTexGendv = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetTexGenfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetTexGeniv = nullptr;
			function<boolean_t(std::uint32_t)> IsList = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t, float64_t, float64_t)> Frustum = nullptr;
			function<void()> LoadIdentity = nullptr;
			function<void(const float32_t *)> LoadMatrixf = nullptr;
			function<void(const float64_t *)> LoadMatrixd = nullptr;
			function<void(enum_t)> MatrixMode = nullptr;
			function<void(const float32_t *)> MultMatrixf = nullptr;
			function<void(const float64_t *)> MultMatrixd = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t, float64_t, float64_t)> Ortho = nullptr;
			function<void()> PopMatrix = nullptr;
			function<void()> PushMatrix = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> Rotated = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> Rotatef = nullptr;
			function<void(float64_t, float64_t, float64_t)> Scaled = nullptr;
			function<void(float32_t, float32_t, float32_t)> Scalef = nullptr;
			function<void(float64_t, float64_t, float64_t)> Translated = nullptr;
			function<void(float32_t, float32_t, float32_t)> Translatef = nullptr;
		public:
			api(const api&) = default;
			api& operator = (const api&) = default;
			api() = default;
		public:
		};
		void load(api&, std::function<void*(const char*)>);
	}
}

#endif