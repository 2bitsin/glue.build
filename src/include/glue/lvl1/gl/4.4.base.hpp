#ifndef LVL1_GL_VERSION_4_4_BASE_HPP
#define LVL1_GL_VERSION_4_4_BASE_HPP
#include "../../function.hpp"
#include "../../types.hpp"
#include <functional>

namespace glue::lvl1
{
	inline namespace base_4_4 
	{
		struct api
		{
			/* 	=============
					constants
					============= */
		public:
			static constexpr auto GL_DEPTH_BUFFER_BIT = 0x00000100;
			static constexpr auto GL_STENCIL_BUFFER_BIT = 0x00000400;
			static constexpr auto GL_COLOR_BUFFER_BIT = 0x00004000;
			static constexpr auto GL_FALSE = 0;
			static constexpr auto GL_TRUE = 1;
			static constexpr auto GL_POINTS = 0x0000;
			static constexpr auto GL_LINES = 0x0001;
			static constexpr auto GL_LINE_LOOP = 0x0002;
			static constexpr auto GL_LINE_STRIP = 0x0003;
			static constexpr auto GL_TRIANGLES = 0x0004;
			static constexpr auto GL_TRIANGLE_STRIP = 0x0005;
			static constexpr auto GL_TRIANGLE_FAN = 0x0006;
			static constexpr auto GL_QUADS = 0x0007;
			static constexpr auto GL_NEVER = 0x0200;
			static constexpr auto GL_LESS = 0x0201;
			static constexpr auto GL_EQUAL = 0x0202;
			static constexpr auto GL_LEQUAL = 0x0203;
			static constexpr auto GL_GREATER = 0x0204;
			static constexpr auto GL_NOTEQUAL = 0x0205;
			static constexpr auto GL_GEQUAL = 0x0206;
			static constexpr auto GL_ALWAYS = 0x0207;
			static constexpr auto GL_ZERO = 0;
			static constexpr auto GL_ONE = 1;
			static constexpr auto GL_SRC_COLOR = 0x0300;
			static constexpr auto GL_ONE_MINUS_SRC_COLOR = 0x0301;
			static constexpr auto GL_SRC_ALPHA = 0x0302;
			static constexpr auto GL_ONE_MINUS_SRC_ALPHA = 0x0303;
			static constexpr auto GL_DST_ALPHA = 0x0304;
			static constexpr auto GL_ONE_MINUS_DST_ALPHA = 0x0305;
			static constexpr auto GL_DST_COLOR = 0x0306;
			static constexpr auto GL_ONE_MINUS_DST_COLOR = 0x0307;
			static constexpr auto GL_SRC_ALPHA_SATURATE = 0x0308;
			static constexpr auto GL_NONE = 0;
			static constexpr auto GL_FRONT_LEFT = 0x0400;
			static constexpr auto GL_FRONT_RIGHT = 0x0401;
			static constexpr auto GL_BACK_LEFT = 0x0402;
			static constexpr auto GL_BACK_RIGHT = 0x0403;
			static constexpr auto GL_FRONT = 0x0404;
			static constexpr auto GL_BACK = 0x0405;
			static constexpr auto GL_LEFT = 0x0406;
			static constexpr auto GL_RIGHT = 0x0407;
			static constexpr auto GL_FRONT_AND_BACK = 0x0408;
			static constexpr auto GL_NO_ERROR = 0;
			static constexpr auto GL_INVALID_ENUM = 0x0500;
			static constexpr auto GL_INVALID_VALUE = 0x0501;
			static constexpr auto GL_INVALID_OPERATION = 0x0502;
			static constexpr auto GL_OUT_OF_MEMORY = 0x0505;
			static constexpr auto GL_CW = 0x0900;
			static constexpr auto GL_CCW = 0x0901;
			static constexpr auto GL_POINT_SIZE = 0x0B11;
			static constexpr auto GL_POINT_SIZE_RANGE = 0x0B12;
			static constexpr auto GL_POINT_SIZE_GRANULARITY = 0x0B13;
			static constexpr auto GL_LINE_SMOOTH = 0x0B20;
			static constexpr auto GL_LINE_WIDTH = 0x0B21;
			static constexpr auto GL_LINE_WIDTH_RANGE = 0x0B22;
			static constexpr auto GL_LINE_WIDTH_GRANULARITY = 0x0B23;
			static constexpr auto GL_POLYGON_MODE = 0x0B40;
			static constexpr auto GL_POLYGON_SMOOTH = 0x0B41;
			static constexpr auto GL_CULL_FACE = 0x0B44;
			static constexpr auto GL_CULL_FACE_MODE = 0x0B45;
			static constexpr auto GL_FRONT_FACE = 0x0B46;
			static constexpr auto GL_DEPTH_RANGE = 0x0B70;
			static constexpr auto GL_DEPTH_TEST = 0x0B71;
			static constexpr auto GL_DEPTH_WRITEMASK = 0x0B72;
			static constexpr auto GL_DEPTH_CLEAR_VALUE = 0x0B73;
			static constexpr auto GL_DEPTH_FUNC = 0x0B74;
			static constexpr auto GL_STENCIL_TEST = 0x0B90;
			static constexpr auto GL_STENCIL_CLEAR_VALUE = 0x0B91;
			static constexpr auto GL_STENCIL_FUNC = 0x0B92;
			static constexpr auto GL_STENCIL_VALUE_MASK = 0x0B93;
			static constexpr auto GL_STENCIL_FAIL = 0x0B94;
			static constexpr auto GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
			static constexpr auto GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
			static constexpr auto GL_STENCIL_REF = 0x0B97;
			static constexpr auto GL_STENCIL_WRITEMASK = 0x0B98;
			static constexpr auto GL_VIEWPORT = 0x0BA2;
			static constexpr auto GL_DITHER = 0x0BD0;
			static constexpr auto GL_BLEND_DST = 0x0BE0;
			static constexpr auto GL_BLEND_SRC = 0x0BE1;
			static constexpr auto GL_BLEND = 0x0BE2;
			static constexpr auto GL_LOGIC_OP_MODE = 0x0BF0;
			static constexpr auto GL_DRAW_BUFFER = 0x0C01;
			static constexpr auto GL_READ_BUFFER = 0x0C02;
			static constexpr auto GL_SCISSOR_BOX = 0x0C10;
			static constexpr auto GL_SCISSOR_TEST = 0x0C11;
			static constexpr auto GL_COLOR_CLEAR_VALUE = 0x0C22;
			static constexpr auto GL_COLOR_WRITEMASK = 0x0C23;
			static constexpr auto GL_DOUBLEBUFFER = 0x0C32;
			static constexpr auto GL_STEREO = 0x0C33;
			static constexpr auto GL_LINE_SMOOTH_HINT = 0x0C52;
			static constexpr auto GL_POLYGON_SMOOTH_HINT = 0x0C53;
			static constexpr auto GL_UNPACK_SWAP_BYTES = 0x0CF0;
			static constexpr auto GL_UNPACK_LSB_FIRST = 0x0CF1;
			static constexpr auto GL_UNPACK_ROW_LENGTH = 0x0CF2;
			static constexpr auto GL_UNPACK_SKIP_ROWS = 0x0CF3;
			static constexpr auto GL_UNPACK_SKIP_PIXELS = 0x0CF4;
			static constexpr auto GL_UNPACK_ALIGNMENT = 0x0CF5;
			static constexpr auto GL_PACK_SWAP_BYTES = 0x0D00;
			static constexpr auto GL_PACK_LSB_FIRST = 0x0D01;
			static constexpr auto GL_PACK_ROW_LENGTH = 0x0D02;
			static constexpr auto GL_PACK_SKIP_ROWS = 0x0D03;
			static constexpr auto GL_PACK_SKIP_PIXELS = 0x0D04;
			static constexpr auto GL_PACK_ALIGNMENT = 0x0D05;
			static constexpr auto GL_MAX_TEXTURE_SIZE = 0x0D33;
			static constexpr auto GL_MAX_VIEWPORT_DIMS = 0x0D3A;
			static constexpr auto GL_SUBPIXEL_BITS = 0x0D50;
			static constexpr auto GL_TEXTURE_1D = 0x0DE0;
			static constexpr auto GL_TEXTURE_2D = 0x0DE1;
			static constexpr auto GL_TEXTURE_WIDTH = 0x1000;
			static constexpr auto GL_TEXTURE_HEIGHT = 0x1001;
			static constexpr auto GL_TEXTURE_BORDER_COLOR = 0x1004;
			static constexpr auto GL_DONT_CARE = 0x1100;
			static constexpr auto GL_FASTEST = 0x1101;
			static constexpr auto GL_NICEST = 0x1102;
			static constexpr auto GL_BYTE = 0x1400;
			static constexpr auto GL_UNSIGNED_BYTE = 0x1401;
			static constexpr auto GL_SHORT = 0x1402;
			static constexpr auto GL_UNSIGNED_SHORT = 0x1403;
			static constexpr auto GL_INT = 0x1404;
			static constexpr auto GL_UNSIGNED_INT = 0x1405;
			static constexpr auto GL_FLOAT = 0x1406;
			static constexpr auto GL_STACK_OVERFLOW = 0x0503;
			static constexpr auto GL_STACK_UNDERFLOW = 0x0504;
			static constexpr auto GL_CLEAR = 0x1500;
			static constexpr auto GL_AND = 0x1501;
			static constexpr auto GL_AND_REVERSE = 0x1502;
			static constexpr auto GL_COPY = 0x1503;
			static constexpr auto GL_AND_INVERTED = 0x1504;
			static constexpr auto GL_NOOP = 0x1505;
			static constexpr auto GL_XOR = 0x1506;
			static constexpr auto GL_OR = 0x1507;
			static constexpr auto GL_NOR = 0x1508;
			static constexpr auto GL_EQUIV = 0x1509;
			static constexpr auto GL_INVERT = 0x150A;
			static constexpr auto GL_OR_REVERSE = 0x150B;
			static constexpr auto GL_COPY_INVERTED = 0x150C;
			static constexpr auto GL_OR_INVERTED = 0x150D;
			static constexpr auto GL_NAND = 0x150E;
			static constexpr auto GL_SET = 0x150F;
			static constexpr auto GL_TEXTURE = 0x1702;
			static constexpr auto GL_COLOR = 0x1800;
			static constexpr auto GL_DEPTH = 0x1801;
			static constexpr auto GL_STENCIL = 0x1802;
			static constexpr auto GL_STENCIL_INDEX = 0x1901;
			static constexpr auto GL_DEPTH_COMPONENT = 0x1902;
			static constexpr auto GL_RED = 0x1903;
			static constexpr auto GL_GREEN = 0x1904;
			static constexpr auto GL_BLUE = 0x1905;
			static constexpr auto GL_ALPHA = 0x1906;
			static constexpr auto GL_RGB = 0x1907;
			static constexpr auto GL_RGBA = 0x1908;
			static constexpr auto GL_POINT = 0x1B00;
			static constexpr auto GL_LINE = 0x1B01;
			static constexpr auto GL_FILL = 0x1B02;
			static constexpr auto GL_KEEP = 0x1E00;
			static constexpr auto GL_REPLACE = 0x1E01;
			static constexpr auto GL_INCR = 0x1E02;
			static constexpr auto GL_DECR = 0x1E03;
			static constexpr auto GL_VENDOR = 0x1F00;
			static constexpr auto GL_RENDERER = 0x1F01;
			static constexpr auto GL_VERSION = 0x1F02;
			static constexpr auto GL_EXTENSIONS = 0x1F03;
			static constexpr auto GL_NEAREST = 0x2600;
			static constexpr auto GL_LINEAR = 0x2601;
			static constexpr auto GL_NEAREST_MIPMAP_NEAREST = 0x2700;
			static constexpr auto GL_LINEAR_MIPMAP_NEAREST = 0x2701;
			static constexpr auto GL_NEAREST_MIPMAP_LINEAR = 0x2702;
			static constexpr auto GL_LINEAR_MIPMAP_LINEAR = 0x2703;
			static constexpr auto GL_TEXTURE_MAG_FILTER = 0x2800;
			static constexpr auto GL_TEXTURE_MIN_FILTER = 0x2801;
			static constexpr auto GL_TEXTURE_WRAP_S = 0x2802;
			static constexpr auto GL_TEXTURE_WRAP_T = 0x2803;
			static constexpr auto GL_REPEAT = 0x2901;
			static constexpr auto GL_CURRENT_BIT = 0x00000001;
			static constexpr auto GL_POINT_BIT = 0x00000002;
			static constexpr auto GL_LINE_BIT = 0x00000004;
			static constexpr auto GL_POLYGON_BIT = 0x00000008;
			static constexpr auto GL_POLYGON_STIPPLE_BIT = 0x00000010;
			static constexpr auto GL_PIXEL_MODE_BIT = 0x00000020;
			static constexpr auto GL_LIGHTING_BIT = 0x00000040;
			static constexpr auto GL_FOG_BIT = 0x00000080;
			static constexpr auto GL_ACCUM_BUFFER_BIT = 0x00000200;
			static constexpr auto GL_VIEWPORT_BIT = 0x00000800;
			static constexpr auto GL_TRANSFORM_BIT = 0x00001000;
			static constexpr auto GL_ENABLE_BIT = 0x00002000;
			static constexpr auto GL_HINT_BIT = 0x00008000;
			static constexpr auto GL_EVAL_BIT = 0x00010000;
			static constexpr auto GL_LIST_BIT = 0x00020000;
			static constexpr auto GL_TEXTURE_BIT = 0x00040000;
			static constexpr auto GL_SCISSOR_BIT = 0x00080000;
			static constexpr auto GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
			static constexpr auto GL_QUAD_STRIP = 0x0008;
			static constexpr auto GL_POLYGON = 0x0009;
			static constexpr auto GL_ACCUM = 0x0100;
			static constexpr auto GL_LOAD = 0x0101;
			static constexpr auto GL_RETURN = 0x0102;
			static constexpr auto GL_MULT = 0x0103;
			static constexpr auto GL_ADD = 0x0104;
			static constexpr auto GL_AUX0 = 0x0409;
			static constexpr auto GL_AUX1 = 0x040A;
			static constexpr auto GL_AUX2 = 0x040B;
			static constexpr auto GL_AUX3 = 0x040C;
			static constexpr auto GL_2D = 0x0600;
			static constexpr auto GL_3D = 0x0601;
			static constexpr auto GL_3D_COLOR = 0x0602;
			static constexpr auto GL_3D_COLOR_TEXTURE = 0x0603;
			static constexpr auto GL_4D_COLOR_TEXTURE = 0x0604;
			static constexpr auto GL_PASS_THROUGH_TOKEN = 0x0700;
			static constexpr auto GL_POINT_TOKEN = 0x0701;
			static constexpr auto GL_LINE_TOKEN = 0x0702;
			static constexpr auto GL_POLYGON_TOKEN = 0x0703;
			static constexpr auto GL_BITMAP_TOKEN = 0x0704;
			static constexpr auto GL_DRAW_PIXEL_TOKEN = 0x0705;
			static constexpr auto GL_COPY_PIXEL_TOKEN = 0x0706;
			static constexpr auto GL_LINE_RESET_TOKEN = 0x0707;
			static constexpr auto GL_EXP = 0x0800;
			static constexpr auto GL_EXP2 = 0x0801;
			static constexpr auto GL_COEFF = 0x0A00;
			static constexpr auto GL_ORDER = 0x0A01;
			static constexpr auto GL_DOMAIN = 0x0A02;
			static constexpr auto GL_PIXEL_MAP_I_TO_I = 0x0C70;
			static constexpr auto GL_PIXEL_MAP_S_TO_S = 0x0C71;
			static constexpr auto GL_PIXEL_MAP_I_TO_R = 0x0C72;
			static constexpr auto GL_PIXEL_MAP_I_TO_G = 0x0C73;
			static constexpr auto GL_PIXEL_MAP_I_TO_B = 0x0C74;
			static constexpr auto GL_PIXEL_MAP_I_TO_A = 0x0C75;
			static constexpr auto GL_PIXEL_MAP_R_TO_R = 0x0C76;
			static constexpr auto GL_PIXEL_MAP_G_TO_G = 0x0C77;
			static constexpr auto GL_PIXEL_MAP_B_TO_B = 0x0C78;
			static constexpr auto GL_PIXEL_MAP_A_TO_A = 0x0C79;
			static constexpr auto GL_CURRENT_COLOR = 0x0B00;
			static constexpr auto GL_CURRENT_INDEX = 0x0B01;
			static constexpr auto GL_CURRENT_NORMAL = 0x0B02;
			static constexpr auto GL_CURRENT_TEXTURE_COORDS = 0x0B03;
			static constexpr auto GL_CURRENT_RASTER_COLOR = 0x0B04;
			static constexpr auto GL_CURRENT_RASTER_INDEX = 0x0B05;
			static constexpr auto GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
			static constexpr auto GL_CURRENT_RASTER_POSITION = 0x0B07;
			static constexpr auto GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
			static constexpr auto GL_CURRENT_RASTER_DISTANCE = 0x0B09;
			static constexpr auto GL_POINT_SMOOTH = 0x0B10;
			static constexpr auto GL_LINE_STIPPLE = 0x0B24;
			static constexpr auto GL_LINE_STIPPLE_PATTERN = 0x0B25;
			static constexpr auto GL_LINE_STIPPLE_REPEAT = 0x0B26;
			static constexpr auto GL_LIST_MODE = 0x0B30;
			static constexpr auto GL_MAX_LIST_NESTING = 0x0B31;
			static constexpr auto GL_LIST_BASE = 0x0B32;
			static constexpr auto GL_LIST_INDEX = 0x0B33;
			static constexpr auto GL_POLYGON_STIPPLE = 0x0B42;
			static constexpr auto GL_EDGE_FLAG = 0x0B43;
			static constexpr auto GL_LIGHTING = 0x0B50;
			static constexpr auto GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
			static constexpr auto GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
			static constexpr auto GL_LIGHT_MODEL_AMBIENT = 0x0B53;
			static constexpr auto GL_SHADE_MODEL = 0x0B54;
			static constexpr auto GL_COLOR_MATERIAL_FACE = 0x0B55;
			static constexpr auto GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
			static constexpr auto GL_COLOR_MATERIAL = 0x0B57;
			static constexpr auto GL_FOG = 0x0B60;
			static constexpr auto GL_FOG_INDEX = 0x0B61;
			static constexpr auto GL_FOG_DENSITY = 0x0B62;
			static constexpr auto GL_FOG_START = 0x0B63;
			static constexpr auto GL_FOG_END = 0x0B64;
			static constexpr auto GL_FOG_MODE = 0x0B65;
			static constexpr auto GL_FOG_COLOR = 0x0B66;
			static constexpr auto GL_ACCUM_CLEAR_VALUE = 0x0B80;
			static constexpr auto GL_MATRIX_MODE = 0x0BA0;
			static constexpr auto GL_NORMALIZE = 0x0BA1;
			static constexpr auto GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
			static constexpr auto GL_PROJECTION_STACK_DEPTH = 0x0BA4;
			static constexpr auto GL_TEXTURE_STACK_DEPTH = 0x0BA5;
			static constexpr auto GL_MODELVIEW_MATRIX = 0x0BA6;
			static constexpr auto GL_PROJECTION_MATRIX = 0x0BA7;
			static constexpr auto GL_TEXTURE_MATRIX = 0x0BA8;
			static constexpr auto GL_ATTRIB_STACK_DEPTH = 0x0BB0;
			static constexpr auto GL_ALPHA_TEST = 0x0BC0;
			static constexpr auto GL_ALPHA_TEST_FUNC = 0x0BC1;
			static constexpr auto GL_ALPHA_TEST_REF = 0x0BC2;
			static constexpr auto GL_LOGIC_OP = 0x0BF1;
			static constexpr auto GL_AUX_BUFFERS = 0x0C00;
			static constexpr auto GL_INDEX_CLEAR_VALUE = 0x0C20;
			static constexpr auto GL_INDEX_WRITEMASK = 0x0C21;
			static constexpr auto GL_INDEX_MODE = 0x0C30;
			static constexpr auto GL_RGBA_MODE = 0x0C31;
			static constexpr auto GL_RENDER_MODE = 0x0C40;
			static constexpr auto GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
			static constexpr auto GL_POINT_SMOOTH_HINT = 0x0C51;
			static constexpr auto GL_FOG_HINT = 0x0C54;
			static constexpr auto GL_TEXTURE_GEN_S = 0x0C60;
			static constexpr auto GL_TEXTURE_GEN_T = 0x0C61;
			static constexpr auto GL_TEXTURE_GEN_R = 0x0C62;
			static constexpr auto GL_TEXTURE_GEN_Q = 0x0C63;
			static constexpr auto GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
			static constexpr auto GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
			static constexpr auto GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
			static constexpr auto GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
			static constexpr auto GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
			static constexpr auto GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
			static constexpr auto GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
			static constexpr auto GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
			static constexpr auto GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
			static constexpr auto GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
			static constexpr auto GL_MAP_COLOR = 0x0D10;
			static constexpr auto GL_MAP_STENCIL = 0x0D11;
			static constexpr auto GL_INDEX_SHIFT = 0x0D12;
			static constexpr auto GL_INDEX_OFFSET = 0x0D13;
			static constexpr auto GL_RED_SCALE = 0x0D14;
			static constexpr auto GL_RED_BIAS = 0x0D15;
			static constexpr auto GL_ZOOM_X = 0x0D16;
			static constexpr auto GL_ZOOM_Y = 0x0D17;
			static constexpr auto GL_GREEN_SCALE = 0x0D18;
			static constexpr auto GL_GREEN_BIAS = 0x0D19;
			static constexpr auto GL_BLUE_SCALE = 0x0D1A;
			static constexpr auto GL_BLUE_BIAS = 0x0D1B;
			static constexpr auto GL_ALPHA_SCALE = 0x0D1C;
			static constexpr auto GL_ALPHA_BIAS = 0x0D1D;
			static constexpr auto GL_DEPTH_SCALE = 0x0D1E;
			static constexpr auto GL_DEPTH_BIAS = 0x0D1F;
			static constexpr auto GL_MAX_EVAL_ORDER = 0x0D30;
			static constexpr auto GL_MAX_LIGHTS = 0x0D31;
			static constexpr auto GL_MAX_CLIP_PLANES = 0x0D32;
			static constexpr auto GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
			static constexpr auto GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
			static constexpr auto GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
			static constexpr auto GL_MAX_NAME_STACK_DEPTH = 0x0D37;
			static constexpr auto GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
			static constexpr auto GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
			static constexpr auto GL_INDEX_BITS = 0x0D51;
			static constexpr auto GL_RED_BITS = 0x0D52;
			static constexpr auto GL_GREEN_BITS = 0x0D53;
			static constexpr auto GL_BLUE_BITS = 0x0D54;
			static constexpr auto GL_ALPHA_BITS = 0x0D55;
			static constexpr auto GL_DEPTH_BITS = 0x0D56;
			static constexpr auto GL_STENCIL_BITS = 0x0D57;
			static constexpr auto GL_ACCUM_RED_BITS = 0x0D58;
			static constexpr auto GL_ACCUM_GREEN_BITS = 0x0D59;
			static constexpr auto GL_ACCUM_BLUE_BITS = 0x0D5A;
			static constexpr auto GL_ACCUM_ALPHA_BITS = 0x0D5B;
			static constexpr auto GL_NAME_STACK_DEPTH = 0x0D70;
			static constexpr auto GL_AUTO_NORMAL = 0x0D80;
			static constexpr auto GL_MAP1_COLOR_4 = 0x0D90;
			static constexpr auto GL_MAP1_INDEX = 0x0D91;
			static constexpr auto GL_MAP1_NORMAL = 0x0D92;
			static constexpr auto GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
			static constexpr auto GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
			static constexpr auto GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
			static constexpr auto GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
			static constexpr auto GL_MAP1_VERTEX_3 = 0x0D97;
			static constexpr auto GL_MAP1_VERTEX_4 = 0x0D98;
			static constexpr auto GL_MAP2_COLOR_4 = 0x0DB0;
			static constexpr auto GL_MAP2_INDEX = 0x0DB1;
			static constexpr auto GL_MAP2_NORMAL = 0x0DB2;
			static constexpr auto GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
			static constexpr auto GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
			static constexpr auto GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
			static constexpr auto GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
			static constexpr auto GL_MAP2_VERTEX_3 = 0x0DB7;
			static constexpr auto GL_MAP2_VERTEX_4 = 0x0DB8;
			static constexpr auto GL_MAP1_GRID_DOMAIN = 0x0DD0;
			static constexpr auto GL_MAP1_GRID_SEGMENTS = 0x0DD1;
			static constexpr auto GL_MAP2_GRID_DOMAIN = 0x0DD2;
			static constexpr auto GL_MAP2_GRID_SEGMENTS = 0x0DD3;
			static constexpr auto GL_TEXTURE_COMPONENTS = 0x1003;
			static constexpr auto GL_TEXTURE_BORDER = 0x1005;
			static constexpr auto GL_AMBIENT = 0x1200;
			static constexpr auto GL_DIFFUSE = 0x1201;
			static constexpr auto GL_SPECULAR = 0x1202;
			static constexpr auto GL_POSITION = 0x1203;
			static constexpr auto GL_SPOT_DIRECTION = 0x1204;
			static constexpr auto GL_SPOT_EXPONENT = 0x1205;
			static constexpr auto GL_SPOT_CUTOFF = 0x1206;
			static constexpr auto GL_CONSTANT_ATTENUATION = 0x1207;
			static constexpr auto GL_LINEAR_ATTENUATION = 0x1208;
			static constexpr auto GL_QUADRATIC_ATTENUATION = 0x1209;
			static constexpr auto GL_COMPILE = 0x1300;
			static constexpr auto GL_COMPILE_AND_EXECUTE = 0x1301;
			static constexpr auto GL_2_BYTES = 0x1407;
			static constexpr auto GL_3_BYTES = 0x1408;
			static constexpr auto GL_4_BYTES = 0x1409;
			static constexpr auto GL_EMISSION = 0x1600;
			static constexpr auto GL_SHININESS = 0x1601;
			static constexpr auto GL_AMBIENT_AND_DIFFUSE = 0x1602;
			static constexpr auto GL_COLOR_INDEXES = 0x1603;
			static constexpr auto GL_MODELVIEW = 0x1700;
			static constexpr auto GL_PROJECTION = 0x1701;
			static constexpr auto GL_COLOR_INDEX = 0x1900;
			static constexpr auto GL_LUMINANCE = 0x1909;
			static constexpr auto GL_LUMINANCE_ALPHA = 0x190A;
			static constexpr auto GL_BITMAP = 0x1A00;
			static constexpr auto GL_RENDER = 0x1C00;
			static constexpr auto GL_FEEDBACK = 0x1C01;
			static constexpr auto GL_SELECT = 0x1C02;
			static constexpr auto GL_FLAT = 0x1D00;
			static constexpr auto GL_SMOOTH = 0x1D01;
			static constexpr auto GL_S = 0x2000;
			static constexpr auto GL_T = 0x2001;
			static constexpr auto GL_R = 0x2002;
			static constexpr auto GL_Q = 0x2003;
			static constexpr auto GL_MODULATE = 0x2100;
			static constexpr auto GL_DECAL = 0x2101;
			static constexpr auto GL_TEXTURE_ENV_MODE = 0x2200;
			static constexpr auto GL_TEXTURE_ENV_COLOR = 0x2201;
			static constexpr auto GL_TEXTURE_ENV = 0x2300;
			static constexpr auto GL_EYE_LINEAR = 0x2400;
			static constexpr auto GL_OBJECT_LINEAR = 0x2401;
			static constexpr auto GL_SPHERE_MAP = 0x2402;
			static constexpr auto GL_TEXTURE_GEN_MODE = 0x2500;
			static constexpr auto GL_OBJECT_PLANE = 0x2501;
			static constexpr auto GL_EYE_PLANE = 0x2502;
			static constexpr auto GL_CLAMP = 0x2900;
			static constexpr auto GL_CLIP_PLANE0 = 0x3000;
			static constexpr auto GL_CLIP_PLANE1 = 0x3001;
			static constexpr auto GL_CLIP_PLANE2 = 0x3002;
			static constexpr auto GL_CLIP_PLANE3 = 0x3003;
			static constexpr auto GL_CLIP_PLANE4 = 0x3004;
			static constexpr auto GL_CLIP_PLANE5 = 0x3005;
			static constexpr auto GL_LIGHT0 = 0x4000;
			static constexpr auto GL_LIGHT1 = 0x4001;
			static constexpr auto GL_LIGHT2 = 0x4002;
			static constexpr auto GL_LIGHT3 = 0x4003;
			static constexpr auto GL_LIGHT4 = 0x4004;
			static constexpr auto GL_LIGHT5 = 0x4005;
			static constexpr auto GL_LIGHT6 = 0x4006;
			static constexpr auto GL_LIGHT7 = 0x4007;
			static constexpr auto GL_COLOR_LOGIC_OP = 0x0BF2;
			static constexpr auto GL_POLYGON_OFFSET_UNITS = 0x2A00;
			static constexpr auto GL_POLYGON_OFFSET_POINT = 0x2A01;
			static constexpr auto GL_POLYGON_OFFSET_LINE = 0x2A02;
			static constexpr auto GL_POLYGON_OFFSET_FILL = 0x8037;
			static constexpr auto GL_POLYGON_OFFSET_FACTOR = 0x8038;
			static constexpr auto GL_TEXTURE_BINDING_1D = 0x8068;
			static constexpr auto GL_TEXTURE_BINDING_2D = 0x8069;
			static constexpr auto GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
			static constexpr auto GL_TEXTURE_RED_SIZE = 0x805C;
			static constexpr auto GL_TEXTURE_GREEN_SIZE = 0x805D;
			static constexpr auto GL_TEXTURE_BLUE_SIZE = 0x805E;
			static constexpr auto GL_TEXTURE_ALPHA_SIZE = 0x805F;
			static constexpr auto GL_DOUBLE = 0x140A;
			static constexpr auto GL_PROXY_TEXTURE_1D = 0x8063;
			static constexpr auto GL_PROXY_TEXTURE_2D = 0x8064;
			static constexpr auto GL_R3_G3_B2 = 0x2A10;
			static constexpr auto GL_RGB4 = 0x804F;
			static constexpr auto GL_RGB5 = 0x8050;
			static constexpr auto GL_RGB8 = 0x8051;
			static constexpr auto GL_RGB10 = 0x8052;
			static constexpr auto GL_RGB12 = 0x8053;
			static constexpr auto GL_RGB16 = 0x8054;
			static constexpr auto GL_RGBA2 = 0x8055;
			static constexpr auto GL_RGBA4 = 0x8056;
			static constexpr auto GL_RGB5_A1 = 0x8057;
			static constexpr auto GL_RGBA8 = 0x8058;
			static constexpr auto GL_RGB10_A2 = 0x8059;
			static constexpr auto GL_RGBA12 = 0x805A;
			static constexpr auto GL_RGBA16 = 0x805B;
			static constexpr auto GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
			static constexpr auto GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
			static constexpr auto GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
			static constexpr auto GL_VERTEX_ARRAY_POINTER = 0x808E;
			static constexpr auto GL_NORMAL_ARRAY_POINTER = 0x808F;
			static constexpr auto GL_COLOR_ARRAY_POINTER = 0x8090;
			static constexpr auto GL_INDEX_ARRAY_POINTER = 0x8091;
			static constexpr auto GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
			static constexpr auto GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
			static constexpr auto GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
			static constexpr auto GL_SELECTION_BUFFER_POINTER = 0x0DF3;
			static constexpr auto GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
			static constexpr auto GL_INDEX_LOGIC_OP = 0x0BF1;
			static constexpr auto GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
			static constexpr auto GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
			static constexpr auto GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
			static constexpr auto GL_SELECTION_BUFFER_SIZE = 0x0DF4;
			static constexpr auto GL_VERTEX_ARRAY = 0x8074;
			static constexpr auto GL_NORMAL_ARRAY = 0x8075;
			static constexpr auto GL_COLOR_ARRAY = 0x8076;
			static constexpr auto GL_INDEX_ARRAY = 0x8077;
			static constexpr auto GL_TEXTURE_COORD_ARRAY = 0x8078;
			static constexpr auto GL_EDGE_FLAG_ARRAY = 0x8079;
			static constexpr auto GL_VERTEX_ARRAY_SIZE = 0x807A;
			static constexpr auto GL_VERTEX_ARRAY_TYPE = 0x807B;
			static constexpr auto GL_VERTEX_ARRAY_STRIDE = 0x807C;
			static constexpr auto GL_NORMAL_ARRAY_TYPE = 0x807E;
			static constexpr auto GL_NORMAL_ARRAY_STRIDE = 0x807F;
			static constexpr auto GL_COLOR_ARRAY_SIZE = 0x8081;
			static constexpr auto GL_COLOR_ARRAY_TYPE = 0x8082;
			static constexpr auto GL_COLOR_ARRAY_STRIDE = 0x8083;
			static constexpr auto GL_INDEX_ARRAY_TYPE = 0x8085;
			static constexpr auto GL_INDEX_ARRAY_STRIDE = 0x8086;
			static constexpr auto GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
			static constexpr auto GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
			static constexpr auto GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
			static constexpr auto GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
			static constexpr auto GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
			static constexpr auto GL_TEXTURE_INTENSITY_SIZE = 0x8061;
			static constexpr auto GL_TEXTURE_PRIORITY = 0x8066;
			static constexpr auto GL_TEXTURE_RESIDENT = 0x8067;
			static constexpr auto GL_ALPHA4 = 0x803B;
			static constexpr auto GL_ALPHA8 = 0x803C;
			static constexpr auto GL_ALPHA12 = 0x803D;
			static constexpr auto GL_ALPHA16 = 0x803E;
			static constexpr auto GL_LUMINANCE4 = 0x803F;
			static constexpr auto GL_LUMINANCE8 = 0x8040;
			static constexpr auto GL_LUMINANCE12 = 0x8041;
			static constexpr auto GL_LUMINANCE16 = 0x8042;
			static constexpr auto GL_LUMINANCE4_ALPHA4 = 0x8043;
			static constexpr auto GL_LUMINANCE6_ALPHA2 = 0x8044;
			static constexpr auto GL_LUMINANCE8_ALPHA8 = 0x8045;
			static constexpr auto GL_LUMINANCE12_ALPHA4 = 0x8046;
			static constexpr auto GL_LUMINANCE12_ALPHA12 = 0x8047;
			static constexpr auto GL_LUMINANCE16_ALPHA16 = 0x8048;
			static constexpr auto GL_INTENSITY = 0x8049;
			static constexpr auto GL_INTENSITY4 = 0x804A;
			static constexpr auto GL_INTENSITY8 = 0x804B;
			static constexpr auto GL_INTENSITY12 = 0x804C;
			static constexpr auto GL_INTENSITY16 = 0x804D;
			static constexpr auto GL_V2F = 0x2A20;
			static constexpr auto GL_V3F = 0x2A21;
			static constexpr auto GL_C4UB_V2F = 0x2A22;
			static constexpr auto GL_C4UB_V3F = 0x2A23;
			static constexpr auto GL_C3F_V3F = 0x2A24;
			static constexpr auto GL_N3F_V3F = 0x2A25;
			static constexpr auto GL_C4F_N3F_V3F = 0x2A26;
			static constexpr auto GL_T2F_V3F = 0x2A27;
			static constexpr auto GL_T4F_V4F = 0x2A28;
			static constexpr auto GL_T2F_C4UB_V3F = 0x2A29;
			static constexpr auto GL_T2F_C3F_V3F = 0x2A2A;
			static constexpr auto GL_T2F_N3F_V3F = 0x2A2B;
			static constexpr auto GL_T2F_C4F_N3F_V3F = 0x2A2C;
			static constexpr auto GL_T4F_C4F_N3F_V4F = 0x2A2D;
			static constexpr auto GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
			static constexpr auto GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
			static constexpr auto GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
			static constexpr auto GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
			static constexpr auto GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
			static constexpr auto GL_TEXTURE_BINDING_3D = 0x806A;
			static constexpr auto GL_PACK_SKIP_IMAGES = 0x806B;
			static constexpr auto GL_PACK_IMAGE_HEIGHT = 0x806C;
			static constexpr auto GL_UNPACK_SKIP_IMAGES = 0x806D;
			static constexpr auto GL_UNPACK_IMAGE_HEIGHT = 0x806E;
			static constexpr auto GL_TEXTURE_3D = 0x806F;
			static constexpr auto GL_PROXY_TEXTURE_3D = 0x8070;
			static constexpr auto GL_TEXTURE_DEPTH = 0x8071;
			static constexpr auto GL_TEXTURE_WRAP_R = 0x8072;
			static constexpr auto GL_MAX_3D_TEXTURE_SIZE = 0x8073;
			static constexpr auto GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
			static constexpr auto GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
			static constexpr auto GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
			static constexpr auto GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
			static constexpr auto GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
			static constexpr auto GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
			static constexpr auto GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
			static constexpr auto GL_BGR = 0x80E0;
			static constexpr auto GL_BGRA = 0x80E1;
			static constexpr auto GL_MAX_ELEMENTS_VERTICES = 0x80E8;
			static constexpr auto GL_MAX_ELEMENTS_INDICES = 0x80E9;
			static constexpr auto GL_CLAMP_TO_EDGE = 0x812F;
			static constexpr auto GL_TEXTURE_MIN_LOD = 0x813A;
			static constexpr auto GL_TEXTURE_MAX_LOD = 0x813B;
			static constexpr auto GL_TEXTURE_BASE_LEVEL = 0x813C;
			static constexpr auto GL_TEXTURE_MAX_LEVEL = 0x813D;
			static constexpr auto GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
			static constexpr auto GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
			static constexpr auto GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
			static constexpr auto GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
			static constexpr auto GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
			static constexpr auto GL_RESCALE_NORMAL = 0x803A;
			static constexpr auto GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
			static constexpr auto GL_SINGLE_COLOR = 0x81F9;
			static constexpr auto GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
			static constexpr auto GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
			static constexpr auto GL_TEXTURE0 = 0x84C0;
			static constexpr auto GL_TEXTURE1 = 0x84C1;
			static constexpr auto GL_TEXTURE2 = 0x84C2;
			static constexpr auto GL_TEXTURE3 = 0x84C3;
			static constexpr auto GL_TEXTURE4 = 0x84C4;
			static constexpr auto GL_TEXTURE5 = 0x84C5;
			static constexpr auto GL_TEXTURE6 = 0x84C6;
			static constexpr auto GL_TEXTURE7 = 0x84C7;
			static constexpr auto GL_TEXTURE8 = 0x84C8;
			static constexpr auto GL_TEXTURE9 = 0x84C9;
			static constexpr auto GL_TEXTURE10 = 0x84CA;
			static constexpr auto GL_TEXTURE11 = 0x84CB;
			static constexpr auto GL_TEXTURE12 = 0x84CC;
			static constexpr auto GL_TEXTURE13 = 0x84CD;
			static constexpr auto GL_TEXTURE14 = 0x84CE;
			static constexpr auto GL_TEXTURE15 = 0x84CF;
			static constexpr auto GL_TEXTURE16 = 0x84D0;
			static constexpr auto GL_TEXTURE17 = 0x84D1;
			static constexpr auto GL_TEXTURE18 = 0x84D2;
			static constexpr auto GL_TEXTURE19 = 0x84D3;
			static constexpr auto GL_TEXTURE20 = 0x84D4;
			static constexpr auto GL_TEXTURE21 = 0x84D5;
			static constexpr auto GL_TEXTURE22 = 0x84D6;
			static constexpr auto GL_TEXTURE23 = 0x84D7;
			static constexpr auto GL_TEXTURE24 = 0x84D8;
			static constexpr auto GL_TEXTURE25 = 0x84D9;
			static constexpr auto GL_TEXTURE26 = 0x84DA;
			static constexpr auto GL_TEXTURE27 = 0x84DB;
			static constexpr auto GL_TEXTURE28 = 0x84DC;
			static constexpr auto GL_TEXTURE29 = 0x84DD;
			static constexpr auto GL_TEXTURE30 = 0x84DE;
			static constexpr auto GL_TEXTURE31 = 0x84DF;
			static constexpr auto GL_ACTIVE_TEXTURE = 0x84E0;
			static constexpr auto GL_MULTISAMPLE = 0x809D;
			static constexpr auto GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
			static constexpr auto GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
			static constexpr auto GL_SAMPLE_COVERAGE = 0x80A0;
			static constexpr auto GL_SAMPLE_BUFFERS = 0x80A8;
			static constexpr auto GL_SAMPLES = 0x80A9;
			static constexpr auto GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
			static constexpr auto GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
			static constexpr auto GL_TEXTURE_CUBE_MAP = 0x8513;
			static constexpr auto GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
			static constexpr auto GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
			static constexpr auto GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
			static constexpr auto GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
			static constexpr auto GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
			static constexpr auto GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
			static constexpr auto GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
			static constexpr auto GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
			static constexpr auto GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
			static constexpr auto GL_COMPRESSED_RGB = 0x84ED;
			static constexpr auto GL_COMPRESSED_RGBA = 0x84EE;
			static constexpr auto GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
			static constexpr auto GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
			static constexpr auto GL_TEXTURE_COMPRESSED = 0x86A1;
			static constexpr auto GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
			static constexpr auto GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
			static constexpr auto GL_CLAMP_TO_BORDER = 0x812D;
			static constexpr auto GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
			static constexpr auto GL_MAX_TEXTURE_UNITS = 0x84E2;
			static constexpr auto GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
			static constexpr auto GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
			static constexpr auto GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
			static constexpr auto GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
			static constexpr auto GL_MULTISAMPLE_BIT = 0x20000000;
			static constexpr auto GL_NORMAL_MAP = 0x8511;
			static constexpr auto GL_REFLECTION_MAP = 0x8512;
			static constexpr auto GL_COMPRESSED_ALPHA = 0x84E9;
			static constexpr auto GL_COMPRESSED_LUMINANCE = 0x84EA;
			static constexpr auto GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
			static constexpr auto GL_COMPRESSED_INTENSITY = 0x84EC;
			static constexpr auto GL_COMBINE = 0x8570;
			static constexpr auto GL_COMBINE_RGB = 0x8571;
			static constexpr auto GL_COMBINE_ALPHA = 0x8572;
			static constexpr auto GL_SOURCE0_RGB = 0x8580;
			static constexpr auto GL_SOURCE1_RGB = 0x8581;
			static constexpr auto GL_SOURCE2_RGB = 0x8582;
			static constexpr auto GL_SOURCE0_ALPHA = 0x8588;
			static constexpr auto GL_SOURCE1_ALPHA = 0x8589;
			static constexpr auto GL_SOURCE2_ALPHA = 0x858A;
			static constexpr auto GL_OPERAND0_RGB = 0x8590;
			static constexpr auto GL_OPERAND1_RGB = 0x8591;
			static constexpr auto GL_OPERAND2_RGB = 0x8592;
			static constexpr auto GL_OPERAND0_ALPHA = 0x8598;
			static constexpr auto GL_OPERAND1_ALPHA = 0x8599;
			static constexpr auto GL_OPERAND2_ALPHA = 0x859A;
			static constexpr auto GL_RGB_SCALE = 0x8573;
			static constexpr auto GL_ADD_SIGNED = 0x8574;
			static constexpr auto GL_INTERPOLATE = 0x8575;
			static constexpr auto GL_SUBTRACT = 0x84E7;
			static constexpr auto GL_CONSTANT = 0x8576;
			static constexpr auto GL_PRIMARY_COLOR = 0x8577;
			static constexpr auto GL_PREVIOUS = 0x8578;
			static constexpr auto GL_DOT3_RGB = 0x86AE;
			static constexpr auto GL_DOT3_RGBA = 0x86AF;
			static constexpr auto GL_BLEND_DST_RGB = 0x80C8;
			static constexpr auto GL_BLEND_SRC_RGB = 0x80C9;
			static constexpr auto GL_BLEND_DST_ALPHA = 0x80CA;
			static constexpr auto GL_BLEND_SRC_ALPHA = 0x80CB;
			static constexpr auto GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
			static constexpr auto GL_DEPTH_COMPONENT16 = 0x81A5;
			static constexpr auto GL_DEPTH_COMPONENT24 = 0x81A6;
			static constexpr auto GL_DEPTH_COMPONENT32 = 0x81A7;
			static constexpr auto GL_MIRRORED_REPEAT = 0x8370;
			static constexpr auto GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
			static constexpr auto GL_TEXTURE_LOD_BIAS = 0x8501;
			static constexpr auto GL_INCR_WRAP = 0x8507;
			static constexpr auto GL_DECR_WRAP = 0x8508;
			static constexpr auto GL_TEXTURE_DEPTH_SIZE = 0x884A;
			static constexpr auto GL_TEXTURE_COMPARE_MODE = 0x884C;
			static constexpr auto GL_TEXTURE_COMPARE_FUNC = 0x884D;
			static constexpr auto GL_POINT_SIZE_MIN = 0x8126;
			static constexpr auto GL_POINT_SIZE_MAX = 0x8127;
			static constexpr auto GL_POINT_DISTANCE_ATTENUATION = 0x8129;
			static constexpr auto GL_GENERATE_MIPMAP = 0x8191;
			static constexpr auto GL_GENERATE_MIPMAP_HINT = 0x8192;
			static constexpr auto GL_FOG_COORDINATE_SOURCE = 0x8450;
			static constexpr auto GL_FOG_COORDINATE = 0x8451;
			static constexpr auto GL_FRAGMENT_DEPTH = 0x8452;
			static constexpr auto GL_CURRENT_FOG_COORDINATE = 0x8453;
			static constexpr auto GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
			static constexpr auto GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
			static constexpr auto GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
			static constexpr auto GL_FOG_COORDINATE_ARRAY = 0x8457;
			static constexpr auto GL_COLOR_SUM = 0x8458;
			static constexpr auto GL_CURRENT_SECONDARY_COLOR = 0x8459;
			static constexpr auto GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
			static constexpr auto GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
			static constexpr auto GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
			static constexpr auto GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
			static constexpr auto GL_SECONDARY_COLOR_ARRAY = 0x845E;
			static constexpr auto GL_TEXTURE_FILTER_CONTROL = 0x8500;
			static constexpr auto GL_DEPTH_TEXTURE_MODE = 0x884B;
			static constexpr auto GL_COMPARE_R_TO_TEXTURE = 0x884E;
			static constexpr auto GL_BLEND_COLOR = 0x8005;
			static constexpr auto GL_BLEND_EQUATION = 0x8009;
			static constexpr auto GL_CONSTANT_COLOR = 0x8001;
			static constexpr auto GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
			static constexpr auto GL_CONSTANT_ALPHA = 0x8003;
			static constexpr auto GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
			static constexpr auto GL_FUNC_ADD = 0x8006;
			static constexpr auto GL_FUNC_REVERSE_SUBTRACT = 0x800B;
			static constexpr auto GL_FUNC_SUBTRACT = 0x800A;
			static constexpr auto GL_MIN = 0x8007;
			static constexpr auto GL_MAX = 0x8008;
			static constexpr auto GL_BUFFER_SIZE = 0x8764;
			static constexpr auto GL_BUFFER_USAGE = 0x8765;
			static constexpr auto GL_QUERY_COUNTER_BITS = 0x8864;
			static constexpr auto GL_CURRENT_QUERY = 0x8865;
			static constexpr auto GL_QUERY_RESULT = 0x8866;
			static constexpr auto GL_QUERY_RESULT_AVAILABLE = 0x8867;
			static constexpr auto GL_ARRAY_BUFFER = 0x8892;
			static constexpr auto GL_ELEMENT_ARRAY_BUFFER = 0x8893;
			static constexpr auto GL_ARRAY_BUFFER_BINDING = 0x8894;
			static constexpr auto GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
			static constexpr auto GL_READ_ONLY = 0x88B8;
			static constexpr auto GL_WRITE_ONLY = 0x88B9;
			static constexpr auto GL_READ_WRITE = 0x88BA;
			static constexpr auto GL_BUFFER_ACCESS = 0x88BB;
			static constexpr auto GL_BUFFER_MAPPED = 0x88BC;
			static constexpr auto GL_BUFFER_MAP_POINTER = 0x88BD;
			static constexpr auto GL_STREAM_DRAW = 0x88E0;
			static constexpr auto GL_STREAM_READ = 0x88E1;
			static constexpr auto GL_STREAM_COPY = 0x88E2;
			static constexpr auto GL_STATIC_DRAW = 0x88E4;
			static constexpr auto GL_STATIC_READ = 0x88E5;
			static constexpr auto GL_STATIC_COPY = 0x88E6;
			static constexpr auto GL_DYNAMIC_DRAW = 0x88E8;
			static constexpr auto GL_DYNAMIC_READ = 0x88E9;
			static constexpr auto GL_DYNAMIC_COPY = 0x88EA;
			static constexpr auto GL_SAMPLES_PASSED = 0x8914;
			static constexpr auto GL_SRC1_ALPHA = 0x8589;
			static constexpr auto GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
			static constexpr auto GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
			static constexpr auto GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
			static constexpr auto GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
			static constexpr auto GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
			static constexpr auto GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
			static constexpr auto GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
			static constexpr auto GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
			static constexpr auto GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
			static constexpr auto GL_FOG_COORD_SRC = 0x8450;
			static constexpr auto GL_FOG_COORD = 0x8451;
			static constexpr auto GL_CURRENT_FOG_COORD = 0x8453;
			static constexpr auto GL_FOG_COORD_ARRAY_TYPE = 0x8454;
			static constexpr auto GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
			static constexpr auto GL_FOG_COORD_ARRAY_POINTER = 0x8456;
			static constexpr auto GL_FOG_COORD_ARRAY = 0x8457;
			static constexpr auto GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
			static constexpr auto GL_SRC0_RGB = 0x8580;
			static constexpr auto GL_SRC1_RGB = 0x8581;
			static constexpr auto GL_SRC2_RGB = 0x8582;
			static constexpr auto GL_SRC0_ALPHA = 0x8588;
			static constexpr auto GL_SRC2_ALPHA = 0x858A;
			static constexpr auto GL_BLEND_EQUATION_RGB = 0x8009;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
			static constexpr auto GL_CURRENT_VERTEX_ATTRIB = 0x8626;
			static constexpr auto GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
			static constexpr auto GL_STENCIL_BACK_FUNC = 0x8800;
			static constexpr auto GL_STENCIL_BACK_FAIL = 0x8801;
			static constexpr auto GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
			static constexpr auto GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
			static constexpr auto GL_MAX_DRAW_BUFFERS = 0x8824;
			static constexpr auto GL_DRAW_BUFFER0 = 0x8825;
			static constexpr auto GL_DRAW_BUFFER1 = 0x8826;
			static constexpr auto GL_DRAW_BUFFER2 = 0x8827;
			static constexpr auto GL_DRAW_BUFFER3 = 0x8828;
			static constexpr auto GL_DRAW_BUFFER4 = 0x8829;
			static constexpr auto GL_DRAW_BUFFER5 = 0x882A;
			static constexpr auto GL_DRAW_BUFFER6 = 0x882B;
			static constexpr auto GL_DRAW_BUFFER7 = 0x882C;
			static constexpr auto GL_DRAW_BUFFER8 = 0x882D;
			static constexpr auto GL_DRAW_BUFFER9 = 0x882E;
			static constexpr auto GL_DRAW_BUFFER10 = 0x882F;
			static constexpr auto GL_DRAW_BUFFER11 = 0x8830;
			static constexpr auto GL_DRAW_BUFFER12 = 0x8831;
			static constexpr auto GL_DRAW_BUFFER13 = 0x8832;
			static constexpr auto GL_DRAW_BUFFER14 = 0x8833;
			static constexpr auto GL_DRAW_BUFFER15 = 0x8834;
			static constexpr auto GL_BLEND_EQUATION_ALPHA = 0x883D;
			static constexpr auto GL_MAX_VERTEX_ATTRIBS = 0x8869;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
			static constexpr auto GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
			static constexpr auto GL_FRAGMENT_SHADER = 0x8B30;
			static constexpr auto GL_VERTEX_SHADER = 0x8B31;
			static constexpr auto GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
			static constexpr auto GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
			static constexpr auto GL_MAX_VARYING_FLOATS = 0x8B4B;
			static constexpr auto GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
			static constexpr auto GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
			static constexpr auto GL_SHADER_TYPE = 0x8B4F;
			static constexpr auto GL_FLOAT_VEC2 = 0x8B50;
			static constexpr auto GL_FLOAT_VEC3 = 0x8B51;
			static constexpr auto GL_FLOAT_VEC4 = 0x8B52;
			static constexpr auto GL_INT_VEC2 = 0x8B53;
			static constexpr auto GL_INT_VEC3 = 0x8B54;
			static constexpr auto GL_INT_VEC4 = 0x8B55;
			static constexpr auto GL_BOOL = 0x8B56;
			static constexpr auto GL_BOOL_VEC2 = 0x8B57;
			static constexpr auto GL_BOOL_VEC3 = 0x8B58;
			static constexpr auto GL_BOOL_VEC4 = 0x8B59;
			static constexpr auto GL_FLOAT_MAT2 = 0x8B5A;
			static constexpr auto GL_FLOAT_MAT3 = 0x8B5B;
			static constexpr auto GL_FLOAT_MAT4 = 0x8B5C;
			static constexpr auto GL_SAMPLER_1D = 0x8B5D;
			static constexpr auto GL_SAMPLER_2D = 0x8B5E;
			static constexpr auto GL_SAMPLER_3D = 0x8B5F;
			static constexpr auto GL_SAMPLER_CUBE = 0x8B60;
			static constexpr auto GL_SAMPLER_1D_SHADOW = 0x8B61;
			static constexpr auto GL_SAMPLER_2D_SHADOW = 0x8B62;
			static constexpr auto GL_DELETE_STATUS = 0x8B80;
			static constexpr auto GL_COMPILE_STATUS = 0x8B81;
			static constexpr auto GL_LINK_STATUS = 0x8B82;
			static constexpr auto GL_VALIDATE_STATUS = 0x8B83;
			static constexpr auto GL_INFO_LOG_LENGTH = 0x8B84;
			static constexpr auto GL_ATTACHED_SHADERS = 0x8B85;
			static constexpr auto GL_ACTIVE_UNIFORMS = 0x8B86;
			static constexpr auto GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
			static constexpr auto GL_SHADER_SOURCE_LENGTH = 0x8B88;
			static constexpr auto GL_ACTIVE_ATTRIBUTES = 0x8B89;
			static constexpr auto GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
			static constexpr auto GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
			static constexpr auto GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
			static constexpr auto GL_CURRENT_PROGRAM = 0x8B8D;
			static constexpr auto GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
			static constexpr auto GL_LOWER_LEFT = 0x8CA1;
			static constexpr auto GL_UPPER_LEFT = 0x8CA2;
			static constexpr auto GL_STENCIL_BACK_REF = 0x8CA3;
			static constexpr auto GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
			static constexpr auto GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
			static constexpr auto GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
			static constexpr auto GL_POINT_SPRITE = 0x8861;
			static constexpr auto GL_COORD_REPLACE = 0x8862;
			static constexpr auto GL_MAX_TEXTURE_COORDS = 0x8871;
			static constexpr auto GL_PIXEL_PACK_BUFFER = 0x88EB;
			static constexpr auto GL_PIXEL_UNPACK_BUFFER = 0x88EC;
			static constexpr auto GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
			static constexpr auto GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
			static constexpr auto GL_FLOAT_MAT2x3 = 0x8B65;
			static constexpr auto GL_FLOAT_MAT2x4 = 0x8B66;
			static constexpr auto GL_FLOAT_MAT3x2 = 0x8B67;
			static constexpr auto GL_FLOAT_MAT3x4 = 0x8B68;
			static constexpr auto GL_FLOAT_MAT4x2 = 0x8B69;
			static constexpr auto GL_FLOAT_MAT4x3 = 0x8B6A;
			static constexpr auto GL_SRGB = 0x8C40;
			static constexpr auto GL_SRGB8 = 0x8C41;
			static constexpr auto GL_SRGB_ALPHA = 0x8C42;
			static constexpr auto GL_SRGB8_ALPHA8 = 0x8C43;
			static constexpr auto GL_COMPRESSED_SRGB = 0x8C48;
			static constexpr auto GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
			static constexpr auto GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
			static constexpr auto GL_SLUMINANCE_ALPHA = 0x8C44;
			static constexpr auto GL_SLUMINANCE8_ALPHA8 = 0x8C45;
			static constexpr auto GL_SLUMINANCE = 0x8C46;
			static constexpr auto GL_SLUMINANCE8 = 0x8C47;
			static constexpr auto GL_COMPRESSED_SLUMINANCE = 0x8C4A;
			static constexpr auto GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
			static constexpr auto GL_COMPARE_REF_TO_TEXTURE = 0x884E;
			static constexpr auto GL_CLIP_DISTANCE0 = 0x3000;
			static constexpr auto GL_CLIP_DISTANCE1 = 0x3001;
			static constexpr auto GL_CLIP_DISTANCE2 = 0x3002;
			static constexpr auto GL_CLIP_DISTANCE3 = 0x3003;
			static constexpr auto GL_CLIP_DISTANCE4 = 0x3004;
			static constexpr auto GL_CLIP_DISTANCE5 = 0x3005;
			static constexpr auto GL_CLIP_DISTANCE6 = 0x3006;
			static constexpr auto GL_CLIP_DISTANCE7 = 0x3007;
			static constexpr auto GL_MAX_CLIP_DISTANCES = 0x0D32;
			static constexpr auto GL_MAJOR_VERSION = 0x821B;
			static constexpr auto GL_MINOR_VERSION = 0x821C;
			static constexpr auto GL_NUM_EXTENSIONS = 0x821D;
			static constexpr auto GL_CONTEXT_FLAGS = 0x821E;
			static constexpr auto GL_COMPRESSED_RED = 0x8225;
			static constexpr auto GL_COMPRESSED_RG = 0x8226;
			static constexpr auto GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
			static constexpr auto GL_RGBA32F = 0x8814;
			static constexpr auto GL_RGB32F = 0x8815;
			static constexpr auto GL_RGBA16F = 0x881A;
			static constexpr auto GL_RGB16F = 0x881B;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
			static constexpr auto GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
			static constexpr auto GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
			static constexpr auto GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
			static constexpr auto GL_CLAMP_READ_COLOR = 0x891C;
			static constexpr auto GL_FIXED_ONLY = 0x891D;
			static constexpr auto GL_MAX_VARYING_COMPONENTS = 0x8B4B;
			static constexpr auto GL_TEXTURE_1D_ARRAY = 0x8C18;
			static constexpr auto GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
			static constexpr auto GL_TEXTURE_2D_ARRAY = 0x8C1A;
			static constexpr auto GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
			static constexpr auto GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
			static constexpr auto GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
			static constexpr auto GL_R11F_G11F_B10F = 0x8C3A;
			static constexpr auto GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
			static constexpr auto GL_RGB9_E5 = 0x8C3D;
			static constexpr auto GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
			static constexpr auto GL_TEXTURE_SHARED_SIZE = 0x8C3F;
			static constexpr auto GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
			static constexpr auto GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
			static constexpr auto GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
			static constexpr auto GL_PRIMITIVES_GENERATED = 0x8C87;
			static constexpr auto GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
			static constexpr auto GL_RASTERIZER_DISCARD = 0x8C89;
			static constexpr auto GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
			static constexpr auto GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
			static constexpr auto GL_INTERLEAVED_ATTRIBS = 0x8C8C;
			static constexpr auto GL_SEPARATE_ATTRIBS = 0x8C8D;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
			static constexpr auto GL_RGBA32UI = 0x8D70;
			static constexpr auto GL_RGB32UI = 0x8D71;
			static constexpr auto GL_RGBA16UI = 0x8D76;
			static constexpr auto GL_RGB16UI = 0x8D77;
			static constexpr auto GL_RGBA8UI = 0x8D7C;
			static constexpr auto GL_RGB8UI = 0x8D7D;
			static constexpr auto GL_RGBA32I = 0x8D82;
			static constexpr auto GL_RGB32I = 0x8D83;
			static constexpr auto GL_RGBA16I = 0x8D88;
			static constexpr auto GL_RGB16I = 0x8D89;
			static constexpr auto GL_RGBA8I = 0x8D8E;
			static constexpr auto GL_RGB8I = 0x8D8F;
			static constexpr auto GL_RED_INTEGER = 0x8D94;
			static constexpr auto GL_GREEN_INTEGER = 0x8D95;
			static constexpr auto GL_BLUE_INTEGER = 0x8D96;
			static constexpr auto GL_RGB_INTEGER = 0x8D98;
			static constexpr auto GL_RGBA_INTEGER = 0x8D99;
			static constexpr auto GL_BGR_INTEGER = 0x8D9A;
			static constexpr auto GL_BGRA_INTEGER = 0x8D9B;
			static constexpr auto GL_SAMPLER_1D_ARRAY = 0x8DC0;
			static constexpr auto GL_SAMPLER_2D_ARRAY = 0x8DC1;
			static constexpr auto GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
			static constexpr auto GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
			static constexpr auto GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
			static constexpr auto GL_UNSIGNED_INT_VEC2 = 0x8DC6;
			static constexpr auto GL_UNSIGNED_INT_VEC3 = 0x8DC7;
			static constexpr auto GL_UNSIGNED_INT_VEC4 = 0x8DC8;
			static constexpr auto GL_INT_SAMPLER_1D = 0x8DC9;
			static constexpr auto GL_INT_SAMPLER_2D = 0x8DCA;
			static constexpr auto GL_INT_SAMPLER_3D = 0x8DCB;
			static constexpr auto GL_INT_SAMPLER_CUBE = 0x8DCC;
			static constexpr auto GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
			static constexpr auto GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
			static constexpr auto GL_QUERY_WAIT = 0x8E13;
			static constexpr auto GL_QUERY_NO_WAIT = 0x8E14;
			static constexpr auto GL_QUERY_BY_REGION_WAIT = 0x8E15;
			static constexpr auto GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
			static constexpr auto GL_BUFFER_ACCESS_FLAGS = 0x911F;
			static constexpr auto GL_BUFFER_MAP_LENGTH = 0x9120;
			static constexpr auto GL_BUFFER_MAP_OFFSET = 0x9121;
			static constexpr auto GL_DEPTH_COMPONENT32F = 0x8CAC;
			static constexpr auto GL_DEPTH32F_STENCIL8 = 0x8CAD;
			static constexpr auto GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
			static constexpr auto GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
			static constexpr auto GL_FRAMEBUFFER_DEFAULT = 0x8218;
			static constexpr auto GL_FRAMEBUFFER_UNDEFINED = 0x8219;
			static constexpr auto GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
			static constexpr auto GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
			static constexpr auto GL_DEPTH_STENCIL = 0x84F9;
			static constexpr auto GL_UNSIGNED_INT_24_8 = 0x84FA;
			static constexpr auto GL_DEPTH24_STENCIL8 = 0x88F0;
			static constexpr auto GL_TEXTURE_STENCIL_SIZE = 0x88F1;
			static constexpr auto GL_TEXTURE_RED_TYPE = 0x8C10;
			static constexpr auto GL_TEXTURE_GREEN_TYPE = 0x8C11;
			static constexpr auto GL_TEXTURE_BLUE_TYPE = 0x8C12;
			static constexpr auto GL_TEXTURE_ALPHA_TYPE = 0x8C13;
			static constexpr auto GL_TEXTURE_DEPTH_TYPE = 0x8C16;
			static constexpr auto GL_UNSIGNED_NORMALIZED = 0x8C17;
			static constexpr auto GL_FRAMEBUFFER_BINDING = 0x8CA6;
			static constexpr auto GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
			static constexpr auto GL_RENDERBUFFER_BINDING = 0x8CA7;
			static constexpr auto GL_READ_FRAMEBUFFER = 0x8CA8;
			static constexpr auto GL_DRAW_FRAMEBUFFER = 0x8CA9;
			static constexpr auto GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
			static constexpr auto GL_RENDERBUFFER_SAMPLES = 0x8CAB;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
			static constexpr auto GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
			static constexpr auto GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
			static constexpr auto GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
			static constexpr auto GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
			static constexpr auto GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
			static constexpr auto GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
			static constexpr auto GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
			static constexpr auto GL_COLOR_ATTACHMENT0 = 0x8CE0;
			static constexpr auto GL_COLOR_ATTACHMENT1 = 0x8CE1;
			static constexpr auto GL_COLOR_ATTACHMENT2 = 0x8CE2;
			static constexpr auto GL_COLOR_ATTACHMENT3 = 0x8CE3;
			static constexpr auto GL_COLOR_ATTACHMENT4 = 0x8CE4;
			static constexpr auto GL_COLOR_ATTACHMENT5 = 0x8CE5;
			static constexpr auto GL_COLOR_ATTACHMENT6 = 0x8CE6;
			static constexpr auto GL_COLOR_ATTACHMENT7 = 0x8CE7;
			static constexpr auto GL_COLOR_ATTACHMENT8 = 0x8CE8;
			static constexpr auto GL_COLOR_ATTACHMENT9 = 0x8CE9;
			static constexpr auto GL_COLOR_ATTACHMENT10 = 0x8CEA;
			static constexpr auto GL_COLOR_ATTACHMENT11 = 0x8CEB;
			static constexpr auto GL_COLOR_ATTACHMENT12 = 0x8CEC;
			static constexpr auto GL_COLOR_ATTACHMENT13 = 0x8CED;
			static constexpr auto GL_COLOR_ATTACHMENT14 = 0x8CEE;
			static constexpr auto GL_COLOR_ATTACHMENT15 = 0x8CEF;
			static constexpr auto GL_COLOR_ATTACHMENT16 = 0x8CF0;
			static constexpr auto GL_COLOR_ATTACHMENT17 = 0x8CF1;
			static constexpr auto GL_COLOR_ATTACHMENT18 = 0x8CF2;
			static constexpr auto GL_COLOR_ATTACHMENT19 = 0x8CF3;
			static constexpr auto GL_COLOR_ATTACHMENT20 = 0x8CF4;
			static constexpr auto GL_COLOR_ATTACHMENT21 = 0x8CF5;
			static constexpr auto GL_COLOR_ATTACHMENT22 = 0x8CF6;
			static constexpr auto GL_COLOR_ATTACHMENT23 = 0x8CF7;
			static constexpr auto GL_COLOR_ATTACHMENT24 = 0x8CF8;
			static constexpr auto GL_COLOR_ATTACHMENT25 = 0x8CF9;
			static constexpr auto GL_COLOR_ATTACHMENT26 = 0x8CFA;
			static constexpr auto GL_COLOR_ATTACHMENT27 = 0x8CFB;
			static constexpr auto GL_COLOR_ATTACHMENT28 = 0x8CFC;
			static constexpr auto GL_COLOR_ATTACHMENT29 = 0x8CFD;
			static constexpr auto GL_COLOR_ATTACHMENT30 = 0x8CFE;
			static constexpr auto GL_COLOR_ATTACHMENT31 = 0x8CFF;
			static constexpr auto GL_DEPTH_ATTACHMENT = 0x8D00;
			static constexpr auto GL_STENCIL_ATTACHMENT = 0x8D20;
			static constexpr auto GL_FRAMEBUFFER = 0x8D40;
			static constexpr auto GL_RENDERBUFFER = 0x8D41;
			static constexpr auto GL_RENDERBUFFER_WIDTH = 0x8D42;
			static constexpr auto GL_RENDERBUFFER_HEIGHT = 0x8D43;
			static constexpr auto GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
			static constexpr auto GL_STENCIL_INDEX1 = 0x8D46;
			static constexpr auto GL_STENCIL_INDEX4 = 0x8D47;
			static constexpr auto GL_STENCIL_INDEX8 = 0x8D48;
			static constexpr auto GL_STENCIL_INDEX16 = 0x8D49;
			static constexpr auto GL_RENDERBUFFER_RED_SIZE = 0x8D50;
			static constexpr auto GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
			static constexpr auto GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
			static constexpr auto GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
			static constexpr auto GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
			static constexpr auto GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
			static constexpr auto GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
			static constexpr auto GL_MAX_SAMPLES = 0x8D57;
			static constexpr auto GL_FRAMEBUFFER_SRGB = 0x8DB9;
			static constexpr auto GL_HALF_FLOAT = 0x140B;
			static constexpr auto GL_MAP_READ_BIT = 0x0001;
			static constexpr auto GL_MAP_WRITE_BIT = 0x0002;
			static constexpr auto GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
			static constexpr auto GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
			static constexpr auto GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
			static constexpr auto GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
			static constexpr auto GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
			static constexpr auto GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
			static constexpr auto GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
			static constexpr auto GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
			static constexpr auto GL_RG = 0x8227;
			static constexpr auto GL_RG_INTEGER = 0x8228;
			static constexpr auto GL_R8 = 0x8229;
			static constexpr auto GL_R16 = 0x822A;
			static constexpr auto GL_RG8 = 0x822B;
			static constexpr auto GL_RG16 = 0x822C;
			static constexpr auto GL_R16F = 0x822D;
			static constexpr auto GL_R32F = 0x822E;
			static constexpr auto GL_RG16F = 0x822F;
			static constexpr auto GL_RG32F = 0x8230;
			static constexpr auto GL_R8I = 0x8231;
			static constexpr auto GL_R8UI = 0x8232;
			static constexpr auto GL_R16I = 0x8233;
			static constexpr auto GL_R16UI = 0x8234;
			static constexpr auto GL_R32I = 0x8235;
			static constexpr auto GL_R32UI = 0x8236;
			static constexpr auto GL_RG8I = 0x8237;
			static constexpr auto GL_RG8UI = 0x8238;
			static constexpr auto GL_RG16I = 0x8239;
			static constexpr auto GL_RG16UI = 0x823A;
			static constexpr auto GL_RG32I = 0x823B;
			static constexpr auto GL_RG32UI = 0x823C;
			static constexpr auto GL_VERTEX_ARRAY_BINDING = 0x85B5;
			static constexpr auto GL_CLAMP_VERTEX_COLOR = 0x891A;
			static constexpr auto GL_CLAMP_FRAGMENT_COLOR = 0x891B;
			static constexpr auto GL_ALPHA_INTEGER = 0x8D97;
			static constexpr auto GL_SAMPLER_2D_RECT = 0x8B63;
			static constexpr auto GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
			static constexpr auto GL_SAMPLER_BUFFER = 0x8DC2;
			static constexpr auto GL_INT_SAMPLER_2D_RECT = 0x8DCD;
			static constexpr auto GL_INT_SAMPLER_BUFFER = 0x8DD0;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
			static constexpr auto GL_TEXTURE_BUFFER = 0x8C2A;
			static constexpr auto GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
			static constexpr auto GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
			static constexpr auto GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
			static constexpr auto GL_TEXTURE_RECTANGLE = 0x84F5;
			static constexpr auto GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
			static constexpr auto GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
			static constexpr auto GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
			static constexpr auto GL_R8_SNORM = 0x8F94;
			static constexpr auto GL_RG8_SNORM = 0x8F95;
			static constexpr auto GL_RGB8_SNORM = 0x8F96;
			static constexpr auto GL_RGBA8_SNORM = 0x8F97;
			static constexpr auto GL_R16_SNORM = 0x8F98;
			static constexpr auto GL_RG16_SNORM = 0x8F99;
			static constexpr auto GL_RGB16_SNORM = 0x8F9A;
			static constexpr auto GL_RGBA16_SNORM = 0x8F9B;
			static constexpr auto GL_SIGNED_NORMALIZED = 0x8F9C;
			static constexpr auto GL_PRIMITIVE_RESTART = 0x8F9D;
			static constexpr auto GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
			static constexpr auto GL_COPY_READ_BUFFER = 0x8F36;
			static constexpr auto GL_COPY_WRITE_BUFFER = 0x8F37;
			static constexpr auto GL_UNIFORM_BUFFER = 0x8A11;
			static constexpr auto GL_UNIFORM_BUFFER_BINDING = 0x8A28;
			static constexpr auto GL_UNIFORM_BUFFER_START = 0x8A29;
			static constexpr auto GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
			static constexpr auto GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
			static constexpr auto GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
			static constexpr auto GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
			static constexpr auto GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
			static constexpr auto GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
			static constexpr auto GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
			static constexpr auto GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
			static constexpr auto GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
			static constexpr auto GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
			static constexpr auto GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
			static constexpr auto GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
			static constexpr auto GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
			static constexpr auto GL_UNIFORM_TYPE = 0x8A37;
			static constexpr auto GL_UNIFORM_SIZE = 0x8A38;
			static constexpr auto GL_UNIFORM_NAME_LENGTH = 0x8A39;
			static constexpr auto GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
			static constexpr auto GL_UNIFORM_OFFSET = 0x8A3B;
			static constexpr auto GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
			static constexpr auto GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
			static constexpr auto GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
			static constexpr auto GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
			static constexpr auto GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
			static constexpr auto GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
			static constexpr auto GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
			static constexpr auto GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
			static constexpr auto GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
			static constexpr auto GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
			static constexpr auto GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
			static constexpr auto GL_INVALID_INDEX = 0xFFFFFFFFu;
			static constexpr auto GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
			static constexpr auto GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
			static constexpr auto GL_LINES_ADJACENCY = 0x000A;
			static constexpr auto GL_LINE_STRIP_ADJACENCY = 0x000B;
			static constexpr auto GL_TRIANGLES_ADJACENCY = 0x000C;
			static constexpr auto GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
			static constexpr auto GL_PROGRAM_POINT_SIZE = 0x8642;
			static constexpr auto GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
			static constexpr auto GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
			static constexpr auto GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
			static constexpr auto GL_GEOMETRY_SHADER = 0x8DD9;
			static constexpr auto GL_GEOMETRY_VERTICES_OUT = 0x8916;
			static constexpr auto GL_GEOMETRY_INPUT_TYPE = 0x8917;
			static constexpr auto GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
			static constexpr auto GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
			static constexpr auto GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
			static constexpr auto GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
			static constexpr auto GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
			static constexpr auto GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
			static constexpr auto GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
			static constexpr auto GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
			static constexpr auto GL_CONTEXT_PROFILE_MASK = 0x9126;
			static constexpr auto GL_DEPTH_CLAMP = 0x864F;
			static constexpr auto GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
			static constexpr auto GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
			static constexpr auto GL_LAST_VERTEX_CONVENTION = 0x8E4E;
			static constexpr auto GL_PROVOKING_VERTEX = 0x8E4F;
			static constexpr auto GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
			static constexpr auto GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
			static constexpr auto GL_OBJECT_TYPE = 0x9112;
			static constexpr auto GL_SYNC_CONDITION = 0x9113;
			static constexpr auto GL_SYNC_STATUS = 0x9114;
			static constexpr auto GL_SYNC_FLAGS = 0x9115;
			static constexpr auto GL_SYNC_FENCE = 0x9116;
			static constexpr auto GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
			static constexpr auto GL_UNSIGNALED = 0x9118;
			static constexpr auto GL_SIGNALED = 0x9119;
			static constexpr auto GL_ALREADY_SIGNALED = 0x911A;
			static constexpr auto GL_TIMEOUT_EXPIRED = 0x911B;
			static constexpr auto GL_CONDITION_SATISFIED = 0x911C;
			static constexpr auto GL_WAIT_FAILED = 0x911D;
			static constexpr auto GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFull;
			static constexpr auto GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
			static constexpr auto GL_SAMPLE_POSITION = 0x8E50;
			static constexpr auto GL_SAMPLE_MASK = 0x8E51;
			static constexpr auto GL_SAMPLE_MASK_VALUE = 0x8E52;
			static constexpr auto GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
			static constexpr auto GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
			static constexpr auto GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
			static constexpr auto GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
			static constexpr auto GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
			static constexpr auto GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
			static constexpr auto GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
			static constexpr auto GL_TEXTURE_SAMPLES = 0x9106;
			static constexpr auto GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
			static constexpr auto GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
			static constexpr auto GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
			static constexpr auto GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
			static constexpr auto GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
			static constexpr auto GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
			static constexpr auto GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
			static constexpr auto GL_MAX_INTEGER_SAMPLES = 0x9110;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
			static constexpr auto GL_SRC1_COLOR = 0x88F9;
			static constexpr auto GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
			static constexpr auto GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
			static constexpr auto GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
			static constexpr auto GL_ANY_SAMPLES_PASSED = 0x8C2F;
			static constexpr auto GL_SAMPLER_BINDING = 0x8919;
			static constexpr auto GL_RGB10_A2UI = 0x906F;
			static constexpr auto GL_TEXTURE_SWIZZLE_R = 0x8E42;
			static constexpr auto GL_TEXTURE_SWIZZLE_G = 0x8E43;
			static constexpr auto GL_TEXTURE_SWIZZLE_B = 0x8E44;
			static constexpr auto GL_TEXTURE_SWIZZLE_A = 0x8E45;
			static constexpr auto GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
			static constexpr auto GL_TIME_ELAPSED = 0x88BF;
			static constexpr auto GL_TIMESTAMP = 0x8E28;
			static constexpr auto GL_INT_2_10_10_10_REV = 0x8D9F;
			static constexpr auto GL_SAMPLE_SHADING = 0x8C36;
			static constexpr auto GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
			static constexpr auto GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
			static constexpr auto GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
			static constexpr auto GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
			static constexpr auto GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
			static constexpr auto GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
			static constexpr auto GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
			static constexpr auto GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
			static constexpr auto GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
			static constexpr auto GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
			static constexpr auto GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
			static constexpr auto GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
			static constexpr auto GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
			static constexpr auto GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
			static constexpr auto GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
			static constexpr auto GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
			static constexpr auto GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
			static constexpr auto GL_MAX_VERTEX_STREAMS = 0x8E71;
			static constexpr auto GL_DOUBLE_VEC2 = 0x8FFC;
			static constexpr auto GL_DOUBLE_VEC3 = 0x8FFD;
			static constexpr auto GL_DOUBLE_VEC4 = 0x8FFE;
			static constexpr auto GL_DOUBLE_MAT2 = 0x8F46;
			static constexpr auto GL_DOUBLE_MAT3 = 0x8F47;
			static constexpr auto GL_DOUBLE_MAT4 = 0x8F48;
			static constexpr auto GL_DOUBLE_MAT2x3 = 0x8F49;
			static constexpr auto GL_DOUBLE_MAT2x4 = 0x8F4A;
			static constexpr auto GL_DOUBLE_MAT3x2 = 0x8F4B;
			static constexpr auto GL_DOUBLE_MAT3x4 = 0x8F4C;
			static constexpr auto GL_DOUBLE_MAT4x2 = 0x8F4D;
			static constexpr auto GL_DOUBLE_MAT4x3 = 0x8F4E;
			static constexpr auto GL_ACTIVE_SUBROUTINES = 0x8DE5;
			static constexpr auto GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
			static constexpr auto GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
			static constexpr auto GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
			static constexpr auto GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
			static constexpr auto GL_MAX_SUBROUTINES = 0x8DE7;
			static constexpr auto GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
			static constexpr auto GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
			static constexpr auto GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
			static constexpr auto GL_PATCHES = 0x000E;
			static constexpr auto GL_PATCH_VERTICES = 0x8E72;
			static constexpr auto GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
			static constexpr auto GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
			static constexpr auto GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
			static constexpr auto GL_TESS_GEN_MODE = 0x8E76;
			static constexpr auto GL_TESS_GEN_SPACING = 0x8E77;
			static constexpr auto GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
			static constexpr auto GL_TESS_GEN_POINT_MODE = 0x8E79;
			static constexpr auto GL_ISOLINES = 0x8E7A;
			static constexpr auto GL_FRACTIONAL_ODD = 0x8E7B;
			static constexpr auto GL_FRACTIONAL_EVEN = 0x8E7C;
			static constexpr auto GL_MAX_PATCH_VERTICES = 0x8E7D;
			static constexpr auto GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
			static constexpr auto GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
			static constexpr auto GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
			static constexpr auto GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
			static constexpr auto GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
			static constexpr auto GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
			static constexpr auto GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
			static constexpr auto GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
			static constexpr auto GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
			static constexpr auto GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
			static constexpr auto GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
			static constexpr auto GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
			static constexpr auto GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
			static constexpr auto GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
			static constexpr auto GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
			static constexpr auto GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
			static constexpr auto GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
			static constexpr auto GL_TESS_EVALUATION_SHADER = 0x8E87;
			static constexpr auto GL_TESS_CONTROL_SHADER = 0x8E88;
			static constexpr auto GL_TRANSFORM_FEEDBACK = 0x8E22;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
			static constexpr auto GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
			static constexpr auto GL_FIXED = 0x140C;
			static constexpr auto GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
			static constexpr auto GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
			static constexpr auto GL_LOW_FLOAT = 0x8DF0;
			static constexpr auto GL_MEDIUM_FLOAT = 0x8DF1;
			static constexpr auto GL_HIGH_FLOAT = 0x8DF2;
			static constexpr auto GL_LOW_INT = 0x8DF3;
			static constexpr auto GL_MEDIUM_INT = 0x8DF4;
			static constexpr auto GL_HIGH_INT = 0x8DF5;
			static constexpr auto GL_SHADER_COMPILER = 0x8DFA;
			static constexpr auto GL_SHADER_BINARY_FORMATS = 0x8DF8;
			static constexpr auto GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
			static constexpr auto GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
			static constexpr auto GL_MAX_VARYING_VECTORS = 0x8DFC;
			static constexpr auto GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
			static constexpr auto GL_RGB565 = 0x8D62;
			static constexpr auto GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
			static constexpr auto GL_PROGRAM_BINARY_LENGTH = 0x8741;
			static constexpr auto GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
			static constexpr auto GL_PROGRAM_BINARY_FORMATS = 0x87FF;
			static constexpr auto GL_VERTEX_SHADER_BIT = 0x00000001;
			static constexpr auto GL_FRAGMENT_SHADER_BIT = 0x00000002;
			static constexpr auto GL_GEOMETRY_SHADER_BIT = 0x00000004;
			static constexpr auto GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
			static constexpr auto GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
			static constexpr auto GL_ALL_SHADER_BITS = 0xFFFFFFFF;
			static constexpr auto GL_PROGRAM_SEPARABLE = 0x8258;
			static constexpr auto GL_ACTIVE_PROGRAM = 0x8259;
			static constexpr auto GL_PROGRAM_PIPELINE_BINDING = 0x825A;
			static constexpr auto GL_MAX_VIEWPORTS = 0x825B;
			static constexpr auto GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
			static constexpr auto GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
			static constexpr auto GL_LAYER_PROVOKING_VERTEX = 0x825E;
			static constexpr auto GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
			static constexpr auto GL_UNDEFINED_VERTEX = 0x8260;
			static constexpr auto GL_COPY_READ_BUFFER_BINDING = 0x8F36;
			static constexpr auto GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
			static constexpr auto GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
			static constexpr auto GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
			static constexpr auto GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
			static constexpr auto GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
			static constexpr auto GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
			static constexpr auto GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
			static constexpr auto GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
			static constexpr auto GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
			static constexpr auto GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
			static constexpr auto GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
			static constexpr auto GL_NUM_SAMPLE_COUNTS = 0x9380;
			static constexpr auto GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
			static constexpr auto GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
			static constexpr auto GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
			static constexpr auto GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
			static constexpr auto GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
			static constexpr auto GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
			static constexpr auto GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
			static constexpr auto GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
			static constexpr auto GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
			static constexpr auto GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
			static constexpr auto GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
			static constexpr auto GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
			static constexpr auto GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
			static constexpr auto GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
			static constexpr auto GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
			static constexpr auto GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
			static constexpr auto GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
			static constexpr auto GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
			static constexpr auto GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
			static constexpr auto GL_UNIFORM_BARRIER_BIT = 0x00000004;
			static constexpr auto GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
			static constexpr auto GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
			static constexpr auto GL_COMMAND_BARRIER_BIT = 0x00000040;
			static constexpr auto GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
			static constexpr auto GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
			static constexpr auto GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
			static constexpr auto GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
			static constexpr auto GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
			static constexpr auto GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
			static constexpr auto GL_MAX_IMAGE_UNITS = 0x8F38;
			static constexpr auto GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
			static constexpr auto GL_IMAGE_BINDING_NAME = 0x8F3A;
			static constexpr auto GL_IMAGE_BINDING_LEVEL = 0x8F3B;
			static constexpr auto GL_IMAGE_BINDING_LAYERED = 0x8F3C;
			static constexpr auto GL_IMAGE_BINDING_LAYER = 0x8F3D;
			static constexpr auto GL_IMAGE_BINDING_ACCESS = 0x8F3E;
			static constexpr auto GL_IMAGE_1D = 0x904C;
			static constexpr auto GL_IMAGE_2D = 0x904D;
			static constexpr auto GL_IMAGE_3D = 0x904E;
			static constexpr auto GL_IMAGE_2D_RECT = 0x904F;
			static constexpr auto GL_IMAGE_CUBE = 0x9050;
			static constexpr auto GL_IMAGE_BUFFER = 0x9051;
			static constexpr auto GL_IMAGE_1D_ARRAY = 0x9052;
			static constexpr auto GL_IMAGE_2D_ARRAY = 0x9053;
			static constexpr auto GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
			static constexpr auto GL_IMAGE_2D_MULTISAMPLE = 0x9055;
			static constexpr auto GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
			static constexpr auto GL_INT_IMAGE_1D = 0x9057;
			static constexpr auto GL_INT_IMAGE_2D = 0x9058;
			static constexpr auto GL_INT_IMAGE_3D = 0x9059;
			static constexpr auto GL_INT_IMAGE_2D_RECT = 0x905A;
			static constexpr auto GL_INT_IMAGE_CUBE = 0x905B;
			static constexpr auto GL_INT_IMAGE_BUFFER = 0x905C;
			static constexpr auto GL_INT_IMAGE_1D_ARRAY = 0x905D;
			static constexpr auto GL_INT_IMAGE_2D_ARRAY = 0x905E;
			static constexpr auto GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
			static constexpr auto GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
			static constexpr auto GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
			static constexpr auto GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
			static constexpr auto GL_MAX_IMAGE_SAMPLES = 0x906D;
			static constexpr auto GL_IMAGE_BINDING_FORMAT = 0x906E;
			static constexpr auto GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
			static constexpr auto GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
			static constexpr auto GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
			static constexpr auto GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
			static constexpr auto GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
			static constexpr auto GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
			static constexpr auto GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
			static constexpr auto GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
			static constexpr auto GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
			static constexpr auto GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
			static constexpr auto GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
			static constexpr auto GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
			static constexpr auto GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
			static constexpr auto GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
			static constexpr auto GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
			static constexpr auto GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
			static constexpr auto GL_COMPRESSED_RGB8_ETC2 = 0x9274;
			static constexpr auto GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
			static constexpr auto GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
			static constexpr auto GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
			static constexpr auto GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
			static constexpr auto GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
			static constexpr auto GL_COMPRESSED_R11_EAC = 0x9270;
			static constexpr auto GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
			static constexpr auto GL_COMPRESSED_RG11_EAC = 0x9272;
			static constexpr auto GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
			static constexpr auto GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
			static constexpr auto GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
			static constexpr auto GL_MAX_ELEMENT_INDEX = 0x8D6B;
			static constexpr auto GL_COMPUTE_SHADER = 0x91B9;
			static constexpr auto GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
			static constexpr auto GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
			static constexpr auto GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
			static constexpr auto GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
			static constexpr auto GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
			static constexpr auto GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
			static constexpr auto GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
			static constexpr auto GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
			static constexpr auto GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
			static constexpr auto GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
			static constexpr auto GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
			static constexpr auto GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
			static constexpr auto GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
			static constexpr auto GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
			static constexpr auto GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
			static constexpr auto GL_COMPUTE_SHADER_BIT = 0x00000020;
			static constexpr auto GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
			static constexpr auto GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
			static constexpr auto GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
			static constexpr auto GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
			static constexpr auto GL_DEBUG_SOURCE_API = 0x8246;
			static constexpr auto GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
			static constexpr auto GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
			static constexpr auto GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
			static constexpr auto GL_DEBUG_SOURCE_APPLICATION = 0x824A;
			static constexpr auto GL_DEBUG_SOURCE_OTHER = 0x824B;
			static constexpr auto GL_DEBUG_TYPE_ERROR = 0x824C;
			static constexpr auto GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
			static constexpr auto GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
			static constexpr auto GL_DEBUG_TYPE_PORTABILITY = 0x824F;
			static constexpr auto GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
			static constexpr auto GL_DEBUG_TYPE_OTHER = 0x8251;
			static constexpr auto GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
			static constexpr auto GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
			static constexpr auto GL_DEBUG_LOGGED_MESSAGES = 0x9145;
			static constexpr auto GL_DEBUG_SEVERITY_HIGH = 0x9146;
			static constexpr auto GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
			static constexpr auto GL_DEBUG_SEVERITY_LOW = 0x9148;
			static constexpr auto GL_DEBUG_TYPE_MARKER = 0x8268;
			static constexpr auto GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
			static constexpr auto GL_DEBUG_TYPE_POP_GROUP = 0x826A;
			static constexpr auto GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
			static constexpr auto GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
			static constexpr auto GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
			static constexpr auto GL_BUFFER = 0x82E0;
			static constexpr auto GL_SHADER = 0x82E1;
			static constexpr auto GL_PROGRAM = 0x82E2;
			static constexpr auto GL_QUERY = 0x82E3;
			static constexpr auto GL_PROGRAM_PIPELINE = 0x82E4;
			static constexpr auto GL_SAMPLER = 0x82E6;
			static constexpr auto GL_MAX_LABEL_LENGTH = 0x82E8;
			static constexpr auto GL_DEBUG_OUTPUT = 0x92E0;
			static constexpr auto GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
			static constexpr auto GL_MAX_UNIFORM_LOCATIONS = 0x826E;
			static constexpr auto GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
			static constexpr auto GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
			static constexpr auto GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
			static constexpr auto GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
			static constexpr auto GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
			static constexpr auto GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
			static constexpr auto GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
			static constexpr auto GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
			static constexpr auto GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
			static constexpr auto GL_INTERNALFORMAT_SUPPORTED = 0x826F;
			static constexpr auto GL_INTERNALFORMAT_PREFERRED = 0x8270;
			static constexpr auto GL_INTERNALFORMAT_RED_SIZE = 0x8271;
			static constexpr auto GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
			static constexpr auto GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
			static constexpr auto GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
			static constexpr auto GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
			static constexpr auto GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
			static constexpr auto GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
			static constexpr auto GL_INTERNALFORMAT_RED_TYPE = 0x8278;
			static constexpr auto GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
			static constexpr auto GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
			static constexpr auto GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
			static constexpr auto GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
			static constexpr auto GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
			static constexpr auto GL_MAX_WIDTH = 0x827E;
			static constexpr auto GL_MAX_HEIGHT = 0x827F;
			static constexpr auto GL_MAX_DEPTH = 0x8280;
			static constexpr auto GL_MAX_LAYERS = 0x8281;
			static constexpr auto GL_MAX_COMBINED_DIMENSIONS = 0x8282;
			static constexpr auto GL_COLOR_COMPONENTS = 0x8283;
			static constexpr auto GL_DEPTH_COMPONENTS = 0x8284;
			static constexpr auto GL_STENCIL_COMPONENTS = 0x8285;
			static constexpr auto GL_COLOR_RENDERABLE = 0x8286;
			static constexpr auto GL_DEPTH_RENDERABLE = 0x8287;
			static constexpr auto GL_STENCIL_RENDERABLE = 0x8288;
			static constexpr auto GL_FRAMEBUFFER_RENDERABLE = 0x8289;
			static constexpr auto GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
			static constexpr auto GL_FRAMEBUFFER_BLEND = 0x828B;
			static constexpr auto GL_READ_PIXELS = 0x828C;
			static constexpr auto GL_READ_PIXELS_FORMAT = 0x828D;
			static constexpr auto GL_READ_PIXELS_TYPE = 0x828E;
			static constexpr auto GL_TEXTURE_IMAGE_FORMAT = 0x828F;
			static constexpr auto GL_TEXTURE_IMAGE_TYPE = 0x8290;
			static constexpr auto GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
			static constexpr auto GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
			static constexpr auto GL_MIPMAP = 0x8293;
			static constexpr auto GL_MANUAL_GENERATE_MIPMAP = 0x8294;
			static constexpr auto GL_AUTO_GENERATE_MIPMAP = 0x8295;
			static constexpr auto GL_COLOR_ENCODING = 0x8296;
			static constexpr auto GL_SRGB_READ = 0x8297;
			static constexpr auto GL_SRGB_WRITE = 0x8298;
			static constexpr auto GL_FILTER = 0x829A;
			static constexpr auto GL_VERTEX_TEXTURE = 0x829B;
			static constexpr auto GL_TESS_CONTROL_TEXTURE = 0x829C;
			static constexpr auto GL_TESS_EVALUATION_TEXTURE = 0x829D;
			static constexpr auto GL_GEOMETRY_TEXTURE = 0x829E;
			static constexpr auto GL_FRAGMENT_TEXTURE = 0x829F;
			static constexpr auto GL_COMPUTE_TEXTURE = 0x82A0;
			static constexpr auto GL_TEXTURE_SHADOW = 0x82A1;
			static constexpr auto GL_TEXTURE_GATHER = 0x82A2;
			static constexpr auto GL_TEXTURE_GATHER_SHADOW = 0x82A3;
			static constexpr auto GL_SHADER_IMAGE_LOAD = 0x82A4;
			static constexpr auto GL_SHADER_IMAGE_STORE = 0x82A5;
			static constexpr auto GL_SHADER_IMAGE_ATOMIC = 0x82A6;
			static constexpr auto GL_IMAGE_TEXEL_SIZE = 0x82A7;
			static constexpr auto GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
			static constexpr auto GL_IMAGE_PIXEL_FORMAT = 0x82A9;
			static constexpr auto GL_IMAGE_PIXEL_TYPE = 0x82AA;
			static constexpr auto GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
			static constexpr auto GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
			static constexpr auto GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
			static constexpr auto GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
			static constexpr auto GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
			static constexpr auto GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
			static constexpr auto GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
			static constexpr auto GL_CLEAR_BUFFER = 0x82B4;
			static constexpr auto GL_TEXTURE_VIEW = 0x82B5;
			static constexpr auto GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
			static constexpr auto GL_FULL_SUPPORT = 0x82B7;
			static constexpr auto GL_CAVEAT_SUPPORT = 0x82B8;
			static constexpr auto GL_IMAGE_CLASS_4_X_32 = 0x82B9;
			static constexpr auto GL_IMAGE_CLASS_2_X_32 = 0x82BA;
			static constexpr auto GL_IMAGE_CLASS_1_X_32 = 0x82BB;
			static constexpr auto GL_IMAGE_CLASS_4_X_16 = 0x82BC;
			static constexpr auto GL_IMAGE_CLASS_2_X_16 = 0x82BD;
			static constexpr auto GL_IMAGE_CLASS_1_X_16 = 0x82BE;
			static constexpr auto GL_IMAGE_CLASS_4_X_8 = 0x82BF;
			static constexpr auto GL_IMAGE_CLASS_2_X_8 = 0x82C0;
			static constexpr auto GL_IMAGE_CLASS_1_X_8 = 0x82C1;
			static constexpr auto GL_IMAGE_CLASS_11_11_10 = 0x82C2;
			static constexpr auto GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
			static constexpr auto GL_VIEW_CLASS_128_BITS = 0x82C4;
			static constexpr auto GL_VIEW_CLASS_96_BITS = 0x82C5;
			static constexpr auto GL_VIEW_CLASS_64_BITS = 0x82C6;
			static constexpr auto GL_VIEW_CLASS_48_BITS = 0x82C7;
			static constexpr auto GL_VIEW_CLASS_32_BITS = 0x82C8;
			static constexpr auto GL_VIEW_CLASS_24_BITS = 0x82C9;
			static constexpr auto GL_VIEW_CLASS_16_BITS = 0x82CA;
			static constexpr auto GL_VIEW_CLASS_8_BITS = 0x82CB;
			static constexpr auto GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
			static constexpr auto GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
			static constexpr auto GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
			static constexpr auto GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
			static constexpr auto GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
			static constexpr auto GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
			static constexpr auto GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
			static constexpr auto GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
			static constexpr auto GL_UNIFORM = 0x92E1;
			static constexpr auto GL_UNIFORM_BLOCK = 0x92E2;
			static constexpr auto GL_PROGRAM_INPUT = 0x92E3;
			static constexpr auto GL_PROGRAM_OUTPUT = 0x92E4;
			static constexpr auto GL_BUFFER_VARIABLE = 0x92E5;
			static constexpr auto GL_SHADER_STORAGE_BLOCK = 0x92E6;
			static constexpr auto GL_VERTEX_SUBROUTINE = 0x92E8;
			static constexpr auto GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
			static constexpr auto GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
			static constexpr auto GL_GEOMETRY_SUBROUTINE = 0x92EB;
			static constexpr auto GL_FRAGMENT_SUBROUTINE = 0x92EC;
			static constexpr auto GL_COMPUTE_SUBROUTINE = 0x92ED;
			static constexpr auto GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
			static constexpr auto GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
			static constexpr auto GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
			static constexpr auto GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
			static constexpr auto GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
			static constexpr auto GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
			static constexpr auto GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
			static constexpr auto GL_ACTIVE_RESOURCES = 0x92F5;
			static constexpr auto GL_MAX_NAME_LENGTH = 0x92F6;
			static constexpr auto GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
			static constexpr auto GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
			static constexpr auto GL_NAME_LENGTH = 0x92F9;
			static constexpr auto GL_TYPE = 0x92FA;
			static constexpr auto GL_ARRAY_SIZE = 0x92FB;
			static constexpr auto GL_OFFSET = 0x92FC;
			static constexpr auto GL_BLOCK_INDEX = 0x92FD;
			static constexpr auto GL_ARRAY_STRIDE = 0x92FE;
			static constexpr auto GL_MATRIX_STRIDE = 0x92FF;
			static constexpr auto GL_IS_ROW_MAJOR = 0x9300;
			static constexpr auto GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
			static constexpr auto GL_BUFFER_BINDING = 0x9302;
			static constexpr auto GL_BUFFER_DATA_SIZE = 0x9303;
			static constexpr auto GL_NUM_ACTIVE_VARIABLES = 0x9304;
			static constexpr auto GL_ACTIVE_VARIABLES = 0x9305;
			static constexpr auto GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
			static constexpr auto GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
			static constexpr auto GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
			static constexpr auto GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
			static constexpr auto GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
			static constexpr auto GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
			static constexpr auto GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
			static constexpr auto GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
			static constexpr auto GL_LOCATION = 0x930E;
			static constexpr auto GL_LOCATION_INDEX = 0x930F;
			static constexpr auto GL_IS_PER_PATCH = 0x92E7;
			static constexpr auto GL_SHADER_STORAGE_BUFFER = 0x90D2;
			static constexpr auto GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
			static constexpr auto GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
			static constexpr auto GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
			static constexpr auto GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
			static constexpr auto GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
			static constexpr auto GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
			static constexpr auto GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
			static constexpr auto GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
			static constexpr auto GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
			static constexpr auto GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
			static constexpr auto GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
			static constexpr auto GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
			static constexpr auto GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
			static constexpr auto GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
			static constexpr auto GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
			static constexpr auto GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
			static constexpr auto GL_TEXTURE_BUFFER_OFFSET = 0x919D;
			static constexpr auto GL_TEXTURE_BUFFER_SIZE = 0x919E;
			static constexpr auto GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
			static constexpr auto GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
			static constexpr auto GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
			static constexpr auto GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
			static constexpr auto GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
			static constexpr auto GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
			static constexpr auto GL_VERTEX_ATTRIB_BINDING = 0x82D4;
			static constexpr auto GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
			static constexpr auto GL_VERTEX_BINDING_DIVISOR = 0x82D6;
			static constexpr auto GL_VERTEX_BINDING_OFFSET = 0x82D7;
			static constexpr auto GL_VERTEX_BINDING_STRIDE = 0x82D8;
			static constexpr auto GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
			static constexpr auto GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
			static constexpr auto GL_VERTEX_BINDING_BUFFER = 0x8F4F;
			static constexpr auto GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
			static constexpr auto GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
			static constexpr auto GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
			static constexpr auto GL_MAP_PERSISTENT_BIT = 0x0040;
			static constexpr auto GL_MAP_COHERENT_BIT = 0x0080;
			static constexpr auto GL_DYNAMIC_STORAGE_BIT = 0x0100;
			static constexpr auto GL_CLIENT_STORAGE_BIT = 0x0200;
			static constexpr auto GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
			static constexpr auto GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
			static constexpr auto GL_BUFFER_STORAGE_FLAGS = 0x8220;
			static constexpr auto GL_CLEAR_TEXTURE = 0x9365;
			static constexpr auto GL_LOCATION_COMPONENT = 0x934A;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
			static constexpr auto GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
			static constexpr auto GL_QUERY_BUFFER = 0x9192;
			static constexpr auto GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
			static constexpr auto GL_QUERY_BUFFER_BINDING = 0x9193;
			static constexpr auto GL_QUERY_RESULT_NO_WAIT = 0x9194;
			static constexpr auto GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
			/*	=============
					functions
					============= */
		public:
			function<void(enum_t)> CullFace = nullptr;
			function<void(enum_t)> FrontFace = nullptr;
			function<void(enum_t, enum_t)> Hint = nullptr;
			function<void(float32_t)> LineWidth = nullptr;
			function<void(float32_t)> PointSize = nullptr;
			function<void(enum_t, enum_t)> PolygonMode = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Scissor = nullptr;
			function<void(enum_t, enum_t, float32_t)> TexParameterf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> TexParameterfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> TexParameteri = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> TexParameteriv = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexImage1D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexImage2D = nullptr;
			function<void(enum_t)> DrawBuffer = nullptr;
			function<void(bitfield_t)> Clear = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> ClearColor = nullptr;
			function<void(std::int32_t)> ClearStencil = nullptr;
			function<void(float64_t)> ClearDepth = nullptr;
			function<void(std::uint32_t)> StencilMask = nullptr;
			function<void(boolean_t, boolean_t, boolean_t, boolean_t)> ColorMask = nullptr;
			function<void(boolean_t)> DepthMask = nullptr;
			function<void(enum_t)> Disable = nullptr;
			function<void(enum_t)> Enable = nullptr;
			function<void()> Finish = nullptr;
			function<void()> Flush = nullptr;
			function<void(enum_t, enum_t)> BlendFunc = nullptr;
			function<void(enum_t)> LogicOp = nullptr;
			function<void(enum_t, std::int32_t, std::uint32_t)> StencilFunc = nullptr;
			function<void(enum_t, enum_t, enum_t)> StencilOp = nullptr;
			function<void(enum_t)> DepthFunc = nullptr;
			function<void(enum_t, float32_t)> PixelStoref = nullptr;
			function<void(enum_t, std::int32_t)> PixelStorei = nullptr;
			function<void(enum_t)> ReadBuffer = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, void *)> ReadPixels = nullptr;
			function<void(enum_t, boolean_t *)> GetBooleanv = nullptr;
			function<void(enum_t, float64_t *)> GetDoublev = nullptr;
			function<enum_t()> GetError = nullptr;
			function<void(enum_t, float32_t *)> GetFloatv = nullptr;
			function<void(enum_t, std::int32_t *)> GetIntegerv = nullptr;
			function<const std::uint8_t *(enum_t)> GetString = nullptr;
			function<void(enum_t, std::int32_t, enum_t, enum_t, void *)> GetTexImage = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetTexParameterfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetTexParameteriv = nullptr;
			function<void(enum_t, std::int32_t, enum_t, float32_t *)> GetTexLevelParameterfv = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t *)> GetTexLevelParameteriv = nullptr;
			function<boolean_t(enum_t)> IsEnabled = nullptr;
			function<void(float64_t, float64_t)> DepthRange = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Viewport = nullptr;
			function<void(std::uint32_t, enum_t)> NewList = nullptr;
			function<void()> EndList = nullptr;
			function<void(std::uint32_t)> CallList = nullptr;
			function<void(std::int32_t, enum_t, const void *)> CallLists = nullptr;
			function<void(std::uint32_t, std::int32_t)> DeleteLists = nullptr;
			function<std::uint32_t(std::int32_t)> GenLists = nullptr;
			function<void(std::uint32_t)> ListBase = nullptr;
			function<void(enum_t)> Begin = nullptr;
			function<void(std::int32_t, std::int32_t, float32_t, float32_t, float32_t, float32_t, const std::uint8_t *)> Bitmap = nullptr;
			function<void(std::int8_t, std::int8_t, std::int8_t)> Color3b = nullptr;
			function<void(const std::int8_t *)> Color3bv = nullptr;
			function<void(float64_t, float64_t, float64_t)> Color3d = nullptr;
			function<void(const float64_t *)> Color3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> Color3f = nullptr;
			function<void(const float32_t *)> Color3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> Color3i = nullptr;
			function<void(const std::int32_t *)> Color3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> Color3s = nullptr;
			function<void(const std::int16_t *)> Color3sv = nullptr;
			function<void(std::uint8_t, std::uint8_t, std::uint8_t)> Color3ub = nullptr;
			function<void(const std::uint8_t *)> Color3ubv = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t)> Color3ui = nullptr;
			function<void(const std::uint32_t *)> Color3uiv = nullptr;
			function<void(std::uint16_t, std::uint16_t, std::uint16_t)> Color3us = nullptr;
			function<void(const std::uint16_t *)> Color3usv = nullptr;
			function<void(std::int8_t, std::int8_t, std::int8_t, std::int8_t)> Color4b = nullptr;
			function<void(const std::int8_t *)> Color4bv = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> Color4d = nullptr;
			function<void(const float64_t *)> Color4dv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> Color4f = nullptr;
			function<void(const float32_t *)> Color4fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Color4i = nullptr;
			function<void(const std::int32_t *)> Color4iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t, std::int16_t)> Color4s = nullptr;
			function<void(const std::int16_t *)> Color4sv = nullptr;
			function<void(std::uint8_t, std::uint8_t, std::uint8_t, std::uint8_t)> Color4ub = nullptr;
			function<void(const std::uint8_t *)> Color4ubv = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t)> Color4ui = nullptr;
			function<void(const std::uint32_t *)> Color4uiv = nullptr;
			function<void(std::uint16_t, std::uint16_t, std::uint16_t, std::uint16_t)> Color4us = nullptr;
			function<void(const std::uint16_t *)> Color4usv = nullptr;
			function<void(boolean_t)> EdgeFlag = nullptr;
			function<void(const boolean_t *)> EdgeFlagv = nullptr;
			function<void()> End = nullptr;
			function<void(float64_t)> Indexd = nullptr;
			function<void(const float64_t *)> Indexdv = nullptr;
			function<void(float32_t)> Indexf = nullptr;
			function<void(const float32_t *)> Indexfv = nullptr;
			function<void(std::int32_t)> Indexi = nullptr;
			function<void(const std::int32_t *)> Indexiv = nullptr;
			function<void(std::int16_t)> Indexs = nullptr;
			function<void(const std::int16_t *)> Indexsv = nullptr;
			function<void(std::int8_t, std::int8_t, std::int8_t)> Normal3b = nullptr;
			function<void(const std::int8_t *)> Normal3bv = nullptr;
			function<void(float64_t, float64_t, float64_t)> Normal3d = nullptr;
			function<void(const float64_t *)> Normal3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> Normal3f = nullptr;
			function<void(const float32_t *)> Normal3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> Normal3i = nullptr;
			function<void(const std::int32_t *)> Normal3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> Normal3s = nullptr;
			function<void(const std::int16_t *)> Normal3sv = nullptr;
			function<void(float64_t, float64_t)> RasterPos2d = nullptr;
			function<void(const float64_t *)> RasterPos2dv = nullptr;
			function<void(float32_t, float32_t)> RasterPos2f = nullptr;
			function<void(const float32_t *)> RasterPos2fv = nullptr;
			function<void(std::int32_t, std::int32_t)> RasterPos2i = nullptr;
			function<void(const std::int32_t *)> RasterPos2iv = nullptr;
			function<void(std::int16_t, std::int16_t)> RasterPos2s = nullptr;
			function<void(const std::int16_t *)> RasterPos2sv = nullptr;
			function<void(float64_t, float64_t, float64_t)> RasterPos3d = nullptr;
			function<void(const float64_t *)> RasterPos3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> RasterPos3f = nullptr;
			function<void(const float32_t *)> RasterPos3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> RasterPos3i = nullptr;
			function<void(const std::int32_t *)> RasterPos3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> RasterPos3s = nullptr;
			function<void(const std::int16_t *)> RasterPos3sv = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> RasterPos4d = nullptr;
			function<void(const float64_t *)> RasterPos4dv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> RasterPos4f = nullptr;
			function<void(const float32_t *)> RasterPos4fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> RasterPos4i = nullptr;
			function<void(const std::int32_t *)> RasterPos4iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t, std::int16_t)> RasterPos4s = nullptr;
			function<void(const std::int16_t *)> RasterPos4sv = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> Rectd = nullptr;
			function<void(const float64_t *, const float64_t *)> Rectdv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> Rectf = nullptr;
			function<void(const float32_t *, const float32_t *)> Rectfv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Recti = nullptr;
			function<void(const std::int32_t *, const std::int32_t *)> Rectiv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t, std::int16_t)> Rects = nullptr;
			function<void(const std::int16_t *, const std::int16_t *)> Rectsv = nullptr;
			function<void(float64_t)> TexCoord1d = nullptr;
			function<void(const float64_t *)> TexCoord1dv = nullptr;
			function<void(float32_t)> TexCoord1f = nullptr;
			function<void(const float32_t *)> TexCoord1fv = nullptr;
			function<void(std::int32_t)> TexCoord1i = nullptr;
			function<void(const std::int32_t *)> TexCoord1iv = nullptr;
			function<void(std::int16_t)> TexCoord1s = nullptr;
			function<void(const std::int16_t *)> TexCoord1sv = nullptr;
			function<void(float64_t, float64_t)> TexCoord2d = nullptr;
			function<void(const float64_t *)> TexCoord2dv = nullptr;
			function<void(float32_t, float32_t)> TexCoord2f = nullptr;
			function<void(const float32_t *)> TexCoord2fv = nullptr;
			function<void(std::int32_t, std::int32_t)> TexCoord2i = nullptr;
			function<void(const std::int32_t *)> TexCoord2iv = nullptr;
			function<void(std::int16_t, std::int16_t)> TexCoord2s = nullptr;
			function<void(const std::int16_t *)> TexCoord2sv = nullptr;
			function<void(float64_t, float64_t, float64_t)> TexCoord3d = nullptr;
			function<void(const float64_t *)> TexCoord3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> TexCoord3f = nullptr;
			function<void(const float32_t *)> TexCoord3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> TexCoord3i = nullptr;
			function<void(const std::int32_t *)> TexCoord3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> TexCoord3s = nullptr;
			function<void(const std::int16_t *)> TexCoord3sv = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> TexCoord4d = nullptr;
			function<void(const float64_t *)> TexCoord4dv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> TexCoord4f = nullptr;
			function<void(const float32_t *)> TexCoord4fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> TexCoord4i = nullptr;
			function<void(const std::int32_t *)> TexCoord4iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t, std::int16_t)> TexCoord4s = nullptr;
			function<void(const std::int16_t *)> TexCoord4sv = nullptr;
			function<void(float64_t, float64_t)> Vertex2d = nullptr;
			function<void(const float64_t *)> Vertex2dv = nullptr;
			function<void(float32_t, float32_t)> Vertex2f = nullptr;
			function<void(const float32_t *)> Vertex2fv = nullptr;
			function<void(std::int32_t, std::int32_t)> Vertex2i = nullptr;
			function<void(const std::int32_t *)> Vertex2iv = nullptr;
			function<void(std::int16_t, std::int16_t)> Vertex2s = nullptr;
			function<void(const std::int16_t *)> Vertex2sv = nullptr;
			function<void(float64_t, float64_t, float64_t)> Vertex3d = nullptr;
			function<void(const float64_t *)> Vertex3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> Vertex3f = nullptr;
			function<void(const float32_t *)> Vertex3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> Vertex3i = nullptr;
			function<void(const std::int32_t *)> Vertex3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> Vertex3s = nullptr;
			function<void(const std::int16_t *)> Vertex3sv = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> Vertex4d = nullptr;
			function<void(const float64_t *)> Vertex4dv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> Vertex4f = nullptr;
			function<void(const float32_t *)> Vertex4fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Vertex4i = nullptr;
			function<void(const std::int32_t *)> Vertex4iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t, std::int16_t)> Vertex4s = nullptr;
			function<void(const std::int16_t *)> Vertex4sv = nullptr;
			function<void(enum_t, const float64_t *)> ClipPlane = nullptr;
			function<void(enum_t, enum_t)> ColorMaterial = nullptr;
			function<void(enum_t, float32_t)> Fogf = nullptr;
			function<void(enum_t, const float32_t *)> Fogfv = nullptr;
			function<void(enum_t, std::int32_t)> Fogi = nullptr;
			function<void(enum_t, const std::int32_t *)> Fogiv = nullptr;
			function<void(enum_t, enum_t, float32_t)> Lightf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> Lightfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> Lighti = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> Lightiv = nullptr;
			function<void(enum_t, float32_t)> LightModelf = nullptr;
			function<void(enum_t, const float32_t *)> LightModelfv = nullptr;
			function<void(enum_t, std::int32_t)> LightModeli = nullptr;
			function<void(enum_t, const std::int32_t *)> LightModeliv = nullptr;
			function<void(std::int32_t, std::uint16_t)> LineStipple = nullptr;
			function<void(enum_t, enum_t, float32_t)> Materialf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> Materialfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> Materiali = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> Materialiv = nullptr;
			function<void(const std::uint8_t *)> PolygonStipple = nullptr;
			function<void(enum_t)> ShadeModel = nullptr;
			function<void(enum_t, enum_t, float32_t)> TexEnvf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> TexEnvfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> TexEnvi = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> TexEnviv = nullptr;
			function<void(enum_t, enum_t, float64_t)> TexGend = nullptr;
			function<void(enum_t, enum_t, const float64_t *)> TexGendv = nullptr;
			function<void(enum_t, enum_t, float32_t)> TexGenf = nullptr;
			function<void(enum_t, enum_t, const float32_t *)> TexGenfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> TexGeni = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> TexGeniv = nullptr;
			function<void(std::int32_t, enum_t, float32_t *)> FeedbackBuffer = nullptr;
			function<void(std::int32_t, std::uint32_t *)> SelectBuffer = nullptr;
			function<std::int32_t(enum_t)> RenderMode = nullptr;
			function<void()> InitNames = nullptr;
			function<void(std::uint32_t)> LoadName = nullptr;
			function<void(float32_t)> PassThrough = nullptr;
			function<void()> PopName = nullptr;
			function<void(std::uint32_t)> PushName = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> ClearAccum = nullptr;
			function<void(float32_t)> ClearIndex = nullptr;
			function<void(std::uint32_t)> IndexMask = nullptr;
			function<void(enum_t, float32_t)> Accum = nullptr;
			function<void()> PopAttrib = nullptr;
			function<void(bitfield_t)> PushAttrib = nullptr;
			function<void(enum_t, float64_t, float64_t, std::int32_t, std::int32_t, const float64_t *)> Map1d = nullptr;
			function<void(enum_t, float32_t, float32_t, std::int32_t, std::int32_t, const float32_t *)> Map1f = nullptr;
			function<void(enum_t, float64_t, float64_t, std::int32_t, std::int32_t, float64_t, float64_t, std::int32_t, std::int32_t, const float64_t *)> Map2d = nullptr;
			function<void(enum_t, float32_t, float32_t, std::int32_t, std::int32_t, float32_t, float32_t, std::int32_t, std::int32_t, const float32_t *)> Map2f = nullptr;
			function<void(std::int32_t, float64_t, float64_t)> MapGrid1d = nullptr;
			function<void(std::int32_t, float32_t, float32_t)> MapGrid1f = nullptr;
			function<void(std::int32_t, float64_t, float64_t, std::int32_t, float64_t, float64_t)> MapGrid2d = nullptr;
			function<void(std::int32_t, float32_t, float32_t, std::int32_t, float32_t, float32_t)> MapGrid2f = nullptr;
			function<void(float64_t)> EvalCoord1d = nullptr;
			function<void(const float64_t *)> EvalCoord1dv = nullptr;
			function<void(float32_t)> EvalCoord1f = nullptr;
			function<void(const float32_t *)> EvalCoord1fv = nullptr;
			function<void(float64_t, float64_t)> EvalCoord2d = nullptr;
			function<void(const float64_t *)> EvalCoord2dv = nullptr;
			function<void(float32_t, float32_t)> EvalCoord2f = nullptr;
			function<void(const float32_t *)> EvalCoord2fv = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t)> EvalMesh1 = nullptr;
			function<void(std::int32_t)> EvalPoint1 = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> EvalMesh2 = nullptr;
			function<void(std::int32_t, std::int32_t)> EvalPoint2 = nullptr;
			function<void(enum_t, float32_t)> AlphaFunc = nullptr;
			function<void(float32_t, float32_t)> PixelZoom = nullptr;
			function<void(enum_t, float32_t)> PixelTransferf = nullptr;
			function<void(enum_t, std::int32_t)> PixelTransferi = nullptr;
			function<void(enum_t, std::int32_t, const float32_t *)> PixelMapfv = nullptr;
			function<void(enum_t, std::int32_t, const std::uint32_t *)> PixelMapuiv = nullptr;
			function<void(enum_t, std::int32_t, const std::uint16_t *)> PixelMapusv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t)> CopyPixels = nullptr;
			function<void(std::int32_t, std::int32_t, enum_t, enum_t, const void *)> DrawPixels = nullptr;
			function<void(enum_t, float64_t *)> GetClipPlane = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetLightfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetLightiv = nullptr;
			function<void(enum_t, enum_t, float64_t *)> GetMapdv = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetMapfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetMapiv = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetMaterialfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetMaterialiv = nullptr;
			function<void(enum_t, float32_t *)> GetPixelMapfv = nullptr;
			function<void(enum_t, std::uint32_t *)> GetPixelMapuiv = nullptr;
			function<void(enum_t, std::uint16_t *)> GetPixelMapusv = nullptr;
			function<void(std::uint8_t *)> GetPolygonStipple = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetTexEnvfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetTexEnviv = nullptr;
			function<void(enum_t, enum_t, float64_t *)> GetTexGendv = nullptr;
			function<void(enum_t, enum_t, float32_t *)> GetTexGenfv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetTexGeniv = nullptr;
			function<boolean_t(std::uint32_t)> IsList = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t, float64_t, float64_t)> Frustum = nullptr;
			function<void()> LoadIdentity = nullptr;
			function<void(const float32_t *)> LoadMatrixf = nullptr;
			function<void(const float64_t *)> LoadMatrixd = nullptr;
			function<void(enum_t)> MatrixMode = nullptr;
			function<void(const float32_t *)> MultMatrixf = nullptr;
			function<void(const float64_t *)> MultMatrixd = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t, float64_t, float64_t)> Ortho = nullptr;
			function<void()> PopMatrix = nullptr;
			function<void()> PushMatrix = nullptr;
			function<void(float64_t, float64_t, float64_t, float64_t)> Rotated = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> Rotatef = nullptr;
			function<void(float64_t, float64_t, float64_t)> Scaled = nullptr;
			function<void(float32_t, float32_t, float32_t)> Scalef = nullptr;
			function<void(float64_t, float64_t, float64_t)> Translated = nullptr;
			function<void(float32_t, float32_t, float32_t)> Translatef = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t)> DrawArrays = nullptr;
			function<void(enum_t, std::int32_t, enum_t, const void *)> DrawElements = nullptr;
			function<void(enum_t, void **)> GetPointerv = nullptr;
			function<void(float32_t, float32_t)> PolygonOffset = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> CopyTexImage1D = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> CopyTexImage2D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> CopyTexSubImage1D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> CopyTexSubImage2D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexSubImage1D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexSubImage2D = nullptr;
			function<void(enum_t, std::uint32_t)> BindTexture = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteTextures = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenTextures = nullptr;
			function<boolean_t(std::uint32_t)> IsTexture = nullptr;
			function<void(std::int32_t)> ArrayElement = nullptr;
			function<void(std::int32_t, enum_t, std::int32_t, const void *)> ColorPointer = nullptr;
			function<void(enum_t)> DisableClientState = nullptr;
			function<void(std::int32_t, const void *)> EdgeFlagPointer = nullptr;
			function<void(enum_t)> EnableClientState = nullptr;
			function<void(enum_t, std::int32_t, const void *)> IndexPointer = nullptr;
			function<void(enum_t, std::int32_t, const void *)> InterleavedArrays = nullptr;
			function<void(enum_t, std::int32_t, const void *)> NormalPointer = nullptr;
			function<void(std::int32_t, enum_t, std::int32_t, const void *)> TexCoordPointer = nullptr;
			function<void(std::int32_t, enum_t, std::int32_t, const void *)> VertexPointer = nullptr;
			function<boolean_t(std::int32_t, const std::uint32_t *, boolean_t *)> AreTexturesResident = nullptr;
			function<void(std::int32_t, const std::uint32_t *, const float32_t *)> PrioritizeTextures = nullptr;
			function<void(std::uint8_t)> Indexub = nullptr;
			function<void(const std::uint8_t *)> Indexubv = nullptr;
			function<void()> PopClientAttrib = nullptr;
			function<void(bitfield_t)> PushClientAttrib = nullptr;
			function<void(enum_t, std::uint32_t, std::uint32_t, std::int32_t, enum_t, const void *)> DrawRangeElements = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexImage3D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> TexSubImage3D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> CopyTexSubImage3D = nullptr;
			function<void(enum_t)> ActiveTexture = nullptr;
			function<void(float32_t, boolean_t)> SampleCoverage = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, const void *)> CompressedTexImage3D = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, const void *)> CompressedTexImage2D = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, const void *)> CompressedTexImage1D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, std::int32_t, const void *)> CompressedTexSubImage3D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, std::int32_t, const void *)> CompressedTexSubImage2D = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, enum_t, std::int32_t, const void *)> CompressedTexSubImage1D = nullptr;
			function<void(enum_t, std::int32_t, void *)> GetCompressedTexImage = nullptr;
			function<void(enum_t)> ClientActiveTexture = nullptr;
			function<void(enum_t, float64_t)> MultiTexCoord1d = nullptr;
			function<void(enum_t, const float64_t *)> MultiTexCoord1dv = nullptr;
			function<void(enum_t, float32_t)> MultiTexCoord1f = nullptr;
			function<void(enum_t, const float32_t *)> MultiTexCoord1fv = nullptr;
			function<void(enum_t, std::int32_t)> MultiTexCoord1i = nullptr;
			function<void(enum_t, const std::int32_t *)> MultiTexCoord1iv = nullptr;
			function<void(enum_t, std::int16_t)> MultiTexCoord1s = nullptr;
			function<void(enum_t, const std::int16_t *)> MultiTexCoord1sv = nullptr;
			function<void(enum_t, float64_t, float64_t)> MultiTexCoord2d = nullptr;
			function<void(enum_t, const float64_t *)> MultiTexCoord2dv = nullptr;
			function<void(enum_t, float32_t, float32_t)> MultiTexCoord2f = nullptr;
			function<void(enum_t, const float32_t *)> MultiTexCoord2fv = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t)> MultiTexCoord2i = nullptr;
			function<void(enum_t, const std::int32_t *)> MultiTexCoord2iv = nullptr;
			function<void(enum_t, std::int16_t, std::int16_t)> MultiTexCoord2s = nullptr;
			function<void(enum_t, const std::int16_t *)> MultiTexCoord2sv = nullptr;
			function<void(enum_t, float64_t, float64_t, float64_t)> MultiTexCoord3d = nullptr;
			function<void(enum_t, const float64_t *)> MultiTexCoord3dv = nullptr;
			function<void(enum_t, float32_t, float32_t, float32_t)> MultiTexCoord3f = nullptr;
			function<void(enum_t, const float32_t *)> MultiTexCoord3fv = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t)> MultiTexCoord3i = nullptr;
			function<void(enum_t, const std::int32_t *)> MultiTexCoord3iv = nullptr;
			function<void(enum_t, std::int16_t, std::int16_t, std::int16_t)> MultiTexCoord3s = nullptr;
			function<void(enum_t, const std::int16_t *)> MultiTexCoord3sv = nullptr;
			function<void(enum_t, float64_t, float64_t, float64_t, float64_t)> MultiTexCoord4d = nullptr;
			function<void(enum_t, const float64_t *)> MultiTexCoord4dv = nullptr;
			function<void(enum_t, float32_t, float32_t, float32_t, float32_t)> MultiTexCoord4f = nullptr;
			function<void(enum_t, const float32_t *)> MultiTexCoord4fv = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> MultiTexCoord4i = nullptr;
			function<void(enum_t, const std::int32_t *)> MultiTexCoord4iv = nullptr;
			function<void(enum_t, std::int16_t, std::int16_t, std::int16_t, std::int16_t)> MultiTexCoord4s = nullptr;
			function<void(enum_t, const std::int16_t *)> MultiTexCoord4sv = nullptr;
			function<void(const float32_t *)> LoadTransposeMatrixf = nullptr;
			function<void(const float64_t *)> LoadTransposeMatrixd = nullptr;
			function<void(const float32_t *)> MultTransposeMatrixf = nullptr;
			function<void(const float64_t *)> MultTransposeMatrixd = nullptr;
			function<void(enum_t, enum_t, enum_t, enum_t)> BlendFuncSeparate = nullptr;
			function<void(enum_t, const std::int32_t *, const std::int32_t *, std::int32_t)> MultiDrawArrays = nullptr;
			function<void(enum_t, const std::int32_t *, enum_t, const void *const*, std::int32_t)> MultiDrawElements = nullptr;
			function<void(enum_t, float32_t)> PointParameterf = nullptr;
			function<void(enum_t, const float32_t *)> PointParameterfv = nullptr;
			function<void(enum_t, std::int32_t)> PointParameteri = nullptr;
			function<void(enum_t, const std::int32_t *)> PointParameteriv = nullptr;
			function<void(float32_t)> FogCoordf = nullptr;
			function<void(const float32_t *)> FogCoordfv = nullptr;
			function<void(float64_t)> FogCoordd = nullptr;
			function<void(const float64_t *)> FogCoorddv = nullptr;
			function<void(enum_t, std::int32_t, const void *)> FogCoordPointer = nullptr;
			function<void(std::int8_t, std::int8_t, std::int8_t)> SecondaryColor3b = nullptr;
			function<void(const std::int8_t *)> SecondaryColor3bv = nullptr;
			function<void(float64_t, float64_t, float64_t)> SecondaryColor3d = nullptr;
			function<void(const float64_t *)> SecondaryColor3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> SecondaryColor3f = nullptr;
			function<void(const float32_t *)> SecondaryColor3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> SecondaryColor3i = nullptr;
			function<void(const std::int32_t *)> SecondaryColor3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> SecondaryColor3s = nullptr;
			function<void(const std::int16_t *)> SecondaryColor3sv = nullptr;
			function<void(std::uint8_t, std::uint8_t, std::uint8_t)> SecondaryColor3ub = nullptr;
			function<void(const std::uint8_t *)> SecondaryColor3ubv = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t)> SecondaryColor3ui = nullptr;
			function<void(const std::uint32_t *)> SecondaryColor3uiv = nullptr;
			function<void(std::uint16_t, std::uint16_t, std::uint16_t)> SecondaryColor3us = nullptr;
			function<void(const std::uint16_t *)> SecondaryColor3usv = nullptr;
			function<void(std::int32_t, enum_t, std::int32_t, const void *)> SecondaryColorPointer = nullptr;
			function<void(float64_t, float64_t)> WindowPos2d = nullptr;
			function<void(const float64_t *)> WindowPos2dv = nullptr;
			function<void(float32_t, float32_t)> WindowPos2f = nullptr;
			function<void(const float32_t *)> WindowPos2fv = nullptr;
			function<void(std::int32_t, std::int32_t)> WindowPos2i = nullptr;
			function<void(const std::int32_t *)> WindowPos2iv = nullptr;
			function<void(std::int16_t, std::int16_t)> WindowPos2s = nullptr;
			function<void(const std::int16_t *)> WindowPos2sv = nullptr;
			function<void(float64_t, float64_t, float64_t)> WindowPos3d = nullptr;
			function<void(const float64_t *)> WindowPos3dv = nullptr;
			function<void(float32_t, float32_t, float32_t)> WindowPos3f = nullptr;
			function<void(const float32_t *)> WindowPos3fv = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> WindowPos3i = nullptr;
			function<void(const std::int32_t *)> WindowPos3iv = nullptr;
			function<void(std::int16_t, std::int16_t, std::int16_t)> WindowPos3s = nullptr;
			function<void(const std::int16_t *)> WindowPos3sv = nullptr;
			function<void(float32_t, float32_t, float32_t, float32_t)> BlendColor = nullptr;
			function<void(enum_t)> BlendEquation = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenQueries = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteQueries = nullptr;
			function<boolean_t(std::uint32_t)> IsQuery = nullptr;
			function<void(enum_t, std::uint32_t)> BeginQuery = nullptr;
			function<void(enum_t)> EndQuery = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetQueryiv = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetQueryObjectiv = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t *)> GetQueryObjectuiv = nullptr;
			function<void(enum_t, std::uint32_t)> BindBuffer = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteBuffers = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenBuffers = nullptr;
			function<boolean_t(std::uint32_t)> IsBuffer = nullptr;
			function<void(enum_t, std::ptrdiff_t, const void *, enum_t)> BufferData = nullptr;
			function<void(enum_t, std::ptrdiff_t, std::ptrdiff_t, const void *)> BufferSubData = nullptr;
			function<void(enum_t, std::ptrdiff_t, std::ptrdiff_t, void *)> GetBufferSubData = nullptr;
			function<void *(enum_t, enum_t)> MapBuffer = nullptr;
			function<boolean_t(enum_t)> UnmapBuffer = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetBufferParameteriv = nullptr;
			function<void(enum_t, enum_t, void **)> GetBufferPointerv = nullptr;
			function<void(enum_t, enum_t)> BlendEquationSeparate = nullptr;
			function<void(std::int32_t, const enum_t *)> DrawBuffers = nullptr;
			function<void(enum_t, enum_t, enum_t, enum_t)> StencilOpSeparate = nullptr;
			function<void(enum_t, enum_t, std::int32_t, std::uint32_t)> StencilFuncSeparate = nullptr;
			function<void(enum_t, std::uint32_t)> StencilMaskSeparate = nullptr;
			function<void(std::uint32_t, std::uint32_t)> AttachShader = nullptr;
			function<void(std::uint32_t, std::uint32_t, const char *)> BindAttribLocation = nullptr;
			function<void(std::uint32_t)> CompileShader = nullptr;
			function<std::uint32_t()> CreateProgram = nullptr;
			function<std::uint32_t(enum_t)> CreateShader = nullptr;
			function<void(std::uint32_t)> DeleteProgram = nullptr;
			function<void(std::uint32_t)> DeleteShader = nullptr;
			function<void(std::uint32_t, std::uint32_t)> DetachShader = nullptr;
			function<void(std::uint32_t)> DisableVertexAttribArray = nullptr;
			function<void(std::uint32_t)> EnableVertexAttribArray = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t *, std::int32_t *, enum_t *, char *)> GetActiveAttrib = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t *, std::int32_t *, enum_t *, char *)> GetActiveUniform = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, std::uint32_t *)> GetAttachedShaders = nullptr;
			function<std::int32_t(std::uint32_t, const char *)> GetAttribLocation = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetProgramiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, char *)> GetProgramInfoLog = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetShaderiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, char *)> GetShaderInfoLog = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, char *)> GetShaderSource = nullptr;
			function<std::int32_t(std::uint32_t, const char *)> GetUniformLocation = nullptr;
			function<void(std::uint32_t, std::int32_t, float32_t *)> GetUniformfv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *)> GetUniformiv = nullptr;
			function<void(std::uint32_t, enum_t, float64_t *)> GetVertexAttribdv = nullptr;
			function<void(std::uint32_t, enum_t, float32_t *)> GetVertexAttribfv = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetVertexAttribiv = nullptr;
			function<void(std::uint32_t, enum_t, void **)> GetVertexAttribPointerv = nullptr;
			function<boolean_t(std::uint32_t)> IsProgram = nullptr;
			function<boolean_t(std::uint32_t)> IsShader = nullptr;
			function<void(std::uint32_t)> LinkProgram = nullptr;
			function<void(std::uint32_t, std::int32_t, const char *const*, const std::int32_t *)> ShaderSource = nullptr;
			function<void(std::uint32_t)> UseProgram = nullptr;
			function<void(std::int32_t, float32_t)> Uniform1f = nullptr;
			function<void(std::int32_t, float32_t, float32_t)> Uniform2f = nullptr;
			function<void(std::int32_t, float32_t, float32_t, float32_t)> Uniform3f = nullptr;
			function<void(std::int32_t, float32_t, float32_t, float32_t, float32_t)> Uniform4f = nullptr;
			function<void(std::int32_t, std::int32_t)> Uniform1i = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t)> Uniform2i = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Uniform3i = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> Uniform4i = nullptr;
			function<void(std::int32_t, std::int32_t, const float32_t *)> Uniform1fv = nullptr;
			function<void(std::int32_t, std::int32_t, const float32_t *)> Uniform2fv = nullptr;
			function<void(std::int32_t, std::int32_t, const float32_t *)> Uniform3fv = nullptr;
			function<void(std::int32_t, std::int32_t, const float32_t *)> Uniform4fv = nullptr;
			function<void(std::int32_t, std::int32_t, const std::int32_t *)> Uniform1iv = nullptr;
			function<void(std::int32_t, std::int32_t, const std::int32_t *)> Uniform2iv = nullptr;
			function<void(std::int32_t, std::int32_t, const std::int32_t *)> Uniform3iv = nullptr;
			function<void(std::int32_t, std::int32_t, const std::int32_t *)> Uniform4iv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix2fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix3fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix4fv = nullptr;
			function<void(std::uint32_t)> ValidateProgram = nullptr;
			function<void(std::uint32_t, float64_t)> VertexAttrib1d = nullptr;
			function<void(std::uint32_t, const float64_t *)> VertexAttrib1dv = nullptr;
			function<void(std::uint32_t, float32_t)> VertexAttrib1f = nullptr;
			function<void(std::uint32_t, const float32_t *)> VertexAttrib1fv = nullptr;
			function<void(std::uint32_t, std::int16_t)> VertexAttrib1s = nullptr;
			function<void(std::uint32_t, const std::int16_t *)> VertexAttrib1sv = nullptr;
			function<void(std::uint32_t, float64_t, float64_t)> VertexAttrib2d = nullptr;
			function<void(std::uint32_t, const float64_t *)> VertexAttrib2dv = nullptr;
			function<void(std::uint32_t, float32_t, float32_t)> VertexAttrib2f = nullptr;
			function<void(std::uint32_t, const float32_t *)> VertexAttrib2fv = nullptr;
			function<void(std::uint32_t, std::int16_t, std::int16_t)> VertexAttrib2s = nullptr;
			function<void(std::uint32_t, const std::int16_t *)> VertexAttrib2sv = nullptr;
			function<void(std::uint32_t, float64_t, float64_t, float64_t)> VertexAttrib3d = nullptr;
			function<void(std::uint32_t, const float64_t *)> VertexAttrib3dv = nullptr;
			function<void(std::uint32_t, float32_t, float32_t, float32_t)> VertexAttrib3f = nullptr;
			function<void(std::uint32_t, const float32_t *)> VertexAttrib3fv = nullptr;
			function<void(std::uint32_t, std::int16_t, std::int16_t, std::int16_t)> VertexAttrib3s = nullptr;
			function<void(std::uint32_t, const std::int16_t *)> VertexAttrib3sv = nullptr;
			function<void(std::uint32_t, const std::int8_t *)> VertexAttrib4Nbv = nullptr;
			function<void(std::uint32_t, const std::int32_t *)> VertexAttrib4Niv = nullptr;
			function<void(std::uint32_t, const std::int16_t *)> VertexAttrib4Nsv = nullptr;
			function<void(std::uint32_t, std::uint8_t, std::uint8_t, std::uint8_t, std::uint8_t)> VertexAttrib4Nub = nullptr;
			function<void(std::uint32_t, const std::uint8_t *)> VertexAttrib4Nubv = nullptr;
			function<void(std::uint32_t, const std::uint32_t *)> VertexAttrib4Nuiv = nullptr;
			function<void(std::uint32_t, const std::uint16_t *)> VertexAttrib4Nusv = nullptr;
			function<void(std::uint32_t, const std::int8_t *)> VertexAttrib4bv = nullptr;
			function<void(std::uint32_t, float64_t, float64_t, float64_t, float64_t)> VertexAttrib4d = nullptr;
			function<void(std::uint32_t, const float64_t *)> VertexAttrib4dv = nullptr;
			function<void(std::uint32_t, float32_t, float32_t, float32_t, float32_t)> VertexAttrib4f = nullptr;
			function<void(std::uint32_t, const float32_t *)> VertexAttrib4fv = nullptr;
			function<void(std::uint32_t, const std::int32_t *)> VertexAttrib4iv = nullptr;
			function<void(std::uint32_t, std::int16_t, std::int16_t, std::int16_t, std::int16_t)> VertexAttrib4s = nullptr;
			function<void(std::uint32_t, const std::int16_t *)> VertexAttrib4sv = nullptr;
			function<void(std::uint32_t, const std::uint8_t *)> VertexAttrib4ubv = nullptr;
			function<void(std::uint32_t, const std::uint32_t *)> VertexAttrib4uiv = nullptr;
			function<void(std::uint32_t, const std::uint16_t *)> VertexAttrib4usv = nullptr;
			function<void(std::uint32_t, std::int32_t, enum_t, boolean_t, std::int32_t, const void *)> VertexAttribPointer = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix2x3fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix3x2fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix2x4fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix4x2fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix3x4fv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float32_t *)> UniformMatrix4x3fv = nullptr;
			function<void(std::uint32_t, boolean_t, boolean_t, boolean_t, boolean_t)> ColorMaski = nullptr;
			function<void(enum_t, std::uint32_t, boolean_t *)> GetBooleani_v = nullptr;
			function<void(enum_t, std::uint32_t, std::int32_t *)> GetIntegeri_v = nullptr;
			function<void(enum_t, std::uint32_t)> Enablei = nullptr;
			function<void(enum_t, std::uint32_t)> Disablei = nullptr;
			function<boolean_t(enum_t, std::uint32_t)> IsEnabledi = nullptr;
			function<void(enum_t)> BeginTransformFeedback = nullptr;
			function<void()> EndTransformFeedback = nullptr;
			function<void(enum_t, std::uint32_t, std::uint32_t, std::ptrdiff_t, std::ptrdiff_t)> BindBufferRange = nullptr;
			function<void(enum_t, std::uint32_t, std::uint32_t)> BindBufferBase = nullptr;
			function<void(std::uint32_t, std::int32_t, const char *const*, enum_t)> TransformFeedbackVaryings = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t *, std::int32_t *, enum_t *, char *)> GetTransformFeedbackVarying = nullptr;
			function<void(enum_t, enum_t)> ClampColor = nullptr;
			function<void(std::uint32_t, enum_t)> BeginConditionalRender = nullptr;
			function<void()> EndConditionalRender = nullptr;
			function<void(std::uint32_t, std::int32_t, enum_t, std::int32_t, const void *)> VertexAttribIPointer = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetVertexAttribIiv = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t *)> GetVertexAttribIuiv = nullptr;
			function<void(std::uint32_t, std::int32_t)> VertexAttribI1i = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t)> VertexAttribI2i = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, std::int32_t)> VertexAttribI3i = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> VertexAttribI4i = nullptr;
			function<void(std::uint32_t, std::uint32_t)> VertexAttribI1ui = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t)> VertexAttribI2ui = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t)> VertexAttribI3ui = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t)> VertexAttribI4ui = nullptr;
			function<void(std::uint32_t, const std::int32_t *)> VertexAttribI1iv = nullptr;
			function<void(std::uint32_t, const std::int32_t *)> VertexAttribI2iv = nullptr;
			function<void(std::uint32_t, const std::int32_t *)> VertexAttribI3iv = nullptr;
			function<void(std::uint32_t, const std::int32_t *)> VertexAttribI4iv = nullptr;
			function<void(std::uint32_t, const std::uint32_t *)> VertexAttribI1uiv = nullptr;
			function<void(std::uint32_t, const std::uint32_t *)> VertexAttribI2uiv = nullptr;
			function<void(std::uint32_t, const std::uint32_t *)> VertexAttribI3uiv = nullptr;
			function<void(std::uint32_t, const std::uint32_t *)> VertexAttribI4uiv = nullptr;
			function<void(std::uint32_t, const std::int8_t *)> VertexAttribI4bv = nullptr;
			function<void(std::uint32_t, const std::int16_t *)> VertexAttribI4sv = nullptr;
			function<void(std::uint32_t, const std::uint8_t *)> VertexAttribI4ubv = nullptr;
			function<void(std::uint32_t, const std::uint16_t *)> VertexAttribI4usv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::uint32_t *)> GetUniformuiv = nullptr;
			function<void(std::uint32_t, std::uint32_t, const char *)> BindFragDataLocation = nullptr;
			function<std::int32_t(std::uint32_t, const char *)> GetFragDataLocation = nullptr;
			function<void(std::int32_t, std::uint32_t)> Uniform1ui = nullptr;
			function<void(std::int32_t, std::uint32_t, std::uint32_t)> Uniform2ui = nullptr;
			function<void(std::int32_t, std::uint32_t, std::uint32_t, std::uint32_t)> Uniform3ui = nullptr;
			function<void(std::int32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t)> Uniform4ui = nullptr;
			function<void(std::int32_t, std::int32_t, const std::uint32_t *)> Uniform1uiv = nullptr;
			function<void(std::int32_t, std::int32_t, const std::uint32_t *)> Uniform2uiv = nullptr;
			function<void(std::int32_t, std::int32_t, const std::uint32_t *)> Uniform3uiv = nullptr;
			function<void(std::int32_t, std::int32_t, const std::uint32_t *)> Uniform4uiv = nullptr;
			function<void(enum_t, enum_t, const std::int32_t *)> TexParameterIiv = nullptr;
			function<void(enum_t, enum_t, const std::uint32_t *)> TexParameterIuiv = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetTexParameterIiv = nullptr;
			function<void(enum_t, enum_t, std::uint32_t *)> GetTexParameterIuiv = nullptr;
			function<void(enum_t, std::int32_t, const std::int32_t *)> ClearBufferiv = nullptr;
			function<void(enum_t, std::int32_t, const std::uint32_t *)> ClearBufferuiv = nullptr;
			function<void(enum_t, std::int32_t, const float32_t *)> ClearBufferfv = nullptr;
			function<void(enum_t, std::int32_t, float32_t, std::int32_t)> ClearBufferfi = nullptr;
			function<const std::uint8_t *(enum_t, std::uint32_t)> GetStringi = nullptr;
			function<boolean_t(std::uint32_t)> IsRenderbuffer = nullptr;
			function<void(enum_t, std::uint32_t)> BindRenderbuffer = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteRenderbuffers = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenRenderbuffers = nullptr;
			function<void(enum_t, enum_t, std::int32_t, std::int32_t)> RenderbufferStorage = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetRenderbufferParameteriv = nullptr;
			function<boolean_t(std::uint32_t)> IsFramebuffer = nullptr;
			function<void(enum_t, std::uint32_t)> BindFramebuffer = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteFramebuffers = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenFramebuffers = nullptr;
			function<enum_t(enum_t)> CheckFramebufferStatus = nullptr;
			function<void(enum_t, enum_t, enum_t, std::uint32_t, std::int32_t)> FramebufferTexture1D = nullptr;
			function<void(enum_t, enum_t, enum_t, std::uint32_t, std::int32_t)> FramebufferTexture2D = nullptr;
			function<void(enum_t, enum_t, enum_t, std::uint32_t, std::int32_t, std::int32_t)> FramebufferTexture3D = nullptr;
			function<void(enum_t, enum_t, enum_t, std::uint32_t)> FramebufferRenderbuffer = nullptr;
			function<void(enum_t, enum_t, enum_t, std::int32_t *)> GetFramebufferAttachmentParameteriv = nullptr;
			function<void(enum_t)> GenerateMipmap = nullptr;
			function<void(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, bitfield_t, enum_t)> BlitFramebuffer = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t)> RenderbufferStorageMultisample = nullptr;
			function<void(enum_t, enum_t, std::uint32_t, std::int32_t, std::int32_t)> FramebufferTextureLayer = nullptr;
			function<void *(enum_t, std::ptrdiff_t, std::ptrdiff_t, bitfield_t)> MapBufferRange = nullptr;
			function<void(enum_t, std::ptrdiff_t, std::ptrdiff_t)> FlushMappedBufferRange = nullptr;
			function<void(std::uint32_t)> BindVertexArray = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteVertexArrays = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenVertexArrays = nullptr;
			function<boolean_t(std::uint32_t)> IsVertexArray = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t)> DrawArraysInstanced = nullptr;
			function<void(enum_t, std::int32_t, enum_t, const void *, std::int32_t)> DrawElementsInstanced = nullptr;
			function<void(enum_t, enum_t, std::uint32_t)> TexBuffer = nullptr;
			function<void(std::uint32_t)> PrimitiveRestartIndex = nullptr;
			function<void(enum_t, enum_t, std::ptrdiff_t, std::ptrdiff_t, std::ptrdiff_t)> CopyBufferSubData = nullptr;
			function<void(std::uint32_t, std::int32_t, const char *const*, std::uint32_t *)> GetUniformIndices = nullptr;
			function<void(std::uint32_t, std::int32_t, const std::uint32_t *, enum_t, std::int32_t *)> GetActiveUniformsiv = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t *, char *)> GetActiveUniformName = nullptr;
			function<std::uint32_t(std::uint32_t, const char *)> GetUniformBlockIndex = nullptr;
			function<void(std::uint32_t, std::uint32_t, enum_t, std::int32_t *)> GetActiveUniformBlockiv = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t *, char *)> GetActiveUniformBlockName = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t)> UniformBlockBinding = nullptr;
			function<void(enum_t, std::int32_t, enum_t, const void *, std::int32_t)> DrawElementsBaseVertex = nullptr;
			function<void(enum_t, std::uint32_t, std::uint32_t, std::int32_t, enum_t, const void *, std::int32_t)> DrawRangeElementsBaseVertex = nullptr;
			function<void(enum_t, std::int32_t, enum_t, const void *, std::int32_t, std::int32_t)> DrawElementsInstancedBaseVertex = nullptr;
			function<void(enum_t, const std::int32_t *, enum_t, const void *const*, std::int32_t, const std::int32_t *)> MultiDrawElementsBaseVertex = nullptr;
			function<void(enum_t)> ProvokingVertex = nullptr;
			function<GLsync(enum_t, bitfield_t)> FenceSync = nullptr;
			function<boolean_t(GLsync)> IsSync = nullptr;
			function<void(GLsync)> DeleteSync = nullptr;
			function<enum_t(GLsync, bitfield_t, std::uint64_t)> ClientWaitSync = nullptr;
			function<void(GLsync, bitfield_t, std::uint64_t)> WaitSync = nullptr;
			function<void(enum_t, std::int64_t *)> GetInteger64v = nullptr;
			function<void(GLsync, enum_t, std::int32_t, std::int32_t *, std::int32_t *)> GetSynciv = nullptr;
			function<void(enum_t, std::uint32_t, std::int64_t *)> GetInteger64i_v = nullptr;
			function<void(enum_t, enum_t, std::int64_t *)> GetBufferParameteri64v = nullptr;
			function<void(enum_t, enum_t, std::uint32_t, std::int32_t)> FramebufferTexture = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, boolean_t)> TexImage2DMultisample = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, boolean_t)> TexImage3DMultisample = nullptr;
			function<void(enum_t, std::uint32_t, float32_t *)> GetMultisamplefv = nullptr;
			function<void(std::uint32_t, bitfield_t)> SampleMaski = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t, const char *)> BindFragDataLocationIndexed = nullptr;
			function<std::int32_t(std::uint32_t, const char *)> GetFragDataIndex = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenSamplers = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteSamplers = nullptr;
			function<boolean_t(std::uint32_t)> IsSampler = nullptr;
			function<void(std::uint32_t, std::uint32_t)> BindSampler = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t)> SamplerParameteri = nullptr;
			function<void(std::uint32_t, enum_t, const std::int32_t *)> SamplerParameteriv = nullptr;
			function<void(std::uint32_t, enum_t, float32_t)> SamplerParameterf = nullptr;
			function<void(std::uint32_t, enum_t, const float32_t *)> SamplerParameterfv = nullptr;
			function<void(std::uint32_t, enum_t, const std::int32_t *)> SamplerParameterIiv = nullptr;
			function<void(std::uint32_t, enum_t, const std::uint32_t *)> SamplerParameterIuiv = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetSamplerParameteriv = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetSamplerParameterIiv = nullptr;
			function<void(std::uint32_t, enum_t, float32_t *)> GetSamplerParameterfv = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t *)> GetSamplerParameterIuiv = nullptr;
			function<void(std::uint32_t, enum_t)> QueryCounter = nullptr;
			function<void(std::uint32_t, enum_t, std::int64_t *)> GetQueryObjecti64v = nullptr;
			function<void(std::uint32_t, enum_t, std::uint64_t *)> GetQueryObjectui64v = nullptr;
			function<void(std::uint32_t, std::uint32_t)> VertexAttribDivisor = nullptr;
			function<void(std::uint32_t, enum_t, boolean_t, std::uint32_t)> VertexAttribP1ui = nullptr;
			function<void(std::uint32_t, enum_t, boolean_t, const std::uint32_t *)> VertexAttribP1uiv = nullptr;
			function<void(std::uint32_t, enum_t, boolean_t, std::uint32_t)> VertexAttribP2ui = nullptr;
			function<void(std::uint32_t, enum_t, boolean_t, const std::uint32_t *)> VertexAttribP2uiv = nullptr;
			function<void(std::uint32_t, enum_t, boolean_t, std::uint32_t)> VertexAttribP3ui = nullptr;
			function<void(std::uint32_t, enum_t, boolean_t, const std::uint32_t *)> VertexAttribP3uiv = nullptr;
			function<void(std::uint32_t, enum_t, boolean_t, std::uint32_t)> VertexAttribP4ui = nullptr;
			function<void(std::uint32_t, enum_t, boolean_t, const std::uint32_t *)> VertexAttribP4uiv = nullptr;
			function<void(float32_t)> MinSampleShading = nullptr;
			function<void(std::uint32_t, enum_t)> BlendEquationi = nullptr;
			function<void(std::uint32_t, enum_t, enum_t)> BlendEquationSeparatei = nullptr;
			function<void(std::uint32_t, enum_t, enum_t)> BlendFunci = nullptr;
			function<void(std::uint32_t, enum_t, enum_t, enum_t, enum_t)> BlendFuncSeparatei = nullptr;
			function<void(enum_t, const void *)> DrawArraysIndirect = nullptr;
			function<void(enum_t, enum_t, const void *)> DrawElementsIndirect = nullptr;
			function<void(std::int32_t, float64_t)> Uniform1d = nullptr;
			function<void(std::int32_t, float64_t, float64_t)> Uniform2d = nullptr;
			function<void(std::int32_t, float64_t, float64_t, float64_t)> Uniform3d = nullptr;
			function<void(std::int32_t, float64_t, float64_t, float64_t, float64_t)> Uniform4d = nullptr;
			function<void(std::int32_t, std::int32_t, const float64_t *)> Uniform1dv = nullptr;
			function<void(std::int32_t, std::int32_t, const float64_t *)> Uniform2dv = nullptr;
			function<void(std::int32_t, std::int32_t, const float64_t *)> Uniform3dv = nullptr;
			function<void(std::int32_t, std::int32_t, const float64_t *)> Uniform4dv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float64_t *)> UniformMatrix2dv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float64_t *)> UniformMatrix3dv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float64_t *)> UniformMatrix4dv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float64_t *)> UniformMatrix2x3dv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float64_t *)> UniformMatrix2x4dv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float64_t *)> UniformMatrix3x2dv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float64_t *)> UniformMatrix3x4dv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float64_t *)> UniformMatrix4x2dv = nullptr;
			function<void(std::int32_t, std::int32_t, boolean_t, const float64_t *)> UniformMatrix4x3dv = nullptr;
			function<void(std::uint32_t, std::int32_t, float64_t *)> GetUniformdv = nullptr;
			function<std::int32_t(std::uint32_t, enum_t, const char *)> GetSubroutineUniformLocation = nullptr;
			function<std::uint32_t(std::uint32_t, enum_t, const char *)> GetSubroutineIndex = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t, enum_t, std::int32_t *)> GetActiveSubroutineUniformiv = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t, std::int32_t, std::int32_t *, char *)> GetActiveSubroutineUniformName = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t, std::int32_t, std::int32_t *, char *)> GetActiveSubroutineName = nullptr;
			function<void(enum_t, std::int32_t, const std::uint32_t *)> UniformSubroutinesuiv = nullptr;
			function<void(enum_t, std::int32_t, std::uint32_t *)> GetUniformSubroutineuiv = nullptr;
			function<void(std::uint32_t, enum_t, enum_t, std::int32_t *)> GetProgramStageiv = nullptr;
			function<void(enum_t, std::int32_t)> PatchParameteri = nullptr;
			function<void(enum_t, const float32_t *)> PatchParameterfv = nullptr;
			function<void(enum_t, std::uint32_t)> BindTransformFeedback = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteTransformFeedbacks = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenTransformFeedbacks = nullptr;
			function<boolean_t(std::uint32_t)> IsTransformFeedback = nullptr;
			function<void()> PauseTransformFeedback = nullptr;
			function<void()> ResumeTransformFeedback = nullptr;
			function<void(enum_t, std::uint32_t)> DrawTransformFeedback = nullptr;
			function<void(enum_t, std::uint32_t, std::uint32_t)> DrawTransformFeedbackStream = nullptr;
			function<void(enum_t, std::uint32_t, std::uint32_t)> BeginQueryIndexed = nullptr;
			function<void(enum_t, std::uint32_t)> EndQueryIndexed = nullptr;
			function<void(enum_t, std::uint32_t, enum_t, std::int32_t *)> GetQueryIndexediv = nullptr;
			function<void()> ReleaseShaderCompiler = nullptr;
			function<void(std::int32_t, const std::uint32_t *, enum_t, const void *, std::int32_t)> ShaderBinary = nullptr;
			function<void(enum_t, enum_t, std::int32_t *, std::int32_t *)> GetShaderPrecisionFormat = nullptr;
			function<void(float32_t, float32_t)> DepthRangef = nullptr;
			function<void(float32_t)> ClearDepthf = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, enum_t *, void *)> GetProgramBinary = nullptr;
			function<void(std::uint32_t, enum_t, const void *, std::int32_t)> ProgramBinary = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t)> ProgramParameteri = nullptr;
			function<void(std::uint32_t, bitfield_t, std::uint32_t)> UseProgramStages = nullptr;
			function<void(std::uint32_t, std::uint32_t)> ActiveShaderProgram = nullptr;
			function<std::uint32_t(enum_t, std::int32_t, const char *const*)> CreateShaderProgramv = nullptr;
			function<void(std::uint32_t)> BindProgramPipeline = nullptr;
			function<void(std::int32_t, const std::uint32_t *)> DeleteProgramPipelines = nullptr;
			function<void(std::int32_t, std::uint32_t *)> GenProgramPipelines = nullptr;
			function<boolean_t(std::uint32_t)> IsProgramPipeline = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t *)> GetProgramPipelineiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t)> ProgramUniform1i = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const std::int32_t *)> ProgramUniform1iv = nullptr;
			function<void(std::uint32_t, std::int32_t, float32_t)> ProgramUniform1f = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const float32_t *)> ProgramUniform1fv = nullptr;
			function<void(std::uint32_t, std::int32_t, float64_t)> ProgramUniform1d = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const float64_t *)> ProgramUniform1dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::uint32_t)> ProgramUniform1ui = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const std::uint32_t *)> ProgramUniform1uiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, std::int32_t)> ProgramUniform2i = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const std::int32_t *)> ProgramUniform2iv = nullptr;
			function<void(std::uint32_t, std::int32_t, float32_t, float32_t)> ProgramUniform2f = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const float32_t *)> ProgramUniform2fv = nullptr;
			function<void(std::uint32_t, std::int32_t, float64_t, float64_t)> ProgramUniform2d = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const float64_t *)> ProgramUniform2dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t)> ProgramUniform2ui = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const std::uint32_t *)> ProgramUniform2uiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> ProgramUniform3i = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const std::int32_t *)> ProgramUniform3iv = nullptr;
			function<void(std::uint32_t, std::int32_t, float32_t, float32_t, float32_t)> ProgramUniform3f = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const float32_t *)> ProgramUniform3fv = nullptr;
			function<void(std::uint32_t, std::int32_t, float64_t, float64_t, float64_t)> ProgramUniform3d = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const float64_t *)> ProgramUniform3dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t, std::uint32_t)> ProgramUniform3ui = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const std::uint32_t *)> ProgramUniform3uiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> ProgramUniform4i = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const std::int32_t *)> ProgramUniform4iv = nullptr;
			function<void(std::uint32_t, std::int32_t, float32_t, float32_t, float32_t, float32_t)> ProgramUniform4f = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const float32_t *)> ProgramUniform4fv = nullptr;
			function<void(std::uint32_t, std::int32_t, float64_t, float64_t, float64_t, float64_t)> ProgramUniform4d = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const float64_t *)> ProgramUniform4dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t)> ProgramUniform4ui = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, const std::uint32_t *)> ProgramUniform4uiv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float32_t *)> ProgramUniformMatrix2fv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float32_t *)> ProgramUniformMatrix3fv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float32_t *)> ProgramUniformMatrix4fv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float64_t *)> ProgramUniformMatrix2dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float64_t *)> ProgramUniformMatrix3dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float64_t *)> ProgramUniformMatrix4dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float32_t *)> ProgramUniformMatrix2x3fv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float32_t *)> ProgramUniformMatrix3x2fv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float32_t *)> ProgramUniformMatrix2x4fv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float32_t *)> ProgramUniformMatrix4x2fv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float32_t *)> ProgramUniformMatrix3x4fv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float32_t *)> ProgramUniformMatrix4x3fv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float64_t *)> ProgramUniformMatrix2x3dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float64_t *)> ProgramUniformMatrix3x2dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float64_t *)> ProgramUniformMatrix2x4dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float64_t *)> ProgramUniformMatrix4x2dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float64_t *)> ProgramUniformMatrix3x4dv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, boolean_t, const float64_t *)> ProgramUniformMatrix4x3dv = nullptr;
			function<void(std::uint32_t)> ValidateProgramPipeline = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t *, char *)> GetProgramPipelineInfoLog = nullptr;
			function<void(std::uint32_t, float64_t)> VertexAttribL1d = nullptr;
			function<void(std::uint32_t, float64_t, float64_t)> VertexAttribL2d = nullptr;
			function<void(std::uint32_t, float64_t, float64_t, float64_t)> VertexAttribL3d = nullptr;
			function<void(std::uint32_t, float64_t, float64_t, float64_t, float64_t)> VertexAttribL4d = nullptr;
			function<void(std::uint32_t, const float64_t *)> VertexAttribL1dv = nullptr;
			function<void(std::uint32_t, const float64_t *)> VertexAttribL2dv = nullptr;
			function<void(std::uint32_t, const float64_t *)> VertexAttribL3dv = nullptr;
			function<void(std::uint32_t, const float64_t *)> VertexAttribL4dv = nullptr;
			function<void(std::uint32_t, std::int32_t, enum_t, std::int32_t, const void *)> VertexAttribLPointer = nullptr;
			function<void(std::uint32_t, enum_t, float64_t *)> GetVertexAttribLdv = nullptr;
			function<void(std::uint32_t, std::int32_t, const float32_t *)> ViewportArrayv = nullptr;
			function<void(std::uint32_t, float32_t, float32_t, float32_t, float32_t)> ViewportIndexedf = nullptr;
			function<void(std::uint32_t, const float32_t *)> ViewportIndexedfv = nullptr;
			function<void(std::uint32_t, std::int32_t, const std::int32_t *)> ScissorArrayv = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> ScissorIndexed = nullptr;
			function<void(std::uint32_t, const std::int32_t *)> ScissorIndexedv = nullptr;
			function<void(std::uint32_t, std::int32_t, const float64_t *)> DepthRangeArrayv = nullptr;
			function<void(std::uint32_t, float64_t, float64_t)> DepthRangeIndexed = nullptr;
			function<void(enum_t, std::uint32_t, float32_t *)> GetFloati_v = nullptr;
			function<void(enum_t, std::uint32_t, float64_t *)> GetDoublei_v = nullptr;
			function<void(enum_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t)> DrawArraysInstancedBaseInstance = nullptr;
			function<void(enum_t, std::int32_t, enum_t, const void *, std::int32_t, std::uint32_t)> DrawElementsInstancedBaseInstance = nullptr;
			function<void(enum_t, std::int32_t, enum_t, const void *, std::int32_t, std::int32_t, std::uint32_t)> DrawElementsInstancedBaseVertexBaseInstance = nullptr;
			function<void(enum_t, enum_t, enum_t, std::int32_t, std::int32_t *)> GetInternalformativ = nullptr;
			function<void(std::uint32_t, std::uint32_t, enum_t, std::int32_t *)> GetActiveAtomicCounterBufferiv = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::int32_t, boolean_t, std::int32_t, enum_t, enum_t)> BindImageTexture = nullptr;
			function<void(bitfield_t)> MemoryBarrier = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t)> TexStorage1D = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t)> TexStorage2D = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t)> TexStorage3D = nullptr;
			function<void(enum_t, std::uint32_t, std::int32_t)> DrawTransformFeedbackInstanced = nullptr;
			function<void(enum_t, std::uint32_t, std::uint32_t, std::int32_t)> DrawTransformFeedbackStreamInstanced = nullptr;
			function<void(enum_t, enum_t, enum_t, enum_t, const void *)> ClearBufferData = nullptr;
			function<void(enum_t, enum_t, std::ptrdiff_t, std::ptrdiff_t, enum_t, enum_t, const void *)> ClearBufferSubData = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t)> DispatchCompute = nullptr;
			function<void(std::ptrdiff_t)> DispatchComputeIndirect = nullptr;
			function<void(std::uint32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> CopyImageSubData = nullptr;
			function<void(enum_t, enum_t, std::int32_t)> FramebufferParameteri = nullptr;
			function<void(enum_t, enum_t, std::int32_t *)> GetFramebufferParameteriv = nullptr;
			function<void(enum_t, enum_t, enum_t, std::int32_t, std::int64_t *)> GetInternalformati64v = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> InvalidateTexSubImage = nullptr;
			function<void(std::uint32_t, std::int32_t)> InvalidateTexImage = nullptr;
			function<void(std::uint32_t, std::ptrdiff_t, std::ptrdiff_t)> InvalidateBufferSubData = nullptr;
			function<void(std::uint32_t)> InvalidateBufferData = nullptr;
			function<void(enum_t, std::int32_t, const enum_t *)> InvalidateFramebuffer = nullptr;
			function<void(enum_t, std::int32_t, const enum_t *, std::int32_t, std::int32_t, std::int32_t, std::int32_t)> InvalidateSubFramebuffer = nullptr;
			function<void(enum_t, const void *, std::int32_t, std::int32_t)> MultiDrawArraysIndirect = nullptr;
			function<void(enum_t, enum_t, const void *, std::int32_t, std::int32_t)> MultiDrawElementsIndirect = nullptr;
			function<void(std::uint32_t, enum_t, enum_t, std::int32_t *)> GetProgramInterfaceiv = nullptr;
			function<std::uint32_t(std::uint32_t, enum_t, const char *)> GetProgramResourceIndex = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t, std::int32_t, std::int32_t *, char *)> GetProgramResourceName = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t, std::int32_t, const enum_t *, std::int32_t, std::int32_t *, std::int32_t *)> GetProgramResourceiv = nullptr;
			function<std::int32_t(std::uint32_t, enum_t, const char *)> GetProgramResourceLocation = nullptr;
			function<std::int32_t(std::uint32_t, enum_t, const char *)> GetProgramResourceLocationIndex = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::uint32_t)> ShaderStorageBlockBinding = nullptr;
			function<void(enum_t, enum_t, std::uint32_t, std::ptrdiff_t, std::ptrdiff_t)> TexBufferRange = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, boolean_t)> TexStorage2DMultisample = nullptr;
			function<void(enum_t, std::int32_t, enum_t, std::int32_t, std::int32_t, std::int32_t, boolean_t)> TexStorage3DMultisample = nullptr;
			function<void(std::uint32_t, enum_t, std::uint32_t, enum_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t)> TextureView = nullptr;
			function<void(std::uint32_t, std::uint32_t, std::ptrdiff_t, std::int32_t)> BindVertexBuffer = nullptr;
			function<void(std::uint32_t, std::int32_t, enum_t, boolean_t, std::uint32_t)> VertexAttribFormat = nullptr;
			function<void(std::uint32_t, std::int32_t, enum_t, std::uint32_t)> VertexAttribIFormat = nullptr;
			function<void(std::uint32_t, std::int32_t, enum_t, std::uint32_t)> VertexAttribLFormat = nullptr;
			function<void(std::uint32_t, std::uint32_t)> VertexAttribBinding = nullptr;
			function<void(std::uint32_t, std::uint32_t)> VertexBindingDivisor = nullptr;
			function<void(enum_t, enum_t, enum_t, std::int32_t, const std::uint32_t *, boolean_t)> DebugMessageControl = nullptr;
			function<void(enum_t, enum_t, std::uint32_t, enum_t, std::int32_t, const char *)> DebugMessageInsert = nullptr;
			function<void(debug_proc_t, const void *)> DebugMessageCallback = nullptr;
			function<std::uint32_t(std::uint32_t, std::int32_t, enum_t *, enum_t *, std::uint32_t *, enum_t *, std::int32_t *, char *)> GetDebugMessageLog = nullptr;
			function<void(enum_t, std::uint32_t, std::int32_t, const char *)> PushDebugGroup = nullptr;
			function<void()> PopDebugGroup = nullptr;
			function<void(enum_t, std::uint32_t, std::int32_t, const char *)> ObjectLabel = nullptr;
			function<void(enum_t, std::uint32_t, std::int32_t, std::int32_t *, char *)> GetObjectLabel = nullptr;
			function<void(const void *, std::int32_t, const char *)> ObjectPtrLabel = nullptr;
			function<void(const void *, std::int32_t, std::int32_t *, char *)> GetObjectPtrLabel = nullptr;
			function<void(enum_t, std::ptrdiff_t, const void *, bitfield_t)> BufferStorage = nullptr;
			function<void(std::uint32_t, std::int32_t, enum_t, enum_t, const void *)> ClearTexImage = nullptr;
			function<void(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, enum_t, enum_t, const void *)> ClearTexSubImage = nullptr;
			function<void(enum_t, std::uint32_t, std::int32_t, const std::uint32_t *)> BindBuffersBase = nullptr;
			function<void(enum_t, std::uint32_t, std::int32_t, const std::uint32_t *, const std::ptrdiff_t *, const std::ptrdiff_t *)> BindBuffersRange = nullptr;
			function<void(std::uint32_t, std::int32_t, const std::uint32_t *)> BindTextures = nullptr;
			function<void(std::uint32_t, std::int32_t, const std::uint32_t *)> BindSamplers = nullptr;
			function<void(std::uint32_t, std::int32_t, const std::uint32_t *)> BindImageTextures = nullptr;
			function<void(std::uint32_t, std::int32_t, const std::uint32_t *, const std::ptrdiff_t *, const std::int32_t *)> BindVertexBuffers = nullptr;
		public:
			api(const api&) = default;
			api& operator = (const api&) = default;
			api() = default;
		public:
		};
		void load(api&, std::function<void*(const char*)>);
	}
}

#endif